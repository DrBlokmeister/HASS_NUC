substitutions:
  device_name: "Epaper Controller"
  device_friendly_name: "Epaper Controller"
  location: "Bedroom Epapercontroller"
  espname: "epapercontroller"
  devicename: AQI Display
  gpio_led_status: GPIO2
  gpio_i2c_sda: GPIO21
  gpio_i2c_scl: GPIO22
  gpio_uart_rx_pin: GPIO16
  gpio_uart_tx_pin: GPIO17
  gpio_spi_clk_pin: GPIO25
  gpio_spi_mosi_pin: GPIO26
  gpio_cs_pin: GPIO32
  gpio_busy_pin: GPIO33
  gpio_reset_pin: GPIO27
  gpio_dc_pin: GPIO13
  gpio_buzzer: GPIO04
  gpio_led_red: GPIO19
  gpio_led_green: GPIO23
  gpio_led_blue: GPIO18

esphome:
  name: ${espname}
  comment: "ESP32 Doit Devkit v1"

esp32:
  board: esp32doit-devkit-v1

packages:
  wifi: !include /config/esphome/common/wifi.yaml
  network_diagnostics: !include /config/esphome/common/network_diagnostics.yaml
  base_config: !include /config/esphome/common/base_config.yaml
  co2: !include
    file: templates/aqm_components/co2.yaml
    vars:
      uart_rx_pin: ${gpio_uart_rx_pin}
      uart_tx_pin: ${gpio_uart_tx_pin}

spi:
  clk_pin: $gpio_spi_clk_pin
  mosi_pin: $gpio_spi_mosi_pin
  id: epaper_display

binary_sensor:
  - platform: status
    name: "Board connected"
    id: connection

sensor:
  - platform: homeassistant
    id: bedroomtemp
    entity_id:  sensor.temperature_bedroom
  - platform: homeassistant
    id: livingroomtemp
    entity_id: sensor.temperature_livingroom
  - platform: homeassistant
    id: outsidetemp
    entity_id: sensor.temperature_outside
  - platform: homeassistant
    id: bedroomhumi
    entity_id:  sensor.humidity_bedroom
  - platform: homeassistant
    id: livingroomhumi
    entity_id: sensor.humidity_livingroom
  - platform: homeassistant
    id: outsidehumi
    entity_id: sensor.humidity_outside
  - platform: homeassistant
    id: co2concentration
    entity_id: sensor.co2_concentration_filtered
  - platform: homeassistant
    id: bedweight
    entity_id: sensor.bed_weight_calibrated
  - platform: homeassistant
    id: bedweightbalanceupdown
    entity_id: sensor.bed_weight_balance_updown
  - platform: homeassistant
    id: bedweightbalanceleftright
    entity_id: sensor.bed_weight_balance_leftright

time:
  - platform: sntp
    timezone: Europe/Amsterdam
    id: sntp_time
    servers:
      - 0.nl.pool.ntp.org
      - ntp1.time.nl
      - 193.79.237.14

sun:
  latitude: !secret home_latitude
  longitude: !secret home_longitude

text_sensor:
  - platform: version
    name: "Epaperdisplay Version"

  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
    id: nextsunrise
    format: "%H:%M"
  - platform: sun
    name: Sun Next Sunset
    type: sunset
    id: nextsunset
    format: "%H:%M"
    
  - platform: homeassistant
    id: weather
    entity_id: weather.home

interval:
  - interval: 10s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: $gpio_cs_pin
    busy_pin: $gpio_busy_pin
    reset_pin: $gpio_reset_pin
    dc_pin: $gpio_dc_pin
    model: 2.90in
    rotation: 270°
    full_update_every: 300
    update_interval: 1s
    pages:
      - id: page1
        lambda: |-
          /* Moon icon */
          //if(id(moon_icon).has_state()) {
          //  //ESP_LOGI("Moon icon", "%s", id(moon_icon).state.c_str());
          //  it.printf(25, 42, id(icon_45_font), TextAlign::BASELINE_CENTER, "%s", id(moon_icon).state.c_str());
          //}

          int x, y;
          x = 0, y = 0;
          if (id(weather).has_state()) {
            if (id(weather).state == "clear-night") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0594");
            } else if (id(weather).state == "cloudy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0590");
            } else if (id(weather).state == "fog") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0591");
            } else if (id(weather).state == "hail") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0592");
            } else if (id(weather).state == "lightning") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0593");
            } else if (id(weather).state == "lightning-rainy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F067E");
            } else if (id(weather).state == "partlycloudy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0595");
            } else if (id(weather).state == "pouring") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0596");
            } else if (id(weather).state == "rainy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0597");
            } else if (id(weather).state == "snowy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0598");
            } else if (id(weather).state == "snowy-rainy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F067F");
            } else if (id(weather).state == "sunny") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0599");
            } else if (id(weather).state == "windy") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F059D");
            } else if (id(weather).state == "windy-variant") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F059E");
            } else if (id(weather).state == "exceptional") {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F0F30");
            } else {
              it.printf(x, y, id(icon_60_font), TextAlign::TOP_LEFT , "\U000F14E4");
            }
          } else {
            it.printf(x, y, id(icon_60_font), TextAlign::BASELINE_CENTER , "\U000F14E4");
          }

          //sun set-rise
          it.printf(85, 22, id(icon_20_font), TextAlign::BASELINE_RIGHT, "󰖜");
          it.printf(135, 22, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(nextsunrise).state.c_str());
          it.printf(85, 44, id(icon_20_font), TextAlign::BASELINE_RIGHT, "󰖛");
          it.printf(135, 44, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(nextsunset).state.c_str());

          //date
          it.strftime(210, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
          it.printf(213, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
          it.strftime(280, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
          it.printf(283, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

          //line
          it.line(0, 54, 296, 54);

          //Time
          it.strftime(3, 45, id(size_85_font), "%H:%M", id(sntp_time).now());
          it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now());

          it.strftime(250, 58, id(size_14_font), "%a", id(sntp_time).now());
      - id: page2
        lambda: |-
          int x, y;
          //ESP_LOGI("display", "Updating..");

          //Time
          it.strftime(3, 0, id(size_20_font), "%H:%M", id(sntp_time).now());

          /* WiFi Signal Strength */
          x = 80, y = 20;
          if(id(wifi_signal_sensor).has_state()) {
            if (id(wifi_signal_sensor).state >= -50) {
                //Excellent
                it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰤨");
                //ESP_LOGI("WiFi", "Exellent");
            } else if (id(wifi_signal_sensor).state  >= -62) {
                //Good
                it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰤥");
                //ESP_LOGI("WiFi", "Good");
            } else if (id(wifi_signal_sensor).state  >= -67) {
                //Fair
                it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰤢");
                //ESP_LOGI("WiFi", "Fair");
            } else if (id(wifi_signal_sensor).state  >= -75) {
                //Weak
                it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰤟");
                //ESP_LOGI("WiFi", "Weak");
            } else {
                //Unlikely working signal
                it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰤯");
                //ESP_LOGI("WiFi", "Unlikely");
            }
          } else {
            // No state, mdi-wifi-strength-off-outline
            it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "\U000F092E");
          }

          x = 105, y = 20;
          if (id(connection).has_state()) {
            if (id(connection).state == true) {
              it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰟐"); //Home assistant icon
            } else {
              it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰒎"); //Server disconnected icon
            }
          } else {
            it.print(x, y, id(icon_20_font), TextAlign::BOTTOM_RIGHT, "󰒎"); //Server disconnected icon
          }

          //Temperature
          it.printf(5, 83, id(icon_20_font), TextAlign::BASELINE_LEFT, "󰢠");  //bedroom icon
          it.printf(5, 103, id(icon_20_font), TextAlign::BASELINE_LEFT, "󱕭");  //livingroom icon
          it.printf(5, 123, id(icon_20_font), TextAlign::BASELINE_LEFT, "󰹩");  //outside icon
          it.printf(30, 83, id(icon_20_font), TextAlign::BASELINE_LEFT, "󰔏");  //thermometer icon
          it.printf(30, 103, id(icon_20_font), TextAlign::BASELINE_LEFT, "󰔏");  //thermometer icon
          it.printf(30, 123, id(icon_20_font), TextAlign::BASELINE_LEFT, "󰔏");  //thermometer icon
          it.printf(118, 83, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f°C", id(bedroomtemp).state);
          it.printf(118, 103, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f°C", id(livingroomtemp).state);
          it.printf(118, 123, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f°C", id(outsidetemp).state);

          it.printf(140, 83, id(icon_20_font), TextAlign::BASELINE_RIGHT, "󰖎");
          it.printf(140, 103, id(icon_20_font), TextAlign::BASELINE_RIGHT, "󰖎");
          it.printf(140, 123, id(icon_20_font), TextAlign::BASELINE_RIGHT, "󰖎");
          it.printf(190, 83, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f%%", id(bedroomhumi).state);
          it.printf(190, 103, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f%%", id(livingroomhumi).state);
          it.printf(190, 123, id(size_20_font), TextAlign::BASELINE_RIGHT, "%.1f%%", id(outsidehumi).state);

          //Bedscale
          x = 195, y = 83;
          if (id(bedweight).has_state()) {
            it.print(x, y, id(icon_20_font), TextAlign::BASELINE_LEFT, "\U000F0472"); // mdi-scale
            it.printf(x + 20, y, id(size_20_font), TextAlign::BASELINE_LEFT, "%.2f kg", id(bedweight).state);
            it.printf(150 , 50, id(size_50_font), TextAlign::BASELINE_LEFT, "%02.0f", floor(id(bedweight).state));
            it.printf(210 , 50, id(size_20_font), TextAlign::BASELINE_LEFT, "%02.0f", ((id(bedweight).state - floor(id(bedweight).state)) * 100));
          } else {
            it.print(x, y, id(icon_20_font), TextAlign::BASELINE_LEFT, "\U000F105A"); //mdi-scale-off
          }

          //it.printf(150 , 50, id(size_50_font), TextAlign::BASELINE_LEFT, "%02.0f", floor(id(bedweight).state));
          //it.printf(210 , 50, id(size_20_font), TextAlign::BASELINE_LEFT, "%02.0f", ((id(bedweight).state - floor(id(bedweight).state)) * 100));
          
          //CO2value
          x = 195, y = 103;
          if (id(co2).has_state()) {
            it.print(x, y, id(icon_20_font), TextAlign::BASELINE_LEFT, "\U000F07E4"); // mdi-co20-molecule
            it.printf(x + 20, y, id(size_20_font), TextAlign::BASELINE_LEFT, "%.0f ppm", id(co2).state);
          } else {
            it.print(x, y, id(size_20_font), TextAlign::BASELINE_LEFT, "NC"); //mdi-scale-off
          }

font:
  # Main large time
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_85_font
    size: 85
  # Seconds, date, big numbers, bedscale display
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_60_font
    size: 60
  # Date (day/month), big numbers, bedscale display
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_50_font
    size: 50
  # Small text ("NC", "kg", "ppm", "D", "M", weekday, etc.)
  - file: 'fonts/Roboto-Light.ttf'
    id: size_14_font
    size: 14
  # Most text, values, temperatures, units, etc.
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_20_font
    size: 20

  # WEATHER ICONS and large status icons
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_60_font
    size: 60
    glyphs: [
      # Weather
      "\U000F0594", # clear-night
      "\U000F0590", # cloudy
      "\U000F0591", # fog
      "\U000F0592", # hail
      "\U000F0593", # lightning
      "\U000F067E", # lightning-rainy
      "\U000F0595", # partlycloudy
      "\U000F0596", # pouring
      "\U000F0597", # rainy
      "\U000F0598", # snowy
      "\U000F067F", # snowy-rainy
      "\U000F0599", # sunny
      "\U000F059D", # windy
      "\U000F059E", # windy-variant
      "\U000F0F30", # exceptional
      "\U000F14E4", # weather-sunny-off
      '󰔏',         # thermometer (optional, only if used at this size)
      '󰖎'          # humidity (optional, only if used at this size)
    ]

  # SMALL ICONS for wifi, thermometer, bed, couch, co2, etc.
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_20_font
    size: 20
    glyphs: [
      "󰖜",   # sun rise
      "󰖛",   # sun set
      '󰤯',   # wifi-strength-outline
      '󰤟',   # wifi-strength-1
      '󰤢',   # wifi-strength-2
      '󰤥',   # wifi-strength-3
      '󰤨',   # wifi-strength-4
      "\U000F092E", # wifi-strength-off-outline
      '󰟐',   # home-assistant
      '󰒎',   # server-network-off
      '󰢠',   # bedroom
      '󰦠',   # bathroom (unused, but maybe for future)
      '󰹩',   # tree (outside)
      '󱕭',   # couch (livingroom)
      '󰖎',   # humidity
      '󰔏',   # thermometer
      "\U000F07E4", # molecule-co2
      "\U000F0472", # scale
      "\U000F105A"  # scale-off
    ]
