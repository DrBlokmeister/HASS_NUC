substitutions:
  device_friendly_name: "Livingroom Air Quality Monitor"
  device_name: "Livingroom AQM"
  location: "Livingroom"
  espname: livingroom-air-quality-monitor

packages:
  aqm: !include templates/AQM.yaml

script:
  - id: min_max_zero_script
    then:
      - globals.set:
          id: pm_max
          value: '0.0'
      - globals.set:
          id: pm_min
          value: '300.0'
      - globals.set:
          id: co_max
          value: '0.0'
      - globals.set:
          id: co_min
          value: '5000.0'
      - globals.set:
          id: temp_min
          value: '50.0'
      - globals.set:
          id: temp_max
          value: '0.0'

globals:
  - id: button_mode
    type: int
    initial_value: '1'
  - id: brightness_correction
    type: float
    restore_value: yes
    initial_value: '0.15'
  - id: ver_sion
    type: bool
    initial_value: 'false'
  - id: led_status
    type: bool
    initial_value: 'true'
    restore_value: yes
  - id: display_on
    type: bool
    initial_value: 'true'
  - id: led_status_display
    type: bool
    initial_value: 'false'
  - id: night_mode
    type: bool
    restore_value: yes
  - id: night_mode_display
    type: bool
  - id: pm_min
    type: float
    initial_value: '300.0'
  - id: pm_max
    type: float
    initial_value: '0.0'
  - id: co_min
    type: float
    initial_value: '5000.0'
  - id: co_max
    type: float
    initial_value: '0.0'
  - id: temp_min
    type: float
    initial_value: '50.0'
  - id: temp_max
    type: float
    initial_value: '0.0'
  - id: min_max_zero
    type: bool
    initial_value: 'false'

switch:
  # - platform: gpio
  #   name: "PMS7003_SET"
  #   pin:
  #     number: GPIO18
  #     mode: output
  #   restore_mode: ALWAYS_ON
  #   id: pms_set

light:
  - platform: partition
    name: led1
    id: led1
    default_transition_length: 0s
    segments:
      - id: rgb_led
        from: 0
        to: 0
  - platform: partition
    name: led2
    id: led2
    default_transition_length: 0s
    segments:
    - id: rgb_led
      from: 1
      to: 1
  - platform: partition
    name: led3
    id: led3
    default_transition_length: 0s
    segments:
    - id: rgb_led
      from: 2
      to: 2
  - platform: neopixelbus
    num_leds: 3
    pin: GPIO16
    name: "RGB strip"
    id: rgb_led
    default_transition_length: 0s
    variant: 800KBPS

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    brightness: 100%
    rotation: 180
    id: display1
    pages:
      - id: page1
        lambda: |-
          // PM2.5 and CO2 data
          it.print(0, 10, id(arial), "PM2.5:   ");
          it.printf(50, 0, id(arial30), "%.0f", id(pm2_5).state);
          it.print(0, 37, id(arial), "CO2:   ");
          it.printf(50, 30, id(arial30), "%.0f", id(co2).state);
      - id: page3
        lambda: |-
          // Temperature, Humidity, and Pressure
          it.printf(0, 0, id(arial), "Temp: %.1f Â°C", id(temp).state);
          it.printf(0, 20, id(arial), "Humidity: %.0f %%", id(hum).state);
          it.printf(0, 40, id(arial), "Pressure: %.0f hPa", id(press).state);
      - id: page4
        lambda: |-
          // PM1, PM2.5, and PM10 data
          it.printf(0, 0, id(arial), "PM1: %.0f ugm3", id(pm1).state);
          it.printf(0, 20, id(arial), "P2.5: %.0f ugm3", id(pm2_5).state);
          it.printf(0, 40, id(arial), "PM10: %.0f ugm3", id(pm10).state);
      - id: page5
        lambda: |-
          // Additional data or placeholders for commented out sensors like Light, TVOC, eCO2
          it.print(0, 0, id(arial), "Additional Sensors");
          // Uncomment and populate with real sensor data if available
      - id: page7
        lambda: |-
          // Version Information Display
          it.print(0, 0, id(arial10), "YAML ver: $yaml_version");
          it.line(0, 12, 128, 12);
          it.printf(0, 15, id(arial10), "ESPHome ver: %s", ESPHOME_VERSION);
          std::string ip_ = id(ip).state;
          it.printf(0, 25, id(arial10), "IP: %s", ip_.c_str());
          std::string ssid_ = id(ssid).state;
          it.printf(0, 35, id(arial10), "Connected to: %s", ssid_.c_str());
          it.printf(0, 45, id(arial10), "LED brightness: +%.0f %%", id(brightness_correction)*100);
