substitutions:
  power_id: power
  current_id: current
  voltage_id: voltage
  apparent_power_id: apparent_power
  power_factor_id: power_factor
  reactive_power_id: reactive_power
  power_device_name: "${device_name}"

sensor:
  - platform: template
    name: "${power_device_name} Apparent Power"
    lambda: |-
      return id(${voltage_id}).state * id(${current_id}).state;
    update_interval: 1s
    device_class: apparent_power
    entity_category: 'diagnostic'
    unit_of_measurement: "VA"
    id: ${apparent_power_id}
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1.0
  - platform: template
    name: "${power_device_name} Power Factor"
    lambda: |-
      if (round(id(${power_id}).state) == 0) {
        return 0.0;
      } else {
        float pf = id(${power_id}).state / (id(${voltage_id}).state * id(${current_id}).state);
        if (pf > 2.0) {
          return 2.0;
        } else {
          return pf;
        }
      }
    update_interval: 1s
    device_class: power_factor
    entity_category: 'diagnostic'
    id: ${power_factor_id}
    filters:
      - or:
        - throttle_average: 60s
        - delta: 0.1
  - platform: template
    name: "${power_device_name} Reactive Power"
    lambda: |-
      if (pow(id(${voltage_id}).state * id(${current_id}).state, 2) <= pow(id(${power_id}).state, 2)) {
        return 0;
      } else {
        return sqrt(pow(id(${voltage_id}).state * id(${current_id}).state, 2) - pow(id(${power_id}).state, 2));
      }
    update_interval: 1s
    device_class: reactive_power
    entity_category: 'diagnostic'
    unit_of_measurement: "var"
    id: ${reactive_power_id}
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1.0
  
  # - platform: template
  #   name: "${device_name} Apparent Power"
  #   lambda: |-
  #     return id(voltage).state * id(current).state;
  #   update_interval: 1s
  #   device_class: apparent_power
  #   unit_of_measurement: "VA"
  #   id: apparent_power
  #   filters:
  #     - or:
  #       - throttle_average: 60s
  #       - delta: 1.0
  # - platform: template
  #   name: "${device_name} Power Factor"
  #   lambda: |-
  #     if (round(id(power).state) == 0) {
  #       return 0.0;
  #     } else {
  #       float pf = id(power).state / (id(voltage).state * id(current).state);
  #       if (pf > 2.0) {
  #         return 2.0;
  #       } else {
  #         return pf;
  #       }
  #     }
  #   update_interval: 1s
  #   device_class: power_factor
  #   id: power_factor
  #   filters:
  #     - or:
  #       - throttle_average: 60s
  #       - delta: 0.1
  # - platform: template
  #   name: "${device_name} Reactive Power"
  #   lambda: |-
  #     if (pow(id(voltage).state * id(current).state, 2) <= pow(id(power).state, 2)) {
  #       return 0;
  #     } else {
  #       return sqrt(pow(id(voltage).state * id(current).state, 2) - pow(id(power).state, 2));
  #     }
  #   update_interval: 1s
  #   device_class: reactive_power
  #   unit_of_measurement: "var"
  #   id: reactive_power
  #   filters:
  #     - or:
  #       - throttle_average: 60s
  #       - delta: 1.0
