esphome:
  name: falconlighting
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: "BlokmeisterWIFI"
  password: "ithurtswhenIP"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Falconlighting Fallback Hotspot"
    password: "smtZkGgz4U2q"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

web_server:
 port: 80 # Or your preferred port
 
wled:

globals:
  - id: brightness
    type: int
    restore_value: no
    initial_value: '30'
  - id: brightnessblue
    type: int
    restore_value: no
    initial_value: '50'
  - id: brightnessgoingup
    type: bool
    restore_value: no
    initial_value: 'false'

light:
  - platform: fastled_spi
    id: falconlights
    chipset: APA102
    data_pin: D2
    clock_pin: D1
    num_leds: 25
    rgb_order: BGR
    default_transition_length: 2s
    name: "Falconlights"
    gamma_correct: 1.5
    effects:
      - wled:
          port: 65506
      - random:
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - lambda:
          name: My Custom Effect
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(falconlights).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
      - automation:
          name: Incorrect engine pulse
          sequence:
            - light.turn_on:
                id: falconlights
                brightness: 100%
                red: 70%
                green: 70%
                blue: 100%
                transition_length: 2s
            - delay: 1s
            - light.turn_on:
                id: falconlights
                brightness: 40%
                transition_length: 2s
            - delay: 1s
      - automation:
          name: Slow engine pulse
          sequence:
            - light.turn_on:
                id: falconlights
                red: !lambda |-
                  if (id(brightness) > 80) {
                    // global value greater than 80
                    id(brightnessgoingup) = false;
                  } else if (id(brightness) < 30 ) {
                    id(brightnessgoingup) = true;
                  }
                  if (id(brightnessgoingup)) {
                    id(brightness) += 1;
                    id(brightnessblue) += 1;
                  } else {
                    id(brightness) -= 1;
                    id(brightnessblue) -= 1;
                  }
                  return id(brightness);
                green: !lambda |-
                  return id(brightness);
                blue: !lambda |-
                  return id(brightnessblue);
            - delay: 50ms
            - logger.log:
                format: "The set brightness is %i, brightnessblue is %i"
                args: ['id(brightness)', 'id(brightnessblue)']
