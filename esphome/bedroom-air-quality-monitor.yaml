substitutions:
  device_name: "Bedroom Air Quality Monitor"
  short_device_name: "Bedroom AQM"
  location: "Bedroom"

esphome:
  name: "bedroom-air-quality-monitor"
  on_boot:
    then:
      - lambda: 'id(pm2_5).publish_state(1.0);'
      - lambda: 'id(co2).publish_state(400);'
      - script.execute: min_max_zero_script

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE
  baud_rate: 0

# Enable Home Assistant API
api:

ota:

captive_portal:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${short_device_name} Hotspot
    password: !secret esphome_fallback_pass

script:
  - id: min_max_zero_script
    then:
      - globals.set:
          id: pm_max
          value: '0.0'
      - globals.set:
          id: pm_min
          value: '300.0'
      - globals.set:
          id: co_max
          value: '0.0'
      - globals.set:
          id: co_min
          value: '5000.0'
      - globals.set:
          id: temp_min
          value: '50.0'
      - globals.set:
          id: temp_max
          value: '0.0'

globals:
  - id: button_mode
    type: int
    initial_value: '1'
  - id: brightness_correction
    type: float
    restore_value: yes
    initial_value: '0.15'
  - id: version
    type: bool
    initial_value: 'false'
  - id: led_status
    type: bool
    initial_value: 'true'
    restore_value: yes
  - id: display_on
    type: bool
    initial_value: 'true'
  - id: led_status_display
    type: bool
    initial_value: 'false'
  - id: night_mode
    type: bool
    restore_value: yes
  - id: night_mode_display
    type: bool
  - id: pm_min
    type: float
    initial_value: '300.0'
  - id: pm_max
    type: float
    initial_value: '0.0'
  - id: co_min
    type: float
    initial_value: '5000.0'
  - id: co_max
    type: float
    initial_value: '0.0'
  - id: temp_min
    type: float
    initial_value: '50.0'
  - id: temp_max
    type: float
    initial_value: '0.0'
  - id: min_max_zero
    type: bool
    initial_value: 'false'

uart:
  - rx_pin: GPIO1
    baud_rate: 9600
    id: pms

  - rx_pin: GPIO18
    tx_pin: GPIO19
    baud_rate: 9600
    id: mh

i2c:
  scl: GPIO22
  sda: GPIO21
  frequency: 100kHz

binary_sensor:
  - platform: gpio
    id: gpio_button
    pin:
      number: GPIO23
      mode: INPUT_PULLUP
      inverted: True
    on_click:
      - min_length: 5s
        max_length: 15s
        then:
          - globals.set:
              id: min_max_zero
              value: 'true'
          - script.execute: min_max_zero_script
          - delay: 3s
          - globals.set:
              id: min_max_zero
              value: 'false'

sensor:
  - platform: pmsx003
    type: PMSX003
    uart_id: pms
    pm_1_0:
      name: "${location} PM 1 Concentration"
      id: pm1
      filters:
        - sliding_window_moving_average:
            window_size: 5
            send_every: 5
        - or:
          - throttle_average: 60s
          - delta: 1.0
    pm_2_5:
      name: "${location} PM 2.5 Concentration"
      id: pm2_5
      filters:
        - sliding_window_moving_average:
            window_size: 5
            send_every: 5
        - or:
          - throttle_average: 60s
          - delta: 1.0
    pm_10_0:
      name: "${location} PM 10 Concentration"
      id: pm10
      filters:
        - sliding_window_moving_average:
            window_size: 5
            send_every: 5
        - or:
          - throttle_average: 60s
          - delta: 1.0

  - platform: mhz19
    co2:
      name: "${location} CO2"
      id: co2
      filters:
        - sliding_window_moving_average:
            window_size: 5
            send_every: 1
        - or:
          - throttle_average: 60s
          - delta: 10.0
    temperature:
      name: "${location} MH-Z19 Temperature"
      filters:
        - or:
          - throttle_average: 60s
          - delta: 1
    update_interval: 10s
    automatic_baseline_calibration: false
    uart_id: mh
    id: mh_sensor

  - platform: bme280
    temperature:
      name: "${location} AQM Temperature"
      oversampling: 1x
      id: temp
      filters:
        - offset: -1.5
        - or:
          - throttle_average: 60s
          - delta: 1.0
    pressure:
      name: "${location}  AQM Pressure"
      oversampling: 1x
      id: press
      filters:
        - or:
          - throttle_average: 60s
          - delta: 10
    humidity:
      name: "${location} AQM Humidity"
      oversampling: 1x
      id: hum
      filters:
        - or:
          - throttle_average: 60s
          - delta: 5
    address: 0x76
    update_interval: 10s

  - platform: sgp30
    eco2:
      name: "${location} eCO2"
      accuracy_decimals: 1
      id: eco2
      filters:
        - or:
          - throttle_average: 60s
          - delta: 20
    tvoc:
      name: "${location} TVOC"
      accuracy_decimals: 1
      id: tvoc
      filters:
        - or:
          - throttle_average: 60s
          - delta: 100
    update_interval: 1s
    address: 0x58
    # https://esphome.io/components/sensor/sgp30.html#calibrating-baseline
    baseline:
      eco2_baseline: 0x92B7
      tvoc_baseline: 0x935A
    compensation:
      temperature_source: temp
      humidity_source: hum

  - platform: template
    name: "${location} PM2.5 24h average"
    id: pm2_5_avg
    icon: mdi:chemical-weapon
    unit_of_measurement: µg/m³
    lambda: |-
      return id(pm2_5).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 1440
          send_every: 1
    on_value:
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              below: 10
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Good"
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              above: 10
              below: 20
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Fair"
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              above: 20
              below: 25
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Moderate"
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              above: 25
              below: 50
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Poor"
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              above: 50
              below: 75
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Very Poor"
      - if:
          condition:
            sensor.in_range:
              id: pm2_5_avg
              above: 75
          then:
            - text_sensor.template.publish:
                id: aqi
                state: "Extremely Poor"

  - platform: template
    name: "${location} PM2.5 median"
    id: pm2_5_median
    icon: mdi:chemical-weapon
    unit_of_measurement: µg/m³
    lambda: |-
      return id(pm2_5).state;
    update_interval: 1s
    filters:
      - median:
          window_size: 30
          send_every: 30
          send_first_at: 15
switch:
  # - platform: gpio
  #   name: "PMS7003_SET"
  #   pin:
  #     number: GPIO18
  #     mode: output
  #   restore_mode: ALWAYS_ON
  #   id: pms_set
  - platform: template
    name: "${location} MH-Z19 ABC"
    optimistic: true
    on_turn_on:
      mhz19.abc_enable: mh_sensor
    on_turn_off:
      mhz19.abc_disable: mh_sensor

button:
  - platform: template
    name: "${location} Calibrate MH-Z19"
    id: software_calibrate_button
    on_press:
      then:
        - mhz19.calibrate_zero: mh_sensor

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP Address
      id: ip
    ssid:
      name: ${device_name} Connected SSID
      id: ssid

  - platform: template
    name: "${location} Air Quality Index (AQI)"
    id: aqi
    icon: mdi:air-filter
