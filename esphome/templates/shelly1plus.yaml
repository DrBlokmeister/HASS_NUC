esphome:
  name: "${espname}"
  platformio_options:
    board_build.f_cpu: 160000000L
  on_boot:
    priority: 100
    then:
      - binary_sensor.template.publish:
          id: switch_clicker
          state: OFF

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    version: latest
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_160: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ: "160"
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "20"
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: n
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Hotspot
    password: !secret esphome_fallback_pass

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

# Enable Web server (optional).
web_server:
  port: 80

# Text sensors with general information.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${device_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    update_interval: 5s
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${device_name} Temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    filters:
      - or:
        - throttle_average: 60s
        - delta: 0.1
    on_value_range:
      - above: "80.0"
        then:
          - switch.turn_off: "shelly_relay"
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 10kOhm
  - platform: adc
    id: temp_analog_reading
    pin: GPIO32
    attenuation: 11db

  - platform: adc
    name: "${device_name} Relay Supply Voltage"
    pin: GPIO33
    attenuation: 11db
    filters:
      - multiply: 8
      - or:
        - throttle_average: 60s
        - delta: 1

status_led:
  pin:
    number: GPIO0
    inverted: true

# Shelly 1 detached switch config with fallback in case of wifi or api fail
switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO26
    id: shelly_relay
    # After reboot, restore to ON
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: gpio
    name: ${device_name} Input
    pin:
      number: GPIO4
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - binary_sensor.template.publish:
              id: switch_clicker
              state: ON
          - delay: 100ms
          - binary_sensor.template.publish:
              id: switch_clicker
              state: OFF
    id: button
  - platform: template
    name: ${device_name} Momentary Switch
    id: switch_clicker
    on_multi_click:
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} double click
                      device_name: ${device_name}
                      click_type: double
                      click_count: "2"
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # send single click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} short click
                      device_name: ${device_name}
                      click_type: single
                      click_count: "1"
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: shelly_relay
