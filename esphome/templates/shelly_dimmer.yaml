esphome:
  name: "${espname}"
  comment: "${shelly_dimmer_version}"
  on_boot:
    priority: 100
    then:
      - binary_sensor.template.publish:
          id: switch_clicker
          state: OFF

esp8266:
  board: esp01_1m
  framework:
    version: recommended

packages:
  wifi: !include /config/esphome/common/wifi.yaml
  network_diagnostics: !include /config/esphome/common/network_diagnostics.yaml
  base_config: !include /config/esphome/common/base_config.yaml

uart:
    tx_pin: 1
    rx_pin: 3
    baud_rate: 115200

# Sensors with general information.
sensor:
  # Home assistant adaptive lighting
  - platform: homeassistant
    id: colortemperature
    entity_id: switch.adaptive_lighting_adaptive_lighting
    attribute: color_temp_kelvin
  - platform: homeassistant
    id: brightness
    entity_id: switch.adaptive_lighting_adaptive_lighting
    attribute: brightness_pct

  - platform: ntc
    sensor: temp_resistance_reading
    name: ${device_name} temperature
    id: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: ${ntc_b_constant}
      reference_resistance: "${ntc_reference_resistance}"
      reference_temperature: "${ntc_reference_temperature}"
    on_value:
      then:
        - if:
            condition:
              - sensor.in_range:
                  id: temperature
                  above: ${max_temp}
              - light.is_on: dimmer
            then:
              - light.turn_off:
                  id: dimmer
              - logger.log: "Switch turned off because temperature exceeded ${max_temp}°C"
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Message from ${device_name}
                  data_template:
                    message: Switch turned off because temperature exceeded ${max_temp}°C
    on_value_range:
      - above: ${max_temp}
        then:
          - logger.log: "Temperature exceeded ${max_temp}°C"
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${device_name}
              data_template:
                message: Temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

  - platform: template
    name: "${device_name} Apparent Power"
    lambda: |-
      return id(voltage).state * id(current).state;
    update_interval: 1s
    device_class: apparent_power
    unit_of_measurement: "VA"
    id: apparent_power
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1.0
  - platform: template
    name: "${device_name} Power Factor"
    lambda: |-
      if (round(id(power).state) == 0) {
        return 0;
      } else {
        return id(power).state / id(voltage).state / id(current).state;
      }
    update_interval: 1s
    device_class: power_factor
    id: power_factor
    filters:
      - or:
        - throttle_average: 60s
        - delta: 0.1
  - platform: template
    name: "${device_name} Reactive Power"
    lambda: |-
      if (pow(id(voltage).state * id(current).state, 2) <= pow(id(power).state, 2)) {
        return 0;
      } else {
        return sqrt(pow(id(voltage).state * id(current).state, 2) - pow(id(power).state, 2));
      }
    update_interval: 1s
    device_class: reactive_power
    unit_of_measurement: "var"
    id: reactive_power
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1.0


# Shelly 2 Dimmer light

light:
  - platform: shelly_dimmer
    name: "${shelly_id}"
    id: dimmer
    icon: mdi:globe-light-outline
    power:
      name: "${device_name} Power"
      id: power
      on_value:
        then:
          - component.update: apparent_power
          - component.update: power_factor
          - component.update: reactive_power
    voltage:
      name: "${device_name} Voltage"
      id: voltage
    current:
      name: "${device_name} Current"
      id: current
    min_brightness: "${min_brightness}"
    max_brightness: "${max_brightness}"
    warmup_brightness: 100
    leading_edge: false #Trailing edge is for LED dimming (see https://github.com/esphome/issues/issues/3487)
    default_transition_length: 1s
    gamma_correct: 2
    firmware:
      version: "${STM_firmware_version}"
      update: true
      #url: "https://github.com/jamesturton/shelly-dimmer-stm32/releases/download/v51.6/shelly-dimmer-stm32_v51.6.bin"

binary_sensor:
  - platform: gpio
    name: ${device_name} Switch
    pin:
      number: ${input_pin}
      mode:
        input: true
        #pullup: true
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - binary_sensor.template.publish:
              id: switch_clicker
              state: ON
          - delay: 100ms
          - binary_sensor.template.publish:
              id: switch_clicker
              state: OFF
    id: shelly_switch
  - platform: template
    name: ${device_name} Momentary Switch
    id: switch_clicker
    on_multi_click:
      # triple click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Triple-Clicked"
          - light.turn_on:
              id: dimmer
              brightness: 25%
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - light.turn_on:
              id: dimmer
              brightness: 100%
      - timing:
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - logger.log: "Single-Clicked"
          - if:
              condition:
                light.is_on: dimmer
              then:
                - light.turn_off: dimmer
              else:
                - light.turn_on:
                    id: dimmer
                    brightness: !lambda |-
                      return id(brightness).state/100;
