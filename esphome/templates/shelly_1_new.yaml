esphome:
  name: "${espname}"
  comment: 'Shelly 1'
  on_boot:
    priority: 100
    then:
      - binary_sensor.template.publish:
          id: switch_clicker
          state: OFF
      - switch.template.publish:
          id: detached_switch
          state: ${detached_mode}

esp8266:
  board: esp01_1m
  framework:
    version: recommended

packages:
  wifi: !include /config/esphome/common/wifi.yaml
  network_diagnostics: !include /config/esphome/common/network_diagnostics.yaml
  base_config: !include /config/esphome/common/base_config.yaml

# Shelly 1 detached switch config
switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO4
    id: shelly_relay
    # After reboot, restore to ON
    restore_mode: ALWAYS_ON
  - platform: template
    name: ${device_name} Detached Mode
    id: detached_switch
    entity_category: config

binary_sensor:
  - platform: gpio
    name: ${device_name} Input
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - binary_sensor.template.publish:
              id: switch_clicker
              state: ON
          - delay: 100ms
          - binary_sensor.template.publish:
              id: switch_clicker
              state: OFF
    id: shelly_switch
  - platform: template
    name: ${device_name} Momentary Switch
    id: switch_clicker
    on_multi_click:
      # quintuple click
      - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - button.press: restart_button
      # triple click
      - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} triple click
                      device_name: ${device_name}
                      click_type: triple
                      click_count: "3"
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} double click
                      device_name: ${device_name}
                      click_type: double
                      click_count: "2"
      - timing:
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # send single click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} short click
                      device_name: ${device_name}
                      click_type: single
                      click_count: "1"
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: shelly_relay
