#### Shelly defaults: ####
#
# Shelly Dimmer 2
# input_GPIO_pin: GPIO14

defaults:
  clicker_id: switch_clicker
  debounce_delay: 50ms
  shelly_switch_id: shelly_switch
  input_GPIO_pin: GPIO14
  detached_mode_id: "detach_mode"
  input_device_name: "${device_name}"
  scripts_type: "regular"
  dimmer_id: dimmer
  adaptive_brightness_id: adaptive_lighting_brightness

esphome:
  on_boot:
    priority: 100
    then:
      - binary_sensor.template.publish:
          id: ${clicker_id}
          state: OFF

binary_sensor:
  - platform: gpio
    name: ${input_device_name} Input
    pin:
      number: ${input_GPIO_pin} #GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: ${debounce_delay}
    # config for state change of input button
    on_state:
        then:
          - binary_sensor.template.publish:
              id: ${clicker_id}
              state: ON
          - delay: 10ms
          - binary_sensor.template.publish:
              id: ${clicker_id}
              state: OFF
    id: ${shelly_switch_id}

  - platform: template
    name: ${input_device_name} Momentary Switch
    id: ${clicker_id} #switch_clicker
    on_multi_click:
      # quintuple click
      - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - button.press: restart_button
      # triple click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                or:
                  - light.is_off: ${dimmer_id}
                  - lambda: |-
                      return id(${dimmer_id}).remote_values.get_brightness()  > 0.25;
              then:
                - light.turn_on:
                    id: ${dimmer_id}
                    brightness: 0.25
                    transition_length: 1s
              else:
                - light.turn_on:
                    id: ${dimmer_id}
                    brightness: !lambda |-
                      return id(${adaptive_brightness_id}).state / 100.0;
          # - light.turn_on:
          #     id: ${dimmer_id}
          #     brightness: 25%
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                or:
                  - light.is_off: ${dimmer_id}
                  - lambda: |-
                      return id(${dimmer_id}).remote_values.get_brightness() < 1;
              then:
                - light.turn_on:
                    id: ${dimmer_id}
                    brightness: 1
              else:
                - light.turn_on:
                    id: ${dimmer_id}
                    brightness: !lambda |-
                      return id(${adaptive_brightness_id}).state / 100.0;
          # - logger.log: "Double-Clicked"
          # - light.turn_on:
          #     id: ${dimmer_id}
          #     brightness: 100%
      - timing:
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - logger.log: "Single-Clicked"
          - if:
              condition:
                light.is_on: ${dimmer_id}
              then:
                - light.turn_off: ${dimmer_id}
              else:
                - light.turn_on:
                    id: ${dimmer_id}
                    brightness: !lambda |-
                      return id( ${adaptive_brightness_id} ).state/100;
