esphome:
  name: "${espname}"
  on_boot:
    priority: 100
    then:
      - binary_sensor.template.publish:
          id: switch_clicker
          state: OFF

esp8266:
  board: esp01_1m
  framework:
    version: recommended

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Hotspot
    password: !secret esphome_fallback_pass

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

# Enable Web server (optional).
web_server:
  port: 80

# Text sensors with general information.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${device_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    update_interval: 5s
    filters:
      - or:
        - throttle_average: 60s
        - delta: 1

# Shelly 1 detached switch config
switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO4
    id: shelly_relay
    # After reboot, restore to ON
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: gpio
    name: ${device_name} Input
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - binary_sensor.template.publish:
              id: switch_clicker
              state: ON
          - delay: 100ms
          - binary_sensor.template.publish:
              id: switch_clicker
              state: OFF
    id: button
  - platform: template
    name: ${device_name} Momentary Switch
    id: switch_clicker
    on_multi_click:
      # double click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} double click
                      device_name: ${device_name}
                      click_type: double
                      click_count: "2"
      - timing:
          - ON for at most 1s
          - OFF for at least 0.3s
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # send single click event in case wifi and api are conncected
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      title: ${device_name} short click
                      device_name: ${device_name}
                      click_type: single
                      click_count: "1"
              # toggle relay in case either wifi or api are not connected
              else:
                - switch.toggle: shelly_relay
