substitutions:
  device_name: "Ventilation Controller ESP32"
  device_name_short: "Ventilation ESP32"
  espname: "ventilation-controller-esp32"

esphome:
  name: ventilation-controller-esp32
  comment: "${shelly_dimmer_version}"

esp32:
  board: esp32doit-devkit-v1

packages:
  wifi: !include /config/esphome/common/wifi.yaml
  network_diagnostics: !include /config/esphome/common/network_diagnostics.yaml
  base_config: !include /config/esphome/common/base_config.yaml

wifi:
  ap:
    ssid: ${device_name_short} Hotspot

output:
  - platform: ledc
    pin: 22
    id: pwm_output

fan:
  - platform: speed
    output: pwm_output
    speed_count: 100
    name: "Ventilation System"
    id: ventilationsystem

sensor:
  # ADC sensors
  - platform: adc
    pin: 35
    name: "Downstairs CO2 Input"
    update_interval: 1s
    filters:
      - multiply: 16.93
      - or:
        - throttle_average: 60s
        - delta: 0.5
  - platform: adc
    pin: 34
    name: "Analog Output Voltage"
    update_interval: 1s
    filters:
      - multiply: 16.16
      - or:
        - throttle_average: 60s
        - delta: 0.5
  - platform: adc
    pin: 33
    name: "Bathroom Button Signal"
    update_interval: 1s
    internal: true
    filters:
      - multiply: 16.93
      - or:
        - throttle_average: 60s
        - delta: 0.5
  - platform: adc
    pin: 32
    name: "12V Board Supply Voltage"
    update_interval: 1s
    filters:
      - multiply: 16.93
      - or:
        - throttle_average: 60s
        - delta: 0.5
  # HA sensors
  - platform: homeassistant
    name: "Home Max Humidity"
    entity_id: sensor.home_max_humidity
    id: ha_home_max_humidity
    device_class: "humidity"
  - platform: homeassistant
    name: "Home Mean Humidity"
    entity_id: sensor.home_mean_humidity
    id: ha_home_mean_humidity
    device_class: "humidity"
  - platform: homeassistant
    name: "Home Mean Humidity Without Bathroom"
    entity_id: sensor.home_mean_humidity_without_bathroom
    id: ha_home_mean_humidity_without_bathroom
    device_class: "humidity"
  - platform: homeassistant
    name: "Home Median Humidity"
    entity_id: sensor.home_median_humidity
    id: ha_home_median_humidity
    device_class: "humidity"

  - platform: homeassistant
    name: "Home Max CO2"
    entity_id: sensor.home_max_co2
    id: ha_home_max_co2
    device_class: "carbon_dioxide"
  - platform: homeassistant
    name: "Home Mean CO2"
    entity_id: sensor.home_mean_co2
    id: ha_home_mean_co2
    device_class: "carbon_dioxide"
  - platform: homeassistant
    name: "Home Median CO2"
    entity_id: sensor.home_median_co2
    id: ha_home_median_co2
    device_class: "carbon_dioxide"

  - platform: homeassistant
    name: "Bathroom Humidity"
    entity_id: sensor.humidity_bathroom
    id: ha_humidity_bathroom
    device_class: "humidity"
  - platform: homeassistant
    name: "Bathroom Humidity Min"
    entity_id: sensor.humidity_bathroom_min
    id: ha_humidity_bathroom_min
    device_class: "humidity"
  - platform: homeassistant
    name: "Bathroom Humidity Max"
    entity_id: sensor.humidity_bathroom_max
    id: ha_humidity_bathroom_max
    device_class: "humidity"
  - platform: homeassistant
    name: "Bedroom CO2 Concentration"
    entity_id: sensor.mh_z19_co2_value
    device_class: "carbon_dioxide"
    id: ha_co2_bedroom
  - platform: homeassistant
    name: "Bedroom CO2 Concentration Min"
    entity_id: sensor.co2_value_bedroom_min
    device_class: "carbon_dioxide"
    id: ha_co2_bedroom_min
  - platform: homeassistant
    name: "Study CO2 Concentration"
    entity_id: sensor.study_co2
    device_class: "carbon_dioxide"
    id: ha_co2_study
  - platform: homeassistant
    name: "Livingroom CO2 Concentration"
    entity_id: sensor.livingroom_co2
    device_class: "carbon_dioxide"
    id: ha_co2_livingroom

  # Template sensors:
  - platform: template
    name: "Ventilation Setting Bathroom Humidity"
    id: fan_setting_bathroom_humidity
    update_interval: 10s
    accuracy_decimals: 0
    unit_of_measurement: "%"
    lambda: |-
      // Get the current and minimum humidity values
      float current_humidity = id(ha_humidity_bathroom).state;
      float min_humidity = id(ha_humidity_bathroom_min).state;

      // Calculate the difference between the current humidity and the minimum humidity
      float humidity_diff = current_humidity - min_humidity;

      // Calculate the fan setting based on the difference
      float fan_setting = 0.0;
      if (humidity_diff >= 0.0) {
        fan_setting = humidity_diff / (100.0 - min_humidity) * 100.0;
      }

      // Set the fan setting to the nearest speed value
      float rounded_fan_setting = round(fan_setting);

      // Return the fan setting
      return rounded_fan_setting;

  - platform: template
    name: "Ventilation Setting Humidity"
    id: fan_setting_humidity
    update_interval: 10s
    accuracy_decimals: 0
    unit_of_measurement: "%"
    lambda: |-
      // Get the current and minimum humidity values
      float median_humidity = id(ha_home_median_humidity).state;
      float max_humidity = id(ha_home_max_humidity).state;

      // Calculate the difference between the current humidity and the minimum humidity
      float humidity_diff = max_humidity - median_humidity;

      // Calculate the fan setting based on the difference
      float fan_setting = 0.0;
      if (humidity_diff >= 0.0) {
        fan_setting = humidity_diff / (100.0 - median_humidity) * 100.0;
      }

      // Set the fan setting to the nearest speed value
      float rounded_fan_setting = round(fan_setting);

      // Return the fan setting
      return rounded_fan_setting;

  - platform: template
    name: "Ventilation Setting CO2"
    id: fan_setting_co2
    update_interval: 10s
    accuracy_decimals: 0
    unit_of_measurement: "%"
    lambda: |-
      // Get the current and minimum humidity values
      float max_co2_concentration = id(ha_home_max_co2).state;
      float median_co2_concentration = id(ha_home_median_co2).state;

      // Fan sensitivity in % per PPM
      float fan_sensitivity = id(number_co2_fan_sensitivity).state;
      // Offset CO2 value
      float co2_offset = id(number_co2_offset).state;

      // Calculate the fan setting based on the difference
      float fan_setting = 0.0;
      float fan_setting_max_CO2 = (max_co2_concentration - co2_offset) * fan_sensitivity;
      float fan_setting_median_CO2 = (median_co2_concentration - co2_offset) * (fan_sensitivity * 2);

      fan_setting = max(fan_setting_max_CO2, fan_setting_median_CO2);

      // Set the fan setting to the nearest speed value
      float rounded_fan_setting = round(fan_setting);


      if (rounded_fan_setting > 100) {
        // If it is, return the limit value
        return 100;
      } else {
        // Otherwise, return the current value
        return rounded_fan_setting;
      }

  - platform: template
    name: "Fan Speed Setting"
    id: fan_speed_setting
    lambda: |-
      // Get the current values of the input sensors
      float var_fan_setting_co2 = id(fan_setting_co2).state;
      float var_fan_setting_humidity = id(fan_setting_humidity).state;
      // Find the maximum value of the three sensors
      float fan_setting = 0;
      float fan_setting_1 = max(var_fan_setting_humidity, var_fan_setting_co2);

      fan_setting = fan_setting_1;

      // Return the maximum value
      if (id(fan_speed_override).state) {
        return id(override_fan_speed).state;
      } else {
        return fan_setting;
      }
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: "%"
    filters:
      - sliding_window_moving_average:
          window_size: 60
          send_every: 60
    on_value:
      then:
        - fan.turn_on:
            id: ventilationsystem
            speed: !lambda "return id(fan_speed_setting).state;"

number:
  - platform: template
    name: Override Fan Speed
    icon: mdi:fan
    min_value: 0
    step: 1
    max_value: 100
    optimistic: true
    id: override_fan_speed

  - platform: template
    name: Override Fan Duration
    icon: mdi:clock
    unit_of_measurement: min
    min_value: 15
    step: 5
    max_value: 600
    optimistic: true
    id: override_fan_duration

  - platform: template
    name: "CO2 Offset"
    optimistic: true
    initial_value: 400
    restore_value: true
    min_value: 0
    max_value: 1000
    step: 1
    id: number_co2_offset
  - platform: template
    name: "CO2 Fan Sensitivity"
    optimistic: true
    initial_value: 0.1 # in % per ppm
    restore_value: true
    min_value: 0
    max_value: 10
    step: 0.01
    id: number_co2_fan_sensitivity

switch:
  - platform: template
    name: "Fan Speed Override"
    optimistic: true
    id: fan_speed_override
    on_turn_on:
      - fan.turn_on:
          id: ventilationsystem
          speed: !lambda "return id(override_fan_speed).state;"
      - delay: !lambda "return (id(override_fan_duration).state) * 60 * 1000;"
      - switch.turn_off: fan_speed_override
    on_turn_off:
      - delay: 5s
      - fan.turn_on:
          id: ventilationsystem
          speed: !lambda "return id(fan_speed_setting).state;"
