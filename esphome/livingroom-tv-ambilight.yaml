substitutions:
  device_name: "Livingroom TV Ambilight"
  espname: "livingroom-tv-ambilight"

esphome:
  name: '${espname}'
  comment: 'ESP32S2'
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"  # Override, defaults to '-DARDUINO_USB_CDC_ON_BOOT=1'
  on_boot:
    priority: -100  # Ensures this runs after most other things have initialized
    then:
      - light.turn_on:
          id: full_strip
          effect: "Rainbow"
      - delay: 2s  # Let the rainbow show run for 2 seconds
      - light.turn_off:
          id: full_strip

esp32:
  board: lolin_s2_mini
  variant: ESP32S2

packages:
  wifi: !include common/wifi.yaml
  network_diagnostics: !include common/network_diagnostics.yaml
  base_config: !include common/base_config.yaml

wifi:
  use_address: 10.0.30.119

e131:
  method: unicast

light:
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    method: ESP32_I2S
    pin: GPIO05
    num_leds: 197 # 46+46+83+11+11
    gamma_correct: 2
    name: "${device_name}"
    #color_correct: [25%, 25%, 25%, 25%]
    id: full_strip
    effects:
      - e131:
          universe: 3
          channels: RGBW
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - addressable_rainbow:
          name: Rainbow
          speed: 20
          width: 197
      - addressable_lambda:
          name: "Random Running Dots with Afterglow"
          update_interval: 20ms
          lambda: |-
            static int progress = 0;
            const int dot_count = 5; // Number of dots to run
            static int positions[dot_count] = {-1, -1, -1, -1, -1}; // Positions of the dots
            static ESPColor colors[dot_count]; // Colors of the dots
            static bool initial = true;
            if (initial) {
              for (int i = 0; i < dot_count; i++) {
                positions[i] = random(0, it.size());
                colors[i] = ESPColor(random(0, 255), random(0, 255), random(0, 255));
              }
              initial = false;
            }
            // Fade all LEDs slightly
            for (int i = 0; i < it.size(); i++) {
              ESPColor current = it[i].get();
              it[i] = ESPColor(max(0, current.r - 10), max(0, current.g - 10), max(0, current.b - 10));
            }
            // Move and redraw dots
            for (int i = 0; i < dot_count; i++) {
              // Erase the dot's previous position
              if (positions[i] != -1) it[positions[i]] = it[positions[i]].get().fade_to_black(50);
              // Move the dot
              positions[i] = (positions[i] + 1) % it.size();
              // Redraw at new position with afterglow
              it[positions[i]] = colors[i];
            }
            progress++;
            if (progress > it.size()) {
              progress = 0;
              // Optionally, re-randomize colors and positions after a full cycle
              for (int i = 0; i < dot_count; i++) {
                positions[i] = random(0, it.size());
                colors[i] = ESPColor(random(0, 255), random(0, 255), random(0, 255));
              }
            }
    # Add this under full_strip → effects:
      - addressable_lambda:
          name: "RGBW Rainbow"
          update_interval: 16ms         # ~60 FPS; raise for slower animation
          lambda: |-
            using namespace esphome::light;   // shorter type names

            static uint8_t base_hue = 0;       // shifts the pattern every frame

            if (initial_run) {                 // clear strip on first start
              it.all() = Color::BLACK;
            }

            const int count = it.size();
            for (int i = 0; i < count; i++) {
              // Distribute the hue evenly across the strip
              uint8_t hue = base_hue + (i * 256 / count);

              ESPHSVColor hsv(hue, 255, 255);        // full-saturation rainbow
              Color rgb   = hsv.to_rgb();            // convert to RGB first

              // --- simple RGB → RGB-W conversion ---------------------------
              uint8_t w = std::min(rgb.r, std::min(rgb.g, rgb.b));
              rgb.r -= w;   rgb.g -= w;   rgb.b -= w;
              Color rgbw(rgb.r, rgb.g, rgb.b, w);    // add white channel
              // ----------------------------------------------------------------

              it[i] = rgbw;
            }

            base_hue++;   // advance animation; wraps automatically at 255


  - platform: partition
    name: "${device_name} First Half"
    id: first_half
    entity_category: 'diagnostic'
    segments:
      - id: full_strip
        from: 0
        to: 100
    effects:
      - e131:
          universe: 1
          channels: RGBW

  - platform: partition
    name: "${device_name} Second Half"
    id: second_half
    entity_category: 'diagnostic'
    segments:
      - id: full_strip
        from: 101
        to: 196
    effects:
      - e131:
          universe: 2
          channels: RGBW
