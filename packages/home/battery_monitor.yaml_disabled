homeassistant:
  customize:

input_number:
  low_battery_threshold:
    name: Low Battery Threshold
    icon: mdi:battery-low
    min: 1
    max: 100
    step: 1
#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      low_battery:
        friendly_name: "Low Battery"
        unit_of_measurement: entities
        icon_template: "{{ 'mdi:battery' if is_state('sensor.low_battery','0') else 'mdi:battery-alert' }}"
        value_template: >-
          {{ states|selectattr('attributes.battery_level', 'defined')| selectattr('attributes.battery_level','<', states('input_number.low_battery_threshold')|int ) | list | count }}
        attribute_templates:
          entities: >-
            {{ states|selectattr('attributes.battery_level', 'defined')| selectattr('attributes.battery_level','<', states('input_number.low_battery_threshold')|int ) | map(attribute='entity_id') | list | join(', ') }}
          names: >-
            {{ states|selectattr('attributes.battery_level', 'defined')| selectattr('attributes.battery_level','<', states('input_number.low_battery_threshold')|int ) | map(attribute='name') | list | join(', ') }}

########################
#    BINARY SENSORS    #
########################
binary_sensor:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[battery|notify] Create notification for low battery entities'
    mode: restart
    trigger:
      - platform: numeric_state
        entity_id: sensor.uptime
        above: 5
      - platform: state
        entity_id: sensor.low_battery
    condition:
      - condition: numeric_state
        entity_id: sensor.low_battery
        above: 0
      - condition: numeric_state
        entity_id: sensor.uptime
        above: 5
    action:
      - service: persistent_notification.create
        data:
          title: Low Battery levels
          message: >-
            {% set entities = state_attr('sensor.low_battery','entities').split(', ') %}
            {% set names = state_attr('sensor.low_battery','names').split(', ') %}
            {% for entity in entities %}
              {{- names[loop.index0] }}: **{{state_attr(entity, 'battery_level') -}}**
            {% endfor %}
          notification_id: low-battery-alert
      - wait_template: "{{ is_state('sensor.low_battery', 0)  }}"
      - service: persistent_notification.dismiss
        data:
          notification_id: low-battery-alert

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
