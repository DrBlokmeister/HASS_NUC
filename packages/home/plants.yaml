homeassistant:
  customize:
    plant.coffee_plant:
      friendly_name: 'Coffee plant'
    plant.bonsai:
      friendly_name: 'Bonsai'
    plant.zerumbetleft:
      friendly_name: 'Zerumbet Left'
    plant.zerumbetright:
      friendly_name: 'Zerumbet Right'
  customize_glob:
    "sensor.filtered_*_moisture":
      icon: mdi:water
    "sensor.filtered_*_illuminance":
      icon: mdi:weather-sunny
    "sensor.filtered_*_conductivity":
      icon: mdi:emoticon-poop
    "sensor.filtered_*_temperature":
      icon: mdi:thermometer

ble_monitor:
  restore_state: True
  #batt_entities: True
  active_scan: True
  hci_interface:
    - 0
    - 1
  devices:
    - mac: 'C4:7C:8D:6B:17:07'
      name: Coffee Plant
      temperature_unit: C
    - mac: 'C4:7C:8D:6B:12:B5'
      name: Bonsai
      temperature_unit: C
    - mac: 'C4:7C:8D:6A:F3:7B'
      name: Zerumbet Left
      temperature_unit: C
    - mac: 'C4:7C:8D:6B:16:8A'
      name: Zerumbet Right
      temperature_unit: C
    - mac: '80:EA:CA:89:1E:DD'
      name: Sinas
      temperature_unit: C
    - mac: '80:EA:CA:89:1E:B5'
      name: Euler
      temperature_unit: C
    - mac: '80:EA:CA:88:E8:85'
      name: Asperge
      temperature_unit: C

plant:
  coffee_plant:
    sensors:
      moisture: sensor.filtered_coffee_plant_moisture
      battery: sensor.coffee_plant_battery
      temperature: sensor.filtered_coffee_plant_temperature
      conductivity: sensor.filtered_coffee_plant_conductivity
      brightness: sensor.filtered_coffee_plant_illuminance
    min_moisture: 10
  bonsai:
    sensors:
      moisture: sensor.filtered_bonsai_moisture
      battery: sensor.bonsai_battery
      temperature: sensor.filtered_bonsai_temperature
      conductivity: sensor.filtered_bonsai_conductivity
      brightness: sensor.filtered_bonsai_illuminance
    min_moisture: 10
    min_conductivity: 50
  zerumbetleft:
    sensors:
      moisture: sensor.filtered_zerumbet_left_moisture
      battery: sensor.zerumbetleft_battery
      temperature: sensor.filtered_zerumbet_left_temperature
      conductivity: sensor.filtered_zerumbet_left_conductivity
      brightness: sensor.filtered_zerumbet_left_illuminance
    min_moisture: 10
  zerumbetright:
    sensors:
      moisture: sensor.filtered_zerumbet_right_moisture
      battery: sensor.zerumbetright_battery
      temperature: sensor.filtered_zerumbet_right_temperature
      conductivity: sensor.filtered_zerumbet_right_conductivity
      brightness: sensor.filtered_zerumbet_right_illuminance
    min_moisture: 10
  sinas:
    sensors:
      moisture: sensor.filtered_sinas_moisture
      battery: sensor.sinas_battery
      temperature: sensor.filtered_sinas_temperature
      conductivity: sensor.filtered_sinas_conductivity
      brightness: sensor.filtered_sinas_illuminance
    min_moisture: 10
  euler:
    sensors:
      moisture: sensor.filtered_euler_moisture
      battery: sensor.euler_battery
      temperature: sensor.filtered_euler_temperature
      conductivity: sensor.filtered_euler_conductivity
      brightness: sensor.filtered_euler_illuminance
    min_moisture: 10
  asperge:
    sensors:
      moisture: sensor.filtered_asperge_moisture
      battery: sensor.asperge_battery
      temperature: sensor.filtered_asperge_temperature
      conductivity: sensor.filtered_asperge_conductivity
      brightness: sensor.filtered_asperge_illuminance
    min_moisture: 10

#################
#    SENSORS    #
#################
sensor:
  ##### Coffee Plant #####
  - platform: filter
    name: "Filtered Coffee Plant moisture"
    entity_id: sensor.ble_moisture_coffee_plant
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Coffee Plant conductivity"
    entity_id: sensor.ble_conductivity_coffee_plant
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Coffee Plant illuminance"
    entity_id: sensor.ble_illuminance_coffee_plant
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Coffee Plant temperature"
    entity_id: sensor.ble_temperature_coffee_plant
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### Bonsai #####
  - platform: filter
    name: "Filtered Bonsai moisture"
    entity_id: sensor.ble_moisture_bonsai
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Bonsai conductivity"
    entity_id: sensor.ble_conductivity_bonsai
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Bonsai illuminance"
    entity_id: sensor.ble_illuminance_bonsai
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Bonsai temperature"
    entity_id: sensor.ble_temperature_bonsai
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### Zerumbet Left #####
  - platform: filter
    name: "Filtered Zerumbet Left moisture"
    entity_id: sensor.ble_moisture_zerumbetleft
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Left conductivity"
    entity_id: sensor.ble_conductivity_zerumbetleft
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Left illuminance"
    entity_id: sensor.ble_illuminance_zerumbetleft
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Left temperature"
    entity_id: sensor.ble_temperature_zerumbetleft
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### Zerumbet Left #####
  - platform: filter
    name: "Filtered Zerumbet Right moisture"
    entity_id: sensor.ble_moisture_zerumbetright
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Right conductivity"
    entity_id: sensor.ble_conductivity_zerumbetright
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Right illuminance"
    entity_id: sensor.ble_illuminance_zerumbetright
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Zerumbet Right temperature"
    entity_id: sensor.ble_temperature_zerumbetright
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### Sinas #####
  - platform: filter
    name: "Filtered Sinas moisture"
    entity_id: sensor.ble_moisture_sinas
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Sinas conductivity"
    entity_id: sensor.ble_conductivity_sinas
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Sinas illuminance"
    entity_id: sensor.ble_illuminance_sinas
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Sinas temperature"
    entity_id: sensor.ble_temperature_sinas
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### Euler #####
  - platform: filter
    name: "Filtered Euler moisture"
    entity_id: sensor.ble_moisture_euler
    filters:
      - filter: outlier
        window_size: 10
        radius: 10
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Euler conductivity"
    entity_id: sensor.ble_conductivity_euler
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Euler illuminance"
    entity_id: sensor.ble_illuminance_euler
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered Euler temperature"
    entity_id: sensor.ble_temperature_euler
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  ##### asperge #####
  - platform: filter
    name: "Filtered asperge moisture"
    entity_id: sensor.ble_moisture_asperge
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered asperge conductivity"
    entity_id: sensor.ble_conductivity_asperge
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered asperge illuminance"
    entity_id: sensor.ble_illuminance_asperge
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1
  - platform: filter
    name: "Filtered asperge temperature"
    entity_id: sensor.ble_temperature_asperge
    filters:
      - filter: lowpass
        time_constant: 20
        precision: 1


  - platform: miflora
    mac: 'C4:7C:8D:6B:17:07'
    name: Coffee Plant
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6B:12:B5'
    name: Bonsai
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6A:F3:7B'
    name: Zerumbet Left
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6B:16:8A'
    name: Zerumbet Right
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:89:1E:DD'
    name: Sinas
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:89:1E:B5'
    name: Euler
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:88:E8:85'
    name: asperge
    force_update: true
    median: 3
    monitored_conditions:
      # - moisture
      # - light
      # - temperature
      # - conductivity
      - battery

  - platform: template
    sensors:
      water_needed: #check which plants need water
        friendly_name: "Water needed"
        value_template: >
          {%- set threshold = 10 -%}
          {%- for item in states.plant if ((item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) or ("moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {%- if (item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) -%}
              {{ item.name }} ({{ item.attributes['moisture'] }}%){%- if not loop.last %}, {% endif -%}{% endif -%}
            {%- if "moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
              {{ item.attributes.friendly_name }} ({{ item.state }}){%- if not loop.last %}, {% endif -%} {% endif -%}
          {%- endfor -%}

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      water_status:   #check if plants need water
        friendly_name: "Water Status"
        value_template: >
          {%- set threshold = 20 -%}
          {% set ns = namespace(water_needed = false) %}
          {%- for item in states.plant if ((item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) or ("moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {%- if (item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) -%}
              {% set ns.water_needed = true %}
            {% endif -%}
            {%- if "moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
              {% set ns.water_needed = true %}
            {% endif -%}
          {%- endfor -%}
          {{ns.water_needed}}

########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  water_status_update:
    name: Water status update
    icon: mdi:water-off

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[plants|light]Turn on coffee plant according to schedule'
    trigger:
      - platform: time
        at: "7:00"
      - platform: state
        entity_id: input_boolean.sleep_tracking_on
        to: 'off'
      - platform: state
        entity_id: person.sander_blok
        to: 'home'
    condition:
      - condition: state
        entity_id: input_boolean.sleep_tracking_on
        state: 'off'
      - condition: time
        after: '7:00:00'
        before: '22:00:00'
    action:
      - service: switch.turn_on
        entity_id: switch.blitzwolf_coffeeplant
      - service: light.turn_on
        data:
          entity_id: light.plants
          color_temp: 380
          brightness: 155

  - alias: '[plants|light]Turn off coffee plant according to schedule'
    trigger:
      - platform: time
        at: "21:30"
      - platform: state
        entity_id: input_boolean.sleep_tracking_on
        to: 'on'
    action:
      - service: switch.turn_off
        entity_id: switch.blitzwolf_coffeeplant
      - service: light.turn_off
        entity_id: light.plants

  - alias: '[plants|moisture]Water Alert'
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: 30
      - platform: state
        entity_id: sensor.water_needed
    condition:
      - condition: state
        entity_id: binary_sensor.water_status
        state: 'on'
      - condition: template
        value_template: "{{ not is_state('sensor.water_needed', '') }}"
    action:
      # - wait_template: "{{ states('sensor.uptime')|int > 5 }}"
      #   timeout: '00:05:00'
      - service: persistent_notification.create
        data:
          title: Low water levels
          message: "{{ states('sensor.water_needed') }}"
          notification_id: low-water-alert
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.water_status
            to: 'off'
            for:
              minutes: 5
          - platform: template
            value_template: "{{ is_state('sensor.water_needed', '') }}"
      - service: persistent_notification.dismiss
        data:
          notification_id: low-water-alert

  # - alias: '[plants|light]Button turn plant lights on'
  #   trigger:
  #     - platform: event
  #       event_type: xiaomi_aqara.click
  #       event_data:
  #         entity_id: binary_sensor.switch_plants
  #         click_type: single
  #     # condition:
  #     #   - condition: state
  #     #     entity_id: light.plants
  #     #     state: 'on'
  #   action:
  #     - service: light.toggle
  #       entity_id: light.plants

  # - alias: '[plants|light]Button dim plant lights'
  #   trigger:
  #     - platform: event
  #       event_type: xiaomi_aqara.click
  #       event_data:
  #         entity_id: binary_sensor.switch_plants
  #         click_type: double
  #   condition:
  #     condition: numeric_state
  #     entity_id: light.plants
  #     value_template: "{% if is_state('light.plants', 'on')  %}{{ state_attr('light.plants', 'brightness')}}{% else %}0{% endif %}"
  #     above: 150
  #   action:
  #     - service: light.turn_on
  #       entity_id: light.plants
  #       data:
  #         brightness: 130

  # - alias: '[plants|light]Button brighten plant lights'
  #   trigger:
  #     - platform: event
  #       event_type: xiaomi_aqara.click
  #       event_data:
  #         entity_id: binary_sensor.switch_plants
  #         click_type: double
  #   condition:
  #     condition: numeric_state
  #     entity_id: light.plants
  #     value_template: "{% if is_state('light.plants', 'on')  %}{{ state_attr('light.plants', 'brightness')}}{% else %}0{% endif %}"
  #     below: 150
  #   action:
  #     - service: light.turn_on
  #       entity_id: light.plants
  #       data:
  #         brightness: 250

  - alias: '[plants|light] Button control plant lights'
    mode: queued
    trigger:
      - platform: event
        event_type: deconz_event
        event_data:
          id: plants_smart_switch
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" #single
            sequence:
              - service: light.toggle
                entity_id: light.plants
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1004 }}" #double
            sequence:
              - service: light.turn_on
                entity_id: light.plants
                data:
                  brightness: "{% if is_state('light.plants', 'off') or state_attr('light.plants', 'brightness')|int < 150 %}255{% else %}130{% endif %}"
################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
