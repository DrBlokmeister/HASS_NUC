homeassistant:
  customize:
    plant.coffee_plant:
      friendly_name: 'Coffee plant'
    plant.bonsai:
      friendly_name: 'Bonsai'
    plant.calathea:
      friendly_name: 'Calathea'
    plant.herbs:
      friendly_name: 'Herbs'

plant:
  coffee_plant:
    sensors:
      moisture: sensor.coffee_plant_moisture
      battery: sensor.coffee_plant_battery
      temperature: sensor.coffee_plant_temperature
      conductivity: sensor.coffee_plant_conductivity
      brightness: sensor.coffee_plant_light_intensity
    min_moisture: 10
  bonsai:
    sensors:
      moisture: sensor.bonsai_moisture
      battery: sensor.bonsai_battery
      temperature: sensor.bonsai_temperature
      conductivity: sensor.bonsai_conductivity
      brightness: sensor.bonsai_light_intensity
    min_moisture: 10
    min_conductivity: 50
  calathea:
    sensors:
      moisture: sensor.calathea_moisture
      battery: sensor.calathea_battery
      temperature: sensor.calathea_temperature
      conductivity: sensor.calathea_conductivity
      brightness: sensor.calathea_light_intensity
    min_moisture: 10
  herbs:
    sensors:
      moisture: sensor.herbs_moisture
      battery: sensor.herbs_battery
      temperature: sensor.herbs_temperature
      conductivity: sensor.herbs_conductivity
      brightness: sensor.herbs_light_intensity
    min_moisture: 10
  kepler:
    sensors:
      moisture: sensor.kepler_moisture
      battery: sensor.kepler_battery
      temperature: sensor.kepler_temperature
      conductivity: sensor.kepler_conductivity
      brightness: sensor.kepler_light_intensity
    min_moisture: 10
  galileo:
    sensors:
      moisture: sensor.galileo_moisture
      battery: sensor.galileo_battery
      temperature: sensor.galileo_temperature
      conductivity: sensor.galileo_conductivity
      brightness: sensor.galileo_light_intensity
    min_moisture: 10
  bromelia:
    sensors:
      moisture: sensor.bromelia_moisture
      battery: sensor.bromelia_battery
      temperature: sensor.bromelia_temperature
      conductivity: sensor.bromelia_conductivity
      brightness: sensor.bromelia_light_intensity
    min_moisture: 10

#################
#    SENSORS    #
#################
sensor:
  # - platform: mitemp_bt
  #   rounding: True
  #   decimals: 1
  #   period: 60
  #   log_spikes: False
  #   use_median: False
  #   active_scan: False
  #   hci_interface: 0
  #   batt_entities: False
  #   report_unknown: True
  #   whitelist: False

  - platform: miflora
    mac: 'C4:7C:8D:6B:17:07'
    name: Coffee Plant
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6B:12:B5'
    name: Bonsai
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6A:F3:7B'
    name: Calathea
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: 'C4:7C:8D:6B:16:8A'
    name: Herbs
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:89:1E:DD'
    name: Kepler
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:89:1E:B5'
    name: Galileo
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  - platform: miflora
    mac: '80:EA:CA:88:E8:85'
    name: Bromelia
    force_update: true
    median: 3
    monitored_conditions:
      - moisture
      - light
      - temperature
      - conductivity
      - battery
  #- platform: mitemp_bt

  - platform: template
    sensors:
      water_needed: #check which plants need water
        friendly_name: "Water needed"
        entity_id:
          - plant.bonsai
          - plant.coffee_plant
          - plant.calathea
          - plant.herbs
          - plant.bromelia
          - plant.galileo
          - plant.kepler
        value_template: >
          {%- set threshold = 10 -%}
          {%- for item in states.plant if ((item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) or ("moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {%- if (item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) -%}
              {{ item.name }} ({{ item.attributes['moisture'] }}%){%- if not loop.last %}, {% endif -%}{% endif -%}
            {%- if "moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
              {{ item.attributes.friendly_name }} ({{ item.state }}){%- if not loop.last %}, {% endif -%} {% endif -%}
          {%- endfor -%}

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      water_status:   #check if plants need water
        friendly_name: "Water Status"
        entity_id:
          - plant.bonsai
          - plant.coffee_plant
          - plant.calathea
          - plant.herbs
          - plant.bromelia
          - plant.galileo
          - plant.kepler
        value_template: >
          {%- set threshold = 20 -%}
          {% set ns = namespace(water_needed = false) %}
          {%- for item in states.plant if ((item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) or ("moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {%- if (item.attributes.moisture is defined and item.attributes['moisture'] | int < threshold) -%}
              {% set ns.water_needed = true %}
            {% endif -%}
            {%- if "moisture" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
              {% set ns.water_needed = true %}
            {% endif -%}
          {%- endfor -%}
          {{ns.water_needed}}

########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  water_status_update:
    name: Water status update
    icon: mdi:water-off

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[plants|light]Turn on coffee plant according to schedule'
    trigger:
      - platform: time
        at: "7:00"
      - platform: state
        entity_id: input_boolean.sleep_tracking_on
        to: 'off'
      - platform: state
        entity_id: person.sander_blok
        to: 'home'
    condition:
      - condition: state
        entity_id: input_boolean.sleep_tracking_on
        state: 'off'
      - condition: time
        after: '7:00:00'
        before: '22:00:00'
    action:
      - service: switch.turn_on
        entity_id: switch.blitzwolf_coffeeplant
      - service: light.turn_on
        data:
          entity_id: light.plants
          color_temp: 380
          brightness: 155

  - alias: '[plants|light]Turn off coffee plant according to schedule'
    trigger:
      - platform: time
        at: "21:30"
      - platform: state
        entity_id: input_boolean.sleep_tracking_on
        to: 'on'
    action:
      - service: switch.turn_off
        entity_id: switch.blitzwolf_coffeeplant
      - service: light.turn_off
        entity_id: light.plants

  - alias: '[plants|moisture]Water Alert'
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: 30
      - platform: state
        entity_id: sensor.water_needed
    condition:
      - condition: state
        entity_id: binary_sensor.water_status
        state: 'on'
    action:
      - wait_template: "{{ states('sensor.uptime')|int > 5 }}"
        timeout: '00:05:00'
      - service: persistent_notification.create
        data:
          title: Low water levels
          message: "{{ states('sensor.water_needed') }}"
          notification_id: low-water-alert
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.water_status
            to: 'off'
            for:
              minutes: 5
      - service: persistent_notification.dismiss
        data:
          notification_id: low-water-alert

  - alias: '[plants|light]Button turn plant lights on'
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          entity_id: binary_sensor.switch_plants
          click_type: single
      # condition:
      #   - condition: state
      #     entity_id: light.plants
      #     state: 'on'
    action:
      - service: light.toggle
        entity_id: light.plants

  - alias: '[plants|light]Button dim plant lights'
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          entity_id: binary_sensor.switch_plants
          click_type: double
    condition:
      condition: numeric_state
      entity_id: light.plants
      value_template: '{% if states.light.plants.state == "on"  %}{{ states.light.plants.attributes.brightness }}{% else %}0{% endif %}'
      above: 150
    action:
      - service: light.turn_on
        entity_id: light.plants
        data:
          brightness: 130

  - alias: '[plants|light]Button brighten plant lights'
    trigger:
      - platform: event
        event_type: xiaomi_aqara.click
        event_data:
          entity_id: binary_sensor.switch_plants
          click_type: double
    condition:
      condition: numeric_state
      entity_id: light.plants
      value_template: '{% if states.light.plants.state == "on"  %}{{ states.light.plants.attributes.brightness }}{% else %}0{% endif %}'
      below: 150
    action:
      - service: light.turn_on
        entity_id: light.plants
        data:
          brightness: 250

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
