homeassistant:
  customize:
    automation.auto_clean_litterbox_when_not_home_check_every_10_min:
      icon: mdi:robot-vacuum
    automation.auto_clean_whole_house_when_not_home_check_every_10_min:
      icon: mdi:robot-vacuum
    automation.notification_when_consuela_is_done_cleaning:
      icon: mdi:robot-vacuum
    automation.turn_input_boolean_vacuumed_today_off:
      icon: mdi:robot-vacuum
    automation.drive_vacuum_to_trash_bin:
      icon: mdi:robot-vacuum
  customize_glob:
    "script.vacuum_*":
      icon: mdi:robot-vacuum

input_number:
  # consuela_area_cleaned_at_start_of_day: #in m2
  #   name: Consuela area cleaned at the start of the day
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # consuela_area_cleaned_at_last_empty_bin: #in m2
  #   name: Consuela area cleaned after last time empty bin
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # argus_area_cleaned_at_start_of_day: #in m2
  #   name: Argus area cleaned at the start of the day
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # argus_area_cleaned_at_last_empty_bin: #in m2
  #   name: Argus area cleaned after last time empty bin
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # alfred_area_cleaned_at_start_of_day: #in m2
  #   name: Alfred area cleaned at the start of the day
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # alfred_area_cleaned_at_last_empty_bin: #in m2
  #   name: Alfred area cleaned after last time empty bin
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # moeke_area_cleaned_at_start_of_day: #in m2
  #   name: Alfred area cleaned at the start of the day
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2
  # moeke_area_cleaned_at_last_empty_bin: #in m2
  #   name: Alfred area cleaned after last time empty bin
  #   step: 1
  #   min: 0
  #   max: 100000
  #   mode: box
  #   unit_of_measurement: m2


camera:
  - platform: xiaomi_cloud_map_extractor
    name: "Argus Map"
    host: !secret argus_IP
    token: !secret argus_token
    username: !secret xiaomi_cloud_user
    password: !secret xiaomi_cloud_pass
    draw: ['all']
    scan_interval: 36000 # 10 hours to see if this works
    attributes:
      - calibration_points
    map_transformation:
      scale: 2
      rotate: 90
      trim:
        top: 15
        bottom: 15
        left: 25
        right: 25
    colors:
      color_path: [10, 10, 10]
  - platform: xiaomi_cloud_map_extractor
    name: "Alfred Map"
    host: !secret alfred_IP
    token: !secret alfred_token
    username: !secret xiaomi_cloud_user
    password: !secret xiaomi_cloud_pass
    draw: ['all']
    scan_interval: 36000 # 10 hours to see if this works
    attributes:
      - calibration_points
    map_transformation:
      scale: 2
      rotate: 0
      trim:
        top: 0
        bottom: 20
        left: 0
        right: 0
    colors:
      color_path: [10, 10, 10]

utility_meter:
  moeke_area_cleaned_today:
    name: Moeke Area Cleaned Today
    source: sensor.moeke_cleaned_area
    cycle: daily
    offset:
      hours: 3
  argus_area_cleaned_today:
    name: Argus Area Cleaned Today
    source: sensor.argus_current_clean_area
    cycle: daily
    offset:
      hours: 3
    periodically_resetting: true
  alfred_area_cleaned_today:
    name: Alfred Area Cleaned Today
    source: sensor.alfred_current_clean_area
    cycle: daily
    offset:
      hours: 3
    periodically_resetting: true

  # argus_area_cleaned_since_last_empty_bin:
  #   name: Argus Area Cleaned Since Last Empty Bin
  #   source: sensor.argus_total_clean_area
  # alfred_area_cleaned_since_last_empty_bin:
  #   name: Alfred Area Cleaned Since Last Empty Bin
  #   source: sensor.alfred_total_clean_area
#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      # argus_area_cleaned_today:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.argus_total_clean_area')|int(states('input_number.argus_area_cleaned_at_start_of_day')|int) - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.argus_total_clean_area')|int - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
      #   availability_template: "{{ states('sensor.argus_total_clean_area')|is_number }}"
      # argus_area_cleaned_since_last_empty_bin:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.argus_total_clean_area')|int(states('input_number.argus_area_cleaned_at_start_of_day')|int)  - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.argus_total_clean_area')|int - states('input_number.argus_area_cleaned_at_last_empty_bin')|int }}"
      #   availability_template: "{{ states('sensor.argus_total_clean_area')|is_number }}"
      # alfred_area_cleaned_today:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.alfred_total_clean_area')|int(states('input_number.alfred_area_cleaned_at_start_of_day')|int) - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.alfred_total_clean_area')|int - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
      #   availability_template: "{{ states('sensor.alfred_total_clean_area')|is_number }}"
      # alfred_area_cleaned_since_last_empty_bin:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.alfred_total_clean_area')|int(states('input_number.alfred_area_cleaned_at_start_of_day')|int)  - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.alfred_total_clean_area')|int - states('input_number.alfred_area_cleaned_at_last_empty_bin')|int }}"
      #   availability_template: "{{ states('sensor.alfred_total_clean_area')|is_number }}"
      # moeke_area_cleaned_today:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.moeke_total_cleaned_area')|int(states('input_number.moeke_area_cleaned_at_start_of_day')|int) - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.moeke_total_cleaned_area')|int - states('input_number.moeke_area_cleaned_at_start_of_day')|int }}"
      #   availability_template: "{{ states('sensor.moeke_total_cleaned_area')|is_number }}"
      # moeke_area_cleaned_since_last_empty_bin:
      #   unit_of_measurement: 'm2'
      #   #value_template: "{{ states('sensor.moeke_total_cleaned_area')|int(states('input_number.moeke_area_cleaned_at_last_empty_bin')|int)  - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
      #   value_template: "{{ states('sensor.moeke_total_cleaned_area')|int - states('input_number.moeke_area_cleaned_at_last_empty_bin')|int }}"
      #   availability_template: "{{ states('sensor.moeke_total_cleaned_area')|is_number }}"

      alfred_battery:
        friendly_name: "Alfred Battery"
        unit_of_measurement: "%"
        device_class: "battery"
        #icon: mdi:battery
        value_template: "{{ state_attr('vacuum.alfred', 'battery_level') }}"
        availability_template: "{{ states('vacuum.alfred') not in ['None', 'Unavailable', 'unknown', None] }}"
      argus_battery:
        friendly_name: "Argus Battery"
        unit_of_measurement: "%"
        device_class: "battery"
        #icon: mdi:battery
        value_template: "{{ state_attr('vacuum.argus', 'battery_level') }}"
        availability_template: "{{ states('vacuum.argus') not in ['None', 'Unavailable', 'unknown', None] }}"

      moeke_power_estimate:
        value_template: >-
          {% if is_state('vacuum.moeke', 'docked') and states('sensor.moeke_battery_level')|int < 100 and is_state('sensor.moeke_self_wash_base_status', 'drying') %}
            60
          {% elif is_state('vacuum.moeke', 'docked') and states('sensor.moeke_battery_level')|int < 100 and not is_state('sensor.moeke_self_wash_base_status', 'drying') %}
            20
          {% elif is_state('vacuum.moeke', 'docked') and states('sensor.moeke_battery_level')|int == 100 and is_state('sensor.moeke_self_wash_base_status', 'drying') %}
            50
          {% elif is_state('vacuum.moeke', 'docked') %}
            3
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "W"
        device_class: 'power'
        availability_template: "{{ states('vacuum.moeke') not in ['unavailable', 'unknown', 'none', None, 'None'] }}"
      argus_power_estimate:
        value_template: >-
          {% if is_state('vacuum.argus', 'docked') and state_attr('vacuum.argus', 'battery_level')|int < 100 %}
            20
          {% elif is_state('vacuum.argus', 'docked') and state_attr('vacuum.alfred', 'battery_level')|int == 100 %}
            3
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "W"
        device_class: 'power'
        availability_template: "{{ states('vacuum.argus') not in ['unavailable', 'unknown', 'none', None, 'None'] }}"
      alfred_power_estimate:
        value_template: >-
          {% if is_state('vacuum.alfred', 'docked') and state_attr('vacuum.alfred', 'battery_level')|int < 100 %}
            20
          {% elif is_state('vacuum.alfred', 'docked') and state_attr('vacuum.alfred', 'battery_level')|int == 100 %}
            3
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "W"
        device_class: 'power'
        availability_template: "{{ states('vacuum.alfred') not in ['unavailable', 'unknown', 'none', None, 'None'] }}"

  - platform: integration
    source: sensor.moeke_power_estimate
    name: Moeke Energy
    unique_id: integration_moeke_energy
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
  - platform: integration
    source: sensor.argus_power_estimate
    name: Argus Energy
    unique_id: integration_argus_energy
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
  - platform: integration
    source: sensor.alfred_power_estimate
    name: Alfred Energy
    unique_id: integration_alfred_energy
    unit_time: h
    unit_prefix: k
    method: left
    round: 2

  - platform: min_max
    name: Vacuums Power Estimate
    type: sum
    round_digits: 0
    entity_ids:
      - sensor.moeke_power_estimate
      - sensor.argus_power_estimate
      - sensor.alfred_power_estimate

  - platform: min_max
    name: Vacuums Energy Estimate
    type: sum
    round_digits: 2
    entity_ids:
      - sensor.moeke_energy
      - sensor.argus_energy
      - sensor.alfred_energy
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      tamara_or_sander_downstairs:
        value_template: "{{ is_state_attr('device_tracker.tamaraphone', 'ap_mac', 'd0:21:f9:64:06:39') or is_state_attr('device_tracker.blokmeisters21u_2', 'ap_mac', 'd0:21:f9:64:06:39') }}"
        availability_template: "{{ not is_state('device_tracker.tamaraphone', 'unavailable') or not is_state('device_tracker.blokmeisters21u_2', 'unavailable') }}"
##################
#    SWITCHES    #
##################
switch:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    COUNTERS    #
##################
counter:

#####################
#    AUTOMATIONS    #
#####################
automation:
#Auto clean whole house when I'm not home on mon, wed, fri
  - alias: '[home|vacuum]scheduled_cleanup'
    id: home_vacuum_scheduled_cleanup
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'off'
        # for: 00:10:00
      - platform: time
        at: '07:00:00'
    condition:
      - condition: time
        after: '7:00:00'
        before: '22:00:00'
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'off'
    action:
      - if:
          - condition: numeric_state
            entity_id: sensor.alfred_area_cleaned_today
            below: 20
        then:
          - service: vacuum.set_fan_speed
            entity_id: vacuum.alfred
            continue_on_error: true
            data:
              fan_speed: Medium
          - service: vacuum.start
            entity_id: vacuum.alfred
            continue_on_error: true
      - if:
          - condition: numeric_state
            entity_id: sensor.argus_area_cleaned_today
            below: 20
        then:
          - service: vacuum.set_fan_speed
            entity_id: vacuum.argus
            continue_on_error: true
            data:
              fan_speed: Medium
          - service: vacuum.start
            entity_id: vacuum.argus
            continue_on_error: true
      - if:
          - condition: numeric_state
            entity_id: sensor.moeke_area_cleaned_today
            below: 20
        then:
          - service: vacuum.set_fan_speed
            entity_id: vacuum.moeke
            continue_on_error: true
            data:
              fan_speed: Strong
          - service: select.select_option
            continue_on_error: true
            target:
              entity_id: select.moeke_cleaning_mode
            data:
              option: "sweeping_and_mopping"
          - delay:
              seconds: 3
          - service: vacuum.start
            continue_on_error: true
            entity_id: vacuum.moeke
      - delay:
          seconds: 10
      - if:
          - condition: state
            entity_id:
              - vacuum.moeke
              - vacuum.argus
              - vacuum.alfred
            match: any
            state: 'cleaning'
        then:
          - service: notify.mobile_app_blokmeisters21u
            data:
              message: "Started scheduled cleanup"
              title: "Home Assistant - Vacuum"
              data:
                group: info
                tag: vacuum
                icon_url: local/icons/robot-vacuum.png
                timeout: 1800

  - alias: '[home|vacuum]backup cleanup' #If we stay home until 15:00, be more agressive in trying to find a cleaning slot
    id: home_vacuum_backup_cleanup
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.tamara_or_sander_downstairs
        to: 'off'
        for:
          minutes: 15
      - platform: time
        at: '15:00:00'
    condition:
      - condition: time
        after: '15:00:00'
        before: '22:00:00'
      - condition: numeric_state
        entity_id: sensor.moeke_area_cleaned_today
        below: 20
      - condition: state
        entity_id: binary_sensor.tamara_or_sander_downstairs
        state: 'off'
        for:
          minutes: 15
    action:
      - service: vacuum.set_fan_speed
        entity_id: vacuum.moeke
        data:
          fan_speed: Strong
      - service: select.select_option
        target:
          entity_id: select.moeke_cleaning_mode
        data:
          option: "sweeping_and_mopping"
      - delay:
          seconds: 2
      - service: vacuum.start
        entity_id: vacuum.moeke

  # - alias: '[home|vacuum]Drive Alfred to Hallway when Dust Bin is full'
  #   id: home_vacuum_drive_alfred_to_hallway_when_dust_bin_is_full
  #   mode: single
  #   trigger:
  #     - platform: numeric_state
  #       entity_id: vacuum.alfred
  #       attribute: battery_level
  #       above: 99
  #     - platform: state
  #       entity_id: binary_sensor.house_occupied
  #       to: 'on'
  #     - platform: time
  #       at: "9:00:00"
  #   condition:
  #     - condition: numeric_state
  #       entity_id: sensor.alfred_area_cleaned_since_last_empty_bin
  #       above: 100
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #     - condition: numeric_state
  #       entity_id: vacuum.alfred
  #       attribute: battery_level
  #       above: 99
  #     - condition: time
  #       after: "9:00:00"
  #       before: "21:00:00"
  #   action:
  #     - service: script.alfred_goto_hallway
  #     - wait_for_trigger:
  #         - platform: state
  #           entity_id: vacuum.alfred
  #           to:
  #             - 'returning'
  #             - 'Returning to dock'
  #             - 'docked'
  #     - service: utility_meter.calibrate
  #       data:
  #         value: 0
  #       target:
  #         entity_id: sensor.alfred_area_cleaned_since_last_empty_bin
      # - service: utility_meter.reset
      #   entity_id: sensor.alfred_area_cleaned_at_last_empty_bin
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.alfred_area_cleaned_at_last_empty_bin
      #     value: "{{ states('sensor.alfred_total_clean_area') }}"

  # - alias: '[home|vacuum]Drive Argus to Hallway when Dust Bin is full'
  #   id: home_vacuum_drive_argus_to_hallway_when_dust_bin_is_full
  #   mode: single
  #   trigger:
  #     - platform: numeric_state
  #       entity_id: vacuum.argus
  #       attribute: battery_level
  #       above: 99
  #     - platform: state
  #       entity_id: binary_sensor.house_occupied
  #       to: 'on'
  #     - platform: time
  #       at: "9:00:00"
  #   condition:
  #     - condition: numeric_state
  #       entity_id: sensor.argus_area_cleaned_since_last_empty_bin
  #       above: 100
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #     - condition: numeric_state
  #       entity_id: vacuum.argus
  #       attribute: battery_level
  #       above: 99
  #     - condition: time
  #       after: "9:00:00"
  #       before: "21:00:00"
  #   action:
  #     - service: xiaomi_miio.vacuum_goto
  #       data:
  #         entity_id: vacuum.argus
  #         x_coord: 28946
  #         y_coord: 26144
  #     #- service: script.argus_goto_hallway
  #     - wait_for_trigger:
  #         - platform: state
  #           entity_id: vacuum.argus
  #           to:
  #             - 'returning'
  #             - 'Returning to dock'
  #             - 'docked'
      # - service: utility_meter.reset
      #   entity_id: sensor.argus_area_cleaned_since_last_empty_bin
      # - service: utility_meter.calibrate
      #   data:
      #     value: 0
      #   target:
      #     entity_id: sensor.argus_area_cleaned_since_last_empty_bin
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.argus_area_cleaned_at_last_empty_bin
      #     value: "{{ states('sensor.argus_total_clean_area') }}"

  - alias: '[home|vacuum] Button control moeke'
    id: home_vacuum_button_control_moeke
    mode: restart
    trigger:
      - platform: event
        event_type: deconz_event
        event_data:
          id: moeke_water_reset_switch
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1003 }}" #long press release
              - condition: template
                value_template: "{{ is_state('vacuum.moeke', 'docked') }}"
            sequence:
              - service: button.press
                target:
                  entity_id: button.moeke_clear_warning
              - service: persistent_notification.dismiss
                data:
                  notification_id: "NOTIFICATION_ID_WARNING"
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" #single
              - condition: template
                value_template: "{{ not is_state('vacuum.moeke', 'cleaning') }}"
            sequence:
              - service: vacuum.set_fan_speed
                entity_id: vacuum.moeke
                data:
                  fan_speed: Strong
              - service: select.select_option
                target:
                  entity_id: select.moeke_cleaning_mode
                data:
                  option: "sweeping_and_mopping"
              - service: vacuum.start
                entity_id: vacuum.moeke
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" #single
              - condition: state
                entity_id: vacuum.moeke
                state: cleaning
            sequence:
              - service: vacuum.pause
                entity_id: vacuum.moeke
          # - conditions:
          #     - condition: template
          #       value_template: "{{ trigger.event.data.event == 1004 }}" #double
          #     - condition: state
          #       entity_id: vacuum.moeke
          #       state: docked
          #   sequence:
          #     - service: automation.trigger
          #       data:
          #         entity_id: automation.home_vacuum_counter_drive_to_trashbin
          #         skip_condition: true
          #     - wait_for_trigger:
          #         platform: state
          #         entity_id: vacuum.xiaomi_vacuum_cleaner
          #         to: 'Docked'
          #     - service: input_number.set_value
          #       data:
          #         entity_id: input_number.area_cleaned_at_last_empty_bin
          #         value: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','total_cleaned_area') }}"
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1004 }}" #double
              - condition: template
                value_template: "{{ not is_state('vacuum.moeke', 'docked') }}"
            sequence:
              - service: vacuum.return_to_base
                entity_id: vacuum.moeke

  # - alias: '[home|vacuum]reset_area_cleaned_input_number'
  #   trigger:
  #     platform: time
  #     at: '03:00:00'
  #   action:
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.consuela_area_cleaned_at_start_of_day
      #     value: "{{ states('sensor.consuela_total_clean_area') }}"
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.moeke_area_cleaned_at_start_of_day
      #     value: "{{ states('sensor.moeke_total_clean_area') }}"
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.argus_area_cleaned_at_start_of_day
      #     value: "{{ states('sensor.argus_total_clean_area') }}"
      # - service: input_number.set_value
      #   data:
      #     entity_id: input_number.alfred_area_cleaned_at_start_of_day
      #     value: "{{ states('sensor.alfred_total_clean_area') }}"
########## NOTIFICATIONS ##########
  - alias: '[home|vacuum]Notify Phone if Vacuum is in Error'
    id: home_vacuum_notify_phone_if_vacuum_is_in_error
    mode: parallel
    trigger:
      - platform: state
        entity_id: vacuum.argus
        to: "error"
        id: "Argus"
      - platform: state
        entity_id: vacuum.alfred
        to: "error"
        id: "Alfred"
      - platform: state
        entity_id: vacuum.moeke
        to: "error"
        id: "Moeke"
    action:
      - variables:
          vacuumentityid: "{{ trigger.entity_id }}"
      - service: camera.snapshot
        continue_on_error: true
        data:
          entity_id: "camera.{{ vacuumentityid[7:] }}_map"
          filename: "/config/www/tmp/snapshot_vacuum_error.jpg"
      - delay:
          seconds: 5
      - service: notify.mobile_app_blokmeisters21u
        continue_on_error: true
        data:
          title: "Error with {{ trigger.id }}"
          message: "Vacuum {{ trigger.id }} has state {{ trigger.to_state.state }}!"
          data:
            group: vacuum
            tag: vacuumerror
            icon_url: local/icons/robot-vacuum.png
            image: "/local/tmp/snapshot_vacuum_error.jpg"
      - service: scene.create
        data:
          scene_id: atmoorb_bulbs_before
          snapshot_entities:
            - light.ambilight_left
            - light.ambilight_right
      - service: light.turn_on
        target:
          entity_id:
            - light.ambilight_left
            - light.ambilight_right
        data:
          rgb_color: [255,0,0]
          effect: Fast Pulse
      - wait_template: "{{ not is_state( vacuumentityid, 'error' ) }}"
      - service: scene.turn_on
        data:
          entity_id: scene.atmoorb_bulbs_before
          transition: 1
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "clear_notification"
          data:
            tag: vacuumerror

  - alias: '[home|vacuum]Notify if Moeke Clean Water Reservoir is Empty'
    id: home_vacuum_notify_if_moeke_clean_water_reservoir_is_empty
    mode: single
    trigger:
      # - platform: state
      #   entity_id: sensor.moeke_low_water_warning
      #   not_to:
      #     - "No warning"
      #     - no_warning
      - platform: state
        entity_id: binary_sensor.moeke_reservoir_leak_sensor
        to: 'off'
    action:
      - service: notify.mobile_app_blokmeisters21u
        continue_on_error: true
        data:
          title: "Moeke water reservoir empty"
          message: "Please refill Moeke reservoir."
          data:
            group: vacuum
            tag: vacuumerror
            icon_url: local/icons/robot-vacuum.png
      - service: scene.create
        data:
          scene_id: atmoorb_right_bulb_before
          snapshot_entities:
            - light.ambilight_right
      - service: light.turn_on
        target:
          entity_id:
            - light.ambilight_right
        data:
          rgb_color: [70,70,255]
          effect: Fast Pulse
      #- wait_template: "{{ not is_state(sensor.moeke_low_water_warning , 'No warning') }}"
      - wait_for_trigger:
          # - platform: state
          #   entity_id: sensor.moeke_low_water_warning
          #   to:
          #     - "No warning"
          #     - no_warning
          # - platform: event
          #   event_type: deconz_event
          #   event_data:
          #     id: moeke_water_reset_switch
          #     event: 1003
          - platform: state
            entity_id: binary_sensor.moeke_reservoir_leak_sensor
            to: 'on'
            for:
              seconds: 5
      - service: button.press
        target:
          entity_id: button.moeke_clear_warning
      - service: scene.turn_on
        data:
          entity_id: scene.atmoorb_right_bulb_before
          transition: 1
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "clear_notification"
          data:
            tag: vacuumerror

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  vacuum_automations:
    name: "Vacuum Automations Group"
    entities:
      - automation.home_vacuum_scheduled_cleanup
      - automation.home_vacuum_backup_cleanup
      - automation.home_vacuum_drive_alfred_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_drive_argus_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_drive_consuela_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_reset_area_cleaned_input_number
#################
#    SCRIPTS    #
#################
script:
  # vacuum_around_litterbox_twice:
  #   alias: "Clean around litterbox"
  #   sequence:
  #   - service: xiaomi_miio.vacuum_clean_zone
  #     data:
  #       entity_id: vacuum.xiaomi_vacuum_cleaner
  #       repeats: 2
  #       zone: [[16618,28223,18568,29623]]

  vacuum_entry_twice:
    alias: "Clean Entry"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[19889,27925,23624,29138]]
  vacuum_kitchen_twice:
    alias: "Clean kitchen"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[20637,25649,23590,27964]]
  vacuum_study_twice:
    alias: "Clean study"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[24672,21043,27477,26937]]
  vacuum_guestroom_twice:
    alias: "Clean Guest Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[24672,26937,27651,30439]]
  vacuum_tamarasroom_twice:
    alias: "Clean Tamara's Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[27563,21239,29912,25220]]
  vacuum_washroom_twice:
    alias: "Clean Wash Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[27565,28133,29848,30439]]
  # vacuum_bedroom_twice:
  #   alias: "Clean bedroom"
  #   sequence:
  #   - service: xiaomi_miio.vacuum_clean_zone
  #     data:
  #       entity_id: vacuum.consuela
  #       repeats: 2
  #       zone: [[26952,24836,30911,30071]]
  # vacuum_bathroom_twice:
  #   alias: "Clean bathroom"
  #   sequence:
  #   - service: xiaomi_miio.vacuum_clean_zone
  #     data:
  #       entity_id: vacuum.consuela
  #       repeats: 2
  #       zone: [[21388,27120,23885,30072]]
  vacuum_livingroom_twice:
    alias: "Clean Living Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[23482,25044,29387,30204]]

  alfred_goto_hallway:
    alias: "Alfred go to Hallway"
    sequence:
    - service: xiaomi_miio.vacuum_goto
      data:
        entity_id: vacuum.alfred
        x_coord: 25119
        y_coord: 28904
  # consuela_goto_hallway:
  #   alias: "Consuela go to Kitchen"
  #   sequence:
  #   - service: xiaomi_miio.vacuum_goto
  #     data:
  #       entity_id: vacuum.consuela
  #       x_coord: 25226
  #       y_coord: 28459
  argus_goto_hallway:
    alias: "Argus go to Hallway"
    sequence:
    - service: xiaomi_miio.vacuum_goto
      data:
        entity_id: vacuum.argus
        x_coord: 28946
        y_coord: 26144

  call_cleaning_loop:
    alias: "Calls the cleaning loop"
    mode: queued
    sequence:
      - condition: template
        value_template: "{{ not is_state('input_select.vacuum_area_coordinates', '16') }}"
      - service: script.turn_on
        data:
          entity_id: script.clean_next_area

  clean_next_area:
    alias: "cleans the next area"
    mode: queued
    sequence:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: app_segment_clean
          params: >-
            {{states('input_select.vacuum_room_numbers')|int}}
      - wait_template: "{{ is_state_attr('vacuum.xiaomi_vacuum_cleaner','status','Returning home') }}"
      - service: input_select.select_next
        data:
          entity_id: input_select.vacuum_room_numbers
      - service: script.turn_on
        data:
          entity_id: script.call_cleaning_loop
