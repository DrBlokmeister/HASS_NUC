homeassistant:
  customize:
    automation.auto_clean_litterbox_when_not_home_check_every_10_min:
      icon: mdi:robot-vacuum
    automation.auto_clean_whole_house_when_not_home_check_every_10_min:
      icon: mdi:robot-vacuum
    automation.notification_when_consuela_is_done_cleaning:
      icon: mdi:robot-vacuum
    automation.turn_input_boolean_vacuumed_today_off:
      icon: mdi:robot-vacuum
    automation.drive_vacuum_to_trash_bin:
      icon: mdi:robot-vacuum
  customize_glob:
    "script.vacuum_*":
      icon: mdi:robot-vacuum

# vacuum:
#   - platform: xiaomi_miio
#     host: 10.0.20.40
#     token: !secret vacuum_token

input_select:
  vacuum_areas:
    options:
      - livingroom
      - kitchen
      - entry
      - study
      - hallway
      - bedroom
      - bathroom
    initial: livingroom
    icon: mdi:robot-vacuum
  vacuum_room_numbers:
    options:
      - 17   #livingroom
      - 4   #entry
      - 3   #kitchen
      - 1   #bedroom
      - 2   #study
      - 16  #hallway+bathroom
    initial: 17
    icon: mdi:robot-vacuum
input_number:
  consuela_area_cleaned_at_start_of_day: #in m2
    name: Consuela area cleaned at the start of the day
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2
  consuela_area_cleaned_at_last_empty_bin: #in m2
    name: Consuela area cleaned after last time empty bin
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2
  argus_area_cleaned_at_start_of_day: #in m2
    name: Argus area cleaned at the start of the day
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2
  argus_area_cleaned_at_last_empty_bin: #in m2
    name: Argus area cleaned after last time empty bin
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2
  alfred_area_cleaned_at_start_of_day: #in m2
    name: Alfred area cleaned at the start of the day
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2
  alfred_area_cleaned_at_last_empty_bin: #in m2
    name: Alfred area cleaned after last time empty bin
    step: 1
    min: 0
    max: 100000
    mode: box
    unit_of_measurement: m2


camera:
  - platform: xiaomi_cloud_map_extractor
    name: "Argus Map"
    host: !secret argus_IP
    token: !secret argus_token
    username: !secret xiaomi_cloud_user
    password: !secret xiaomi_cloud_pass
    draw: ['all']
    scan_interval: 10
    attributes:
      - calibration_points
    map_transformation:
      scale: 2
      trim:
        top: 0
        bottom: 30
        left: 10
        right: 25
    colors:
      color_path: [10, 10, 10]
  - platform: xiaomi_cloud_map_extractor
    name: "Consuela Map"
    host: !secret consuela_IP
    token: !secret consuela_token
    username: !secret xiaomi_cloud_user
    password: !secret xiaomi_cloud_pass
    draw: ['all']
    scan_interval: 10
    attributes:
      - calibration_points
    map_transformation:
      scale: 2
      trim:
        top: 28
        bottom: 25
        left: 20
        right: 15
    colors:
      color_path: [10, 10, 10]
  - platform: xiaomi_cloud_map_extractor
    name: "Alfred Map"
    host: !secret alfred_IP
    token: !secret alfred_token
    username: !secret xiaomi_cloud_user
    password: !secret xiaomi_cloud_pass
    draw: ['all']
    scan_interval: 10
    attributes:
      - calibration_points
    map_transformation:
      scale: 2
      rotate: 90
      # trim:
      #   top: 28
      #   bottom: 20
      #   left: 20
      #   right: 15
    colors:
      color_path: [10, 10, 10]
#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      consuela_area_cleaned_today:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.consuela_total_clean_area')|int(states('input_number.consuela_area_cleaned_at_start_of_day')|int) - states('input_number.consuela_area_cleaned_at_start_of_day')|int }}"
        value_template: "{{ states('sensor.consuela_total_clean_area')|int - states('input_number.consuela_area_cleaned_at_start_of_day')|int }}"
        availability_template: "{{ states('sensor.consuela_total_clean_area')|is_number }}"
      consuela_area_cleaned_since_last_empty_bin:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.consuela_total_clean_area')|int(states('input_number.consuela_area_cleaned_at_start_of_day')|int)  - states('input_number.consuela_area_cleaned_at_last_empty_bin')|int }}"
        value_template: "{{ states('sensor.consuela_total_clean_area')|int - states('input_number.consuela_area_cleaned_at_last_empty_bin')|int }}"
        availability_template: "{{ states('sensor.consuela_total_clean_area')|is_number }}"
      argus_area_cleaned_today:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.argus_total_clean_area')|int(states('input_number.argus_area_cleaned_at_start_of_day')|int) - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
        value_template: "{{ states('sensor.argus_total_clean_area')|int - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
        availability_template: "{{ states('sensor.argus_total_clean_area')|is_number }}"
      argus_area_cleaned_since_last_empty_bin:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.argus_total_clean_area')|int(states('input_number.argus_area_cleaned_at_start_of_day')|int)  - states('input_number.argus_area_cleaned_at_start_of_day')|int }}"
        value_template: "{{ states('sensor.argus_total_clean_area')|int - states('input_number.argus_area_cleaned_at_last_empty_bin')|int }}"
        availability_template: "{{ states('sensor.argus_total_clean_area')|is_number }}"
      alfred_area_cleaned_today:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.alfred_total_clean_area')|int(states('input_number.alfred_area_cleaned_at_start_of_day')|int) - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
        value_template: "{{ states('sensor.alfred_total_clean_area')|int - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
        availability_template: "{{ states('sensor.alfred_total_clean_area')|is_number }}"
      alfred_area_cleaned_since_last_empty_bin:
        unit_of_measurement: 'm2'
        #value_template: "{{ states('sensor.alfred_total_clean_area')|int(states('input_number.alfred_area_cleaned_at_start_of_day')|int)  - states('input_number.alfred_area_cleaned_at_start_of_day')|int }}"
        value_template: "{{ states('sensor.alfred_total_clean_area')|int - states('input_number.alfred_area_cleaned_at_last_empty_bin')|int }}"
        availability_template: "{{ states('sensor.alfred_total_clean_area')|is_number }}"

      consuela_battery:
        friendly_name: "Consuela Battery"
        unit_of_measurement: "%"
        device_class: "battery"
        #icon: mdi:battery
        value_template: "{{ state_attr('vacuum.consuela', 'battery_level') }}"
        availability_template: "{{ states('vacuum.consuela') not in ['None', 'Unavailable', 'unknown', None] }}"
      alfred_battery:
        friendly_name: "Alfred Battery"
        unit_of_measurement: "%"
        device_class: "battery"
        #icon: mdi:battery
        value_template: "{{ state_attr('vacuum.alfred', 'battery_level') }}"
        availability_template: "{{ states('vacuum.alfred') not in ['None', 'Unavailable', 'unknown', None] }}"
      argus_battery:
        friendly_name: "Argus Battery"
        unit_of_measurement: "%"
        device_class: "battery"
        #icon: mdi:battery
        value_template: "{{ state_attr('vacuum.argus', 'battery_level') }}"
        availability_template: "{{ states('vacuum.argus') not in ['None', 'Unavailable', 'unknown', None] }}"

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      tamara_or_sander_downstairs:
        value_template: "{{ is_state_attr('device_tracker.tamaraphone', 'ap_mac', 'd0:21:f9:64:06:39') or is_state_attr('device_tracker.blokmeisters21u_2', 'ap_mac', 'd0:21:f9:64:06:39') }}"
        availability_template: "{{ not is_state('device_tracker.tamaraphone', 'unavailable') or not is_state('device_tracker.blokmeisters21u_2', 'unavailable') }}"
##################
#    SWITCHES    #
##################
switch:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    COUNTERS    #
##################
counter:

#####################
#    AUTOMATIONS    #
#####################
automation:
#Auto clean whole house when I'm not home on mon, wed, fri
  - alias: '[home|vacuum]scheduled_cleanup'
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'off'
        # for: 00:10:00
      - platform: time
        at: '07:00:00'
    condition:
      - condition: time
        after: '7:00:00'
        before: '22:00:00'
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'off'
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.alfred_area_cleaned_today
                below: 20
            sequence:
              - service: vacuum.set_fan_speed
                entity_id: vacuum.alfred
                data:
                  fan_speed: Medium
              - service: vacuum.start
                entity_id: vacuum.alfred
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.argus_area_cleaned_today
                below: 20
            sequence:
              - service: vacuum.set_fan_speed
                entity_id: vacuum.argus
                data:
                  fan_speed: Medium
              - service: vacuum.start
                entity_id: vacuum.argus
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.consuela_area_cleaned_today
                below: 20
            sequence:
              - service: vacuum.set_fan_speed
                entity_id: vacuum.consuela
                data:
                  fan_speed: Medium
              - service: vacuum.start
                entity_id: vacuum.consuela
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "Started scheduled cleanup"
          title: "Home Assistant - Vacuum"
          data:
            group: info
            tag: vacuum
            icon_url: local/icons/robot-vacuum.png
            timeout: 1800

  - alias: '[home|vacuum]backup cleanup' #If we stay home until 15:00, be more agressive in trying to find a cleaning slot
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.tamara_or_sander_downstairs
        to: 'off'
        for:
          minutes: 15
      - platform: time
        at: '15:00:00'
    condition:
      - condition: time
        after: '15:00:00'
        before: '22:00:00'
      - condition: numeric_state
        entity_id: sensor.argus_area_cleaned_today
        below: 20
      - condition: state
        entity_id: binary_sensor.tamara_or_sander_downstairs
        state: 'off'
        for:
          minutes: 15
    action:
      - service: vacuum.set_fan_speed
        entity_id: vacuum.argus
        data:
          fan_speed: Medium
      - service: vacuum.start
        entity_id: vacuum.argus

  - alias: '[home|vacuum]Drive Consuela to Hallway when Dust Bin is full'
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: vacuum.consuela
        attribute: battery_level
        above: 99
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'on'
      - platform: time
        at: "9:00:00"
    condition:
      - condition: numeric_state
        entity_id: sensor.consuela_area_cleaned_since_last_empty_bin
        above: 100
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
      - condition: numeric_state
        entity_id: vacuum.consuela
        attribute: battery_level
        above: 99
      - condition: time
        after: "9:00:00"
        before: "21:00:00"
    action:
      - service: script.consuela_goto_hallway
      - wait_for_trigger:
          - platform: state
            entity_id: vacuum.consuela
            to: 'returning'
      - service: input_number.set_value
        data:
          entity_id: input_number.consuela_area_cleaned_at_last_empty_bin
          value: "{{ states('sensor.consuela_total_clean_area') }}"

  - alias: '[home|vacuum]Drive Alfred to Hallway when Dust Bin is full'
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: vacuum.alfred
        attribute: battery_level
        above: 99
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'on'
      - platform: time
        at: "9:00:00"
    condition:
      - condition: numeric_state
        entity_id: sensor.alfred_area_cleaned_since_last_empty_bin
        above: 100
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
      - condition: numeric_state
        entity_id: vacuum.alfred
        attribute: battery_level
        above: 99
      - condition: time
        after: "9:00:00"
        before: "21:00:00"
    action:
      - service: script.alfred_goto_hallway
      - wait_for_trigger:
          - platform: state
            entity_id: vacuum.alfred
            to: 'returning'
      - service: input_number.set_value
        data:
          entity_id: input_number.alfred_area_cleaned_at_last_empty_bin
          value: "{{ states('sensor.alfred_total_clean_area') }}"

  - alias: '[home|vacuum]Drive Argus to Hallway when Dust Bin is full'
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: vacuum.argus
        attribute: battery_level
        above: 99
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'on'
      - platform: time
        at: "9:00:00"
    condition:
      - condition: numeric_state
        entity_id: sensor.argus_area_cleaned_since_last_empty_bin
        above: 100
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
      - condition: numeric_state
        entity_id: vacuum.argus
        attribute: battery_level
        above: 99
      - condition: time
        after: "9:00:00"
        before: "21:00:00"
    action:
      - service: script.argus_goto_kitchen
      - wait_for_trigger:
          - platform: state
            entity_id: vacuum.argus
            to: 'returning'
      - service: input_number.set_value
        data:
          entity_id: input_number.argus_area_cleaned_at_last_empty_bin
          value: "{{ states('sensor.argus_total_clean_area') }}"

  - alias: '[home|vacuum] Button control vacuum'
    mode: restart
    trigger:
      - platform: event
        event_type: deconz_event
        event_data:
          id: vacuum_smart_switch
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" #single
              - condition: template
                value_template: "{{ not is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') }}"
            sequence:
              - service: vacuum.start
                entity_id: vacuum.xiaomi_vacuum_cleaner
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" #single
              - condition: state
                entity_id: vacuum.xiaomi_vacuum_cleaner
                state: cleaning
            sequence:
              - service: vacuum.pause
                entity_id: vacuum.xiaomi_vacuum_cleaner
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1004 }}" #double
              - condition: state
                entity_id: vacuum.xiaomi_vacuum_cleaner
                state: docked
            sequence:
              - service: automation.trigger
                data:
                  entity_id: automation.home_vacuum_counter_drive_to_trashbin
                  skip_condition: true
              - wait_for_trigger:
                  platform: state
                  entity_id: vacuum.xiaomi_vacuum_cleaner
                  to: 'Docked'
              - service: input_number.set_value
                data:
                  entity_id: input_number.area_cleaned_at_last_empty_bin
                  value: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','total_cleaned_area') }}"
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 1004 }}" #double
              - condition: template
                value_template: "{{ not is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') }}"
            sequence:
              - service: vacuum.return_to_base
                entity_id: vacuum.xiaomi_vacuum_cleaner

  - alias: '[home|vacuum]reset_area_cleaned_input_number'
    trigger:
      platform: time
      at: '00:00:01'
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.consuela_area_cleaned_at_start_of_day
          value: "{{ states('sensor.consuela_total_clean_area') }}"
      - service: input_number.set_value
        data:
          entity_id: input_number.argus_area_cleaned_at_start_of_day
          value: "{{ states('sensor.argus_total_clean_area') }}"
      - service: input_number.set_value
        data:
          entity_id: input_number.alfred_area_cleaned_at_start_of_day
          value: "{{ states('sensor.alfred_total_clean_area') }}"
########## NOTIFICATIONS ##########
#Send a notification to Ariela when Consuela is done cleaning. Uses state of vacuum.xiaomi_vacuum_cleaner
  - alias: '[home|vacuum]notify_phone'
    trigger:
      platform: state
      entity_id: vacuum.xiaomi_vacuum_cleaner
      to: 'charging'
    action:
      service: script.vacuum_message_done_cleaning

  - alias: '[home|vacuum]Notify Phone if Vacuum is in Error'
    id: notifyvacuumerror
    mode: parallel
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "error"
        id: "Consuela"
      - platform: state
        entity_id: vacuum.argus
        to: "error"
        id: "Argus"
      - platform: state
        entity_id: vacuum.alfred
        to: "error"
        id: "Alfred"
      # - platform: state
      #   entity_id:
      #     - vacuum.xiaomi_vacuum_cleaner
      #     - vacuum.argus
      #     - vacuum.alfred
      #   to: 'error'
    action:
      - variables:
          vacuumentityid: "{{ trigger.entity_id }}"
      - service: camera.snapshot
        data:
          entity_id: "camera.{{ vacuumentityid[7:] }}_map"
          filename: "/config/www/tmp/snapshot_vacuum_error.jpg"
      - delay:
          seconds: 5
      - service: notify.mobile_app_blokmeisters21u
        data:
          title: "Error with {{ trigger.id }}"
          message: "Vacuum {{ trigger.id }} has state {{ trigger.to_state.state }}!"
          data:
            group: vacuum
            tag: vacuumerror
            icon_url: local/icons/robot-vacuum.png
            image: "/local/tmp/snapshot_vacuum_error.jpg"
      - wait_template: "{{ not is_state( vacuumentityid, 'error' ) }}"
      # - wait_for_trigger:
      #     - platform: state
      #       entity_id: "{{ vacuumentityid }}"
      #       to: "error"
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "clear_notification"
          data:
            tag: vacuumerror

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  vacuum_automations:
    name: "Vacuum Automations Group"
    entities:
      - automation.home_vacuum_scheduled_cleanup
      - automation.home_vacuum_backup_cleanup
      - automation.home_vacuum_drive_alfred_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_drive_argus_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_drive_consuela_to_hallway_when_dust_bin_is_full
      - automation.home_vacuum_reset_area_cleaned_input_number
#################
#    SCRIPTS    #
#################
script:
  # vacuum_around_litterbox_twice:
  #   alias: "Clean around litterbox"
  #   sequence:
  #   - service: xiaomi_miio.vacuum_clean_zone
  #     data:
  #       entity_id: vacuum.xiaomi_vacuum_cleaner
  #       repeats: 2
  #       zone: [[16618,28223,18568,29623]]

  vacuum_entry_twice:
    alias: "Clean Entry"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[19889,27925,23624,29138]]
  vacuum_kitchen_twice:
    alias: "Clean kitchen"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[20637,25649,23590,27964]]
  vacuum_study_twice:
    alias: "Clean study"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[24672,21043,27477,26937]]
  vacuum_guestroom_twice:
    alias: "Clean Guest Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[24672,26937,27651,30439]]
  vacuum_tamarasroom_twice:
    alias: "Clean Tamara's Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[27563,21239,29912,25220]]
  vacuum_washroom_twice:
    alias: "Clean Wash Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.alfred
        repeats: 2
        zone: [[27565,28133,29848,30439]]
  vacuum_bedroom_twice:
    alias: "Clean bedroom"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.consuela
        repeats: 2
        zone: [[26952,24836,30911,30071]]
  vacuum_bathroom_twice:
    alias: "Clean bathroom"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.consuela
        repeats: 2
        zone: [[21388,27120,23885,30072]]
  vacuum_livingroom_twice:
    alias: "Clean Living Room"
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.argus
        repeats: 2
        zone: [[23482,25044,29387,30204]]

  alfred_goto_hallway:
    alias: "Alfred go to Hallway"
    sequence:
    - service: xiaomi_miio.vacuum_goto
      data:
        entity_id: vacuum.alfred
        x_coord: 28391
        y_coord: 26350
  consuela_goto_hallway:
    alias: "Consuela go to Kitchen"
    sequence:
    - service: xiaomi_miio.vacuum_goto
      data:
        entity_id: vacuum.consuela
        x_coord: 25226
        y_coord: 28459
  argus_goto_kitchen:
    alias: "Argus go to Kitchen"
    sequence:
    - service: xiaomi_miio.vacuum_goto
      data:
        entity_id: vacuum.argus
        x_coord: 21407
        y_coord: 27458

  call_cleaning_loop:
    alias: "Calls the cleaning loop"
    mode: queued
    sequence:
      - condition: template
        value_template: "{{ not is_state('input_select.vacuum_area_coordinates', '16') }}"
      - service: script.turn_on
        data:
          entity_id: script.clean_next_area

  clean_next_area:
    alias: "cleans the next area"
    mode: queued
    sequence:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: app_segment_clean
          params: >-
            {{states('input_select.vacuum_room_numbers')|int}}
      - wait_template: "{{ is_state_attr('vacuum.xiaomi_vacuum_cleaner','status','Returning home') }}"
      - service: input_select.select_next
        data:
          entity_id: input_select.vacuum_room_numbers
      - service: script.turn_on
        data:
          entity_id: script.call_cleaning_loop
