homeassistant:
  customize_glob:
    "switch.blitzwolf_*":
      icon: mdi:power-socket-eu
    "sensor.blitzwolf_*_energy_power":
      icon: mdi:lightning-bolt
    "sensor.blitzwolf_*_energy_total":
      icon: mdi:lightning-bolt
    "sensor.blitzwolf_*_energy_today":
      icon: mdi:lightning-bolt

  customize:
    sensor.waterverbruik_vandaag:
      icon: mdi:water
    sensor.water_consumption_per_hour:
      icon: mdi:water

powercalc:

template:
  - sensor:
      - name: "Known Power"
        unit_of_measurement: 'W'
        device_class: power
        icon: mdi:meter-electric
        unique_id: yaml_template_known_power
        state: >-
          {{ expand('group.power_entities') |rejectattr('domain','eq','group')
                                            |rejectattr('state', 'in', ['unavailable', 'unknown', 'none'])|map(attribute='state')|map('float')|sum|round() }}
    # trigger:
    #   - platform: time_pattern
    #     seconds: /1
  - sensor:
      - name: "Unknown Power"
        unit_of_measurement: 'W'
        device_class: power
        icon: mdi:meter-electric
        unique_id: yaml_template_unknown_power
        state: >-
          {{ states('sensor.total_power_consumption_watt')|float - states('sensor.known_power')|float|round() }}
        #availability_template: "{{ states('sensor.total_power_consumption_watt')|is_number and states('sensor.known_power')|is_number }}"
    # trigger:
    #   - platform: time_pattern
    #     seconds: /1

  - trigger:
      - platform: time_pattern
        seconds: /5
    sensor:
        # Use template below to find all shelly switches
        # {{ states.switch 
        #   | map(attribute='entity_id') 
        #   | select('match', 'switch.shelly') 
        #   | reject('search', '_detached_mode') 
        #   | sort() | join('\n - ') }}
      - name: "Shellies Background Power Estimate"
        unit_of_measurement: 'W'
        device_class: power
        icon: mdi:meter-electric
        unique_id: yaml_template_shellies_background_power_estimate
        state: >-
            {% set switches = [
              'switch.shelly_study',
              'switch.shelly_hallway_2nd_floor',
              'switch.shelly_hallway_1st_floor',
              'switch.shelly_washroom',
              'switch.shelly_porch',
              'switch.shelly_living_room',
              'switch.shelly_entry',
              'switch.shelly_kitchen',
              'switch.shelly_back_garden',
              'switch.shelly_baby_room',
              'switch.shelly_closet',
              'switch.shelly_guest_room',
              'switch.shelly_bathroom_1'
            ] %}
            {% set on_count = switches | select('is_state', 'on') | list | count %}
            {% set off_count = switches | select('is_state', 'off') | list | count %}
            
            {% set total_power = (on_count * 0.70) + (off_count * 0.40) %}
            
            {{ total_power | round(2) }}
        attributes:
          unavailable_shellies: >-
            {% set switches = [
              'switch.shelly_study',
              'switch.shelly_hallway_2nd_floor',
              'switch.shelly_hallway_1st_floor',
              'switch.shelly_washroom',
              'switch.shelly_porch',
              'switch.shelly_living_room',
              'switch.shelly_entry',
              'switch.shelly_kitchen',
              'switch.shelly_back_garden',
              'switch.shelly_baby_room',
              'switch.shelly_closet',
              'switch.shelly_guest_room',
              'switch.shelly_bathroom_1'
            ] %}
            {{ switches | select('is_state', 'unavailable') | list | count }}

  - trigger:
      - platform: time
        at:
          - "15:05"
          - "8:05"
      # - platform: time_pattern
      #   minutes: "/30"
    sensor:
      - name: "Cheapest Night Price"
        unique_id: "cheapest_night_price_sensor"
        unit_of_measurement: '€'
        state: >
          {%- set current_time = now() -%}
          {%- set ns = namespace(cheapest=None) -%}
          {%- if current_time.hour >= 15 -%}
            {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') + state_attr('sensor.nordpool_energy_price', 'raw_tomorrow') -%}
          {%- else -%}
            {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') -%}
          {%- endif -%}
          {%- for price in prices -%}
            {%- if current_time.hour < 15 and price.start.hour >= 21 or current_time.hour >= 15 and price.start.hour < 8 -%}
              {%- if ns.cheapest is none or price.value < ns.cheapest.value -%}
                {%- set ns.cheapest = price -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{- ns.cheapest.value if ns.cheapest else 'Unavailable' -}}
        attributes:
          timestamp_of_cheapest_time: >
            {%- set current_time = now() -%}
            {%- set ns = namespace(cheapest=None) -%}
            {%- if current_time.hour >= 15 -%}
              {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') + state_attr('sensor.nordpool_energy_price', 'raw_tomorrow') -%}
            {%- else -%}
              {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') -%}
            {%- endif -%}
            {%- for price in prices -%}
              {%- if current_time.hour < 15 and price.start.hour >= 21 or current_time.hour >= 15 and price.start.hour < 8 -%}
                {%- if ns.cheapest is none or price.value < ns.cheapest.value -%}
                  {%- set ns.cheapest = price -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
            {{- ns.cheapest.start.strftime('%Y-%m-%d %H:%M') if ns.cheapest else 'Unavailable' -}}
          cheapest_hour: >
            {%- set current_time = now() -%}
            {%- set ns = namespace(cheapest=None) -%}
            {%- if current_time.hour >= 15 -%}
              {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') + state_attr('sensor.nordpool_energy_price', 'raw_tomorrow') -%}
            {%- else -%}
              {%- set prices = state_attr('sensor.nordpool_energy_price', 'raw_today') -%}
            {%- endif -%}
            {%- for price in prices -%}
              {%- if current_time.hour < 15 and price.start.hour >= 21 or current_time.hour >= 15 and price.start.hour < 8 -%}
                {%- if ns.cheapest is none or price.value < ns.cheapest.value -%}
                  {%- set ns.cheapest = price -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
            {{- ns.cheapest.start.hour if ns.cheapest else 'Unavailable' -}}
          whole_night_included: >
            {{- 'Yes' if now().hour >= 15 else 'No' -}}

  - sensor:
      - name: "Lowest Quartile Electricity Price Today"
        #unique_id: "cheapest_night_price_sensor"
        unit_of_measurement: '€'
        state: "{{ (state_attr('sensor.nordpool_energy_price','today') | sort())[5] }}"
        attributes:
          difference_to_minimum: "{{ (state_attr('sensor.nordpool_energy_price','today') | sort())[5] - (state_attr('sensor.nordpool_energy_price','today') | min()) }}"
          ratio_to_minimum: "{{ ((state_attr('sensor.nordpool_energy_price','today') | sort())[5] / (state_attr('sensor.nordpool_energy_price','today') | min())) | round(3) }}"
        availability: "{{ state_attr('sensor.nordpool_energy_price','today') is not none }}"
      - name: "Highest Quartile Electricity Price Today"
        #unique_id: "cheapest_night_price_sensor"
        unit_of_measurement: '€'
        state: "{{ (state_attr('sensor.nordpool_energy_price','today') | sort())[17] }}"
        attributes:
          difference_to_maximum: "{{ (state_attr('sensor.nordpool_energy_price','today') | max()) - (state_attr('sensor.nordpool_energy_price','today') | sort())[17] }}"
          ratio_to_maximum: "{{ ((state_attr('sensor.nordpool_energy_price','today') | sort())[17] / (state_attr('sensor.nordpool_energy_price','today') | max())) | round(3) }}"
        availability: "{{ state_attr('sensor.nordpool_energy_price','today') is not none }}"
      - name: "Interquartile Range Electricity Price Today"
        #unique_id: "cheapest_night_price_sensor"
        unit_of_measurement: '€'
        state: "{{ (state_attr('sensor.nordpool_energy_price','today') | sort())[17] - (state_attr('sensor.nordpool_energy_price','today') | sort())[5] }}"
        attributes:
          difference_to_range: "{{ (((state_attr('sensor.nordpool_energy_price','today') | max()) - (state_attr('sensor.nordpool_energy_price','today') | min())) - ((state_attr('sensor.nordpool_energy_price','today') | sort())[17] - (state_attr('sensor.nordpool_energy_price','today') | sort())[5])) | round(3) }}"
          ratio_to_range: "{{ (((state_attr('sensor.nordpool_energy_price','today') | sort())[17] - (state_attr('sensor.nordpool_energy_price','today') | sort())[5]) / ((state_attr('sensor.nordpool_energy_price','today') | max()) - (state_attr('sensor.nordpool_energy_price','today') | min()))) | round(3)}}"
        availability: "{{ state_attr('sensor.nordpool_energy_price','today') is not none }}"
      - name: "Total Range Electricity Price Today"
        #unique_id: "cheapest_night_price_sensor"
        unit_of_measurement: '€'
        state: "{{ (state_attr('sensor.nordpool_energy_price','today') | max()) - (state_attr('sensor.nordpool_energy_price','today') | min()) }}"
        availability: "{{ state_attr('sensor.nordpool_energy_price','today') is not none }}"

#######################
#    INPUT NUMBERS    #
#######################
input_number:

#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      net_energy_usage:
        friendly_name: "Net Energy Usage"
        icon_template: mdi:flash
        unit_of_measurement: 'kW'
        value_template: >-
          {{ states( 'sensor.electricity_meter_power_consumption' )|float(0) - states( 'sensor.electricity_meter_power_production' )|float(0) }}
        availability_template: "{{ states('sensor.electricity_meter_power_consumption')|is_number and states('sensor.electricity_meter_power_production')|is_number }}"
      electricity_meter_power_watt:
        friendly_name: "Electricity Meter Power (W)"
        icon_template: mdi:flash-outline
        value_template: "{{ states('sensor.electricity_meter_power_consumption') | float(0) * 1000 | float | round(2) }}"
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.electricity_meter_power_consumption')|is_number }}"
      electricity_meter_power_production_watt:
        friendly_name: "Electricity Meter Power Production (W)"
        icon_template: mdi:flash-outline
        value_template: "{{ states('sensor.electricity_meter_power_production') | float * 1000 }}"
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.electricity_meter_power_production')|is_number }}"
      total_power_consumption_watt:
        friendly_name: "Total Power Consumption (W)"
        icon_template: mdi:flash-outline
        value_template: >-
          {% if states('sensor.pv_power')|is_number %}
            {{ (states('sensor.electricity_meter_power_consumption')|float - states('sensor.electricity_meter_power_production')|float + states('sensor.pv_power')|float/1000)*1000 }}
          {% else %}
            {{ (states('sensor.electricity_meter_power_consumption')|float - states('sensor.electricity_meter_power_production')|float)*1000 }}
          {% endif %}
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.electricity_meter_power_consumption')|is_number and states('sensor.electricity_meter_power_production')|is_number }}"
      total_power_consumption_kilowatt:
        friendly_name: "Total Power Consumption (kW)"
        icon_template: mdi:flash-outline
        value_template: "{{ states('sensor.total_power_consumption_watt')|float/1000 }}"
        unit_of_measurement: "kW"
        availability_template: "{{ states('sensor.total_power_consumption_watt')|is_number }}"


    #Fitted powers using model based on temperatures
      heatpump_tapwater_power_estimate:
        value_template: >-
          {% if is_state('binary_sensor.heatpump_tapwater_recirculation_pump', 'on')%}
            {% if (255.5 + (states('sensor.heatpump_tapwater_temperature')|float * 16.66)) > (states('sensor.electricity_meter_power_consumption_phase_l2')|float * 1000) %}
              {{ states('sensor.electricity_meter_power_consumption_phase_l2')|float*1000 }}
            {% else %}
              {{ 255.5 + (states('sensor.heatpump_tapwater_temperature')|float * 16.66) }}
            {% endif %}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.heatpump_tapwater_temperature')|is_number }}" #Should also include recirculation pump being available
      heatpump_heating_power_estimate:
        value_template: >-
          {% if is_state('binary_sensor.heatpump_additional_circulation_pump', 'on') and is_state('binary_sensor.heatpump_tapwater_recirculation_pump', 'off') %}
            {% if (-1323.9 + (states('sensor.heatpump_hot_gas_temperature')|float * 38.59)) > (states('sensor.electricity_meter_power_consumption_phase_l2')|float * 1000) %}
              {{ states('sensor.electricity_meter_power_consumption_phase_l2')|float*1000 }}
            {% elif (-1323.9 + (states('sensor.heatpump_hot_gas_temperature')|float * 38.59)) < 0 %}
              0
            {% else %}
              {{ -1323.9 + (states('sensor.heatpump_hot_gas_temperature')|float * 38.59) }}
            {% endif %}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.heatpump_hot_gas_temperature')|is_number }}" #Should also include recirculation pump being available

    #Actual data from shelly sensor
    #If power is being used but no tapwater or heating, then equally divide between the two
      heatpump_tapwater_power:
        value_template: >-
          {% if is_state('sensor.heatpump_status', 'hot water')%}
            {{ states('sensor.shelly_heatpump_energy_power') }}
          {% elif is_state('sensor.heatpump_status', 'heating') %}
            0
          {% else %}
            {{ (states('sensor.shelly_heatpump_energy_power')|float())/2 }}
          {% endif %}
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.shelly_heatpump_energy_power')|is_number }}" #Should also include sensor.heatpump_status being available
      heatpump_heating_power:
        value_template: >-
          {% if is_state('sensor.heatpump_status', 'heating')%}
            {{ states('sensor.shelly_heatpump_energy_power') }}
          {% elif is_state('sensor.heatpump_status', 'hot water')%}
            0
          {% else %}
            {{ (states('sensor.shelly_heatpump_energy_power')|float())/2 }}
          {% endif %}
        unit_of_measurement: "W"
        availability_template: "{{ states('sensor.shelly_heatpump_energy_power')|is_number }}" #Should also include sensor.heatpump_status being available

      # Template sensor for projected costs per hour
      current_electricity_cost_per_hour:
        friendly_name: "Current Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unit_of_measurement: "€/h"  # Adjust this based on your currency
        value_template: "{{ ((states('sensor.total_power_consumption_watt') | float)/1000 * states('sensor.nordpool_energy_price') | float) | round(3) }}"
        availability_template: "{{ states('sensor.total_power_consumption_watt')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
      # Template sensor for lowest possible costs based on lowest price
      potential_electricity_usage_cost_lowest_price:
        friendly_name: "Potential Electricity Usage Costs (Lowest Price)"
        icon_template: mdi:currency-eur
        unit_of_measurement: "€"  # Adjust this based on your currency
        value_template: "{{ (states('sensor.daily_energy_use') | float * state_attr('sensor.nordpool_energy_price', 'min') | float ) | round(3) }}"
        availability_template: "{{ states('sensor.daily_energy_use')|is_number and state_attr('sensor.nordpool_energy_price', 'min')|is_number }}"
      # Template sensor for lowest possible costs based on lowest price
      potential_electricity_usage_cost_highest_price:
        friendly_name: "Potential Electricity Usage Costs (Highest Price)"
        icon_template: mdi:currency-eur
        unit_of_measurement: "€"  # Adjust this based on your currency
        value_template: "{{ (states('sensor.daily_energy_use') | float * state_attr('sensor.nordpool_energy_price', 'max') | float ) | round(3) }}"
        availability_template: "{{ states('sensor.daily_energy_use')|is_number and state_attr('sensor.nordpool_energy_price', 'max')|is_number }}"
      potential_electricity_usage_cost_mean_price:
        friendly_name: "Potential Electricity Usage Costs (Mean Price)"
        icon_template: mdi:currency-eur
        unit_of_measurement: "€"  # Adjust this based on your currency
        value_template: "{{ (states('sensor.daily_energy_use') | float * state_attr('sensor.nordpool_energy_price', 'mean') | float ) | round(3) }}"
        availability_template: "{{ states('sensor.daily_energy_use')|is_number and state_attr('sensor.nordpool_energy_price', 'mean')|is_number }}"
      # # Template sensor for potential savings based on lowest price
      # potential_savings_lowest_price:
      #   friendly_name: "Potential Savings (Lowest Price)"
      #   unit_of_measurement: "currency"  # Adjust this based on your currency
      #   value_template: "{{ (states('sensor.current_total_usage') | float * states('sensor.lowest_price') | float) - states('sensor.projected_total_cost_per_day') | float }}"
      # # Template sensor for potential savings based on average price
      # potential_savings_average_price:
      #   friendly_name: "Potential Savings (Average Price)"
      #   unit_of_measurement: "currency"  # Adjust this based on your currency
      #   value_template: "{{ (states('sensor.current_total_usage') | float * states('sensor.current_electricity_price') | float) - states('sensor.projected_total_cost_per_day') | float }}"
      # # Template sensor for already saved costs
      # already_saved_costs:
      #   friendly_name: "Already Saved Costs"
      #   unit_of_measurement: "currency"  # Adjust this based on your currency
      #   value_template: "{{ states('sensor.projected_total_cost_per_day') | float - (states('sensor.current_total_usage') | float * states('sensor.current_electricity_price') | float) }}"

      # Production earnings per hour sensor
      solar_panels_production_earnings_hourly:
        friendly_name: "Solar Panels Production Earnings per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_solar_panel_benefit_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.solar_panel_power_production_available')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.solar_panel_power_production_available') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"

      net_electricity_cost_per_hour:
        friendly_name: "Net Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_net_electricity_cost_per_hour"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.current_electricity_cost_per_hour')|is_number and states('sensor.solar_panels_production_earnings_hourly')|is_number }}"
        value_template: "{{ (states('sensor.current_electricity_cost_per_hour')|float(0) - states('sensor.solar_panels_production_earnings_hourly')|float(0))|round(3) }}"

      # Device cost per hour sensors
      unknown_power_energy_cost_hourly:
        friendly_name: "Unknown Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_unknown_power_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.unknown_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.unknown_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_10gb_switch_energy_cost_hourly:
        friendly_name: "Blitzwolf 10GB Switch Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_10gb_switch_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_10gb_switch_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_10gb_switch_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_3dprinter_energy_cost_hourly:
        friendly_name: "Blitzwolf 3D Printer Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_3dprinter_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_3d_printer_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_3d_printer_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_ambilight_amplifier_energy_cost_hourly:
        friendly_name: "Blitzwolf Ambilight Amplifier Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_ambilight_amplifier_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.blitzwolf_ambilight_amplifier_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.blitzwolf_ambilight_amplifier_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_computer_energy_cost_hourly:
        friendly_name: "Blitzwolf Computer Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_computer_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_study_desk_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_study_desk_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_dishwasher_energy_cost_hourly:
        friendly_name: "Blitzwolf Dishwasher Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_dishwasher_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_dishwasher_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_dishwasher_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_nas_energy_cost_hourly:
        friendly_name: "Blitzwolf NAS Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_nas_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_nas_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_nas_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_nuc_energy_cost_hourly:
        friendly_name: "Blitzwolf NUC Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_nuc_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_nuc_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_nuc_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_poe_switch_energy_cost_hourly:
        friendly_name: "Blitzwolf POE Switch Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_poe_switch_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_poe_switch_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_poe_switch_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_router_energy_cost_hourly:
        friendly_name: "Blitzwolf Router Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_router_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_router_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_router_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_washingmachine_energy_cost_hourly:
        friendly_name: "Blitzwolf Washing Machine Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_washingmachine_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_washing_machine_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_washing_machine_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_watercooker_energy_cost_hourly:
        friendly_name: "Blitzwolf Water Cooker Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_watercooker_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_watercooker_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_watercooker_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      blitzwolf_heatpump_energy_cost_hourly:
        friendly_name: "Blitzwolf Heat Pump Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_blitzwolf_heatpump_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.blitzwolf_heatpump_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.blitzwolf_heatpump_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      plug_study_workbench_energy_cost_hourly:
        friendly_name: "Plug Study Workbench Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_plug_study_workbench_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_study_workbench_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_study_workbench_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      plug_tv_energy_cost_hourly:
        friendly_name: "Plug TV Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_plug_tv_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_tv_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_tv_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      all_lights_power_estimate_energy_cost_hourly:
        friendly_name: "All Lights Power Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_all_lights_power_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.all_lights_power_estimate_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.all_lights_power_estimate_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      heatpump_heating_energy_cost_hourly:
        friendly_name: "Heat Pump Heating Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_heatpump_heating_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.heatpump_heating_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.heatpump_heating_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      heatpump_tapwater_energy_cost_hourly:
        friendly_name: "Heat Pump Tap Water Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_heatpump_tapwater_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.heatpump_tapwater_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.heatpump_tapwater_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      ventilation_power_estimate_energy_cost_hourly:
        friendly_name: "Ventilation Power Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_ventilation_power_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.ventilation_power_estimate')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.ventilation_power_estimate') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      electric_car_estimate_energy_cost_hourly:
        friendly_name: "Electric Car Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_electric_car_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.plug_electric_car_power')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.plug_electric_car_power') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"

      alfred_power_estimate_energy_cost_hourly:
        friendly_name: "Alfred Power Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_alfred_power_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.alfred_power_estimate')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.alfred_power_estimate') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      argus_power_estimate_energy_cost_hourly:
        friendly_name: "Argus Power Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_argus_power_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.argus_power_estimate')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.argus_power_estimate') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"
      moeke_power_estimate_energy_cost_hourly:
        friendly_name: "Moeke Power Estimate Electricity Cost per Hour"
        icon_template: mdi:currency-eur
        unique_id: "yaml_template_sensor_moeke_power_estimate_energy_cost_hourly"
        unit_of_measurement: "€/h"
        availability_template: "{{ states('sensor.moeke_power_estimate')|is_number and states('sensor.nordpool_energy_price')|is_number }}"
        value_template: "{{ (states('sensor.moeke_power_estimate') | float * states('sensor.nordpool_energy_price') | float) / 1000 }}"

      solar_panel_power_production_available:
        friendly_name: "Solar Panel Power Production"
        unique_id: "yaml_template_solar_panel_power_production_available"
        unit_of_measurement: "W"
        value_template: >-
          {% if states('sensor.pv_power') in ['unavailable', 'uknown', None] %}
            0
          {% else %}
            {{ states('sensor.pv_power') }}
          {% endif %}

  #Total cost sensors for above template cost per hour sensors
  - platform: integration
    source: sensor.unknown_power_energy_cost_per_hour
    name: Unknown Power Total Electricity Cost
    unique_id: yaml_integration_unknown_power_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_10gb_switch_electricity_cost_per_hour
    name: Blitzwolf 10GB Switch Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_10gb_switch_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_3dprinter_electricity_cost_per_hour
    name: Blitzwolf 3D Printer Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_3dprinter_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_ambilight_amplifier_electricity_cost_per_hour
    name: Blitzwolf Ambilight Amplifier Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_ambilight_amplifier_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_computer_electricity_cost_per_hour
    name: Blitzwolf Computer Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_computer_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_dishwasher_electricity_cost_per_hour
    name: Blitzwolf Dishwasher Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_dishwasher_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_nas_electricity_cost_per_hour
    name: Blitzwolf NAS Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_nas_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_nuc_electricity_cost_per_hour
    name: Blitzwolf NUC Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_nuc_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_poe_switch_electricity_cost_per_hour
    name: Blitzwolf POE Switch Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_poe_switch_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_router_electricity_cost_per_hour
    name: Blitzwolf Router Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_router_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_washingmachine_electricity_cost_per_hour
    name: Blitzwolf Washing Machine Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_washingmachine_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_watercooker_electricity_cost_per_hour
    name: Blitzwolf Water Cooker Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_watercooker_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.blitzwolf_heatpump_electricity_cost_per_hour
    name: Blitzwolf Heat Pump Total Electricity Cost
    unique_id: yaml_integration_blitzwolf_heatpump_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.plug_study_workbench_energy_cost_hourly
    name: Plug Study Workbench Total Electricity Cost
    unique_id: yaml_integration_plug_study_workbench_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.plug_tv_energy_cost_hourly
    name: Plug TV Total Electricity Cost
    unique_id: yaml_integration_plug_tv_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.electric_car_estimate_electricity_cost_per_hour
    name: Electric Car Total Electricity Cost
    unique_id: yaml_integration_electric_car_total_electricity_cost
    unit_time: h
    method: left
    round: 2

  - platform: integration
    source: sensor.all_lights_power_estimate_electricity_cost_per_hour
    name: All Lights Power Estimate Total Electricity Cost
    unique_id: yaml_integration_all_lights_power_estimate_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.heatpump_heating_electricity_cost_per_hour
    name: Heat Pump Heating Total Electricity Cost
    unique_id: yaml_integration_heatpump_heating_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.heatpump_tapwater_electricity_cost_per_hour
    name: Heat Pump Tap Water Total Electricity Cost
    unique_id: yaml_integration_heatpump_tapwater_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.ventilation_power_estimate_electricity_cost_per_hour
    name: Ventilation Power Estimate Total Electricity Cost
    unique_id: yaml_integration_ventilation_power_estimate_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.alfred_power_estimate_electricity_cost_per_hour
    name: Alfred Power Estimate Total Electricity Cost
    unique_id: yaml_integration_alfred_power_estimate_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.argus_power_estimate_electricity_cost_per_hour
    name: Argus Power Estimate Total Electricity Cost
    unique_id: yaml_integration_argus_power_estimate_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.moeke_power_electricity_cost_per_hour
    name: Moeke Power Estimate Total Electricity Cost
    unique_id: yaml_integration_moeke_power_estimate_total_electricity_cost
    unit_time: h
    method: left
    round: 2
  - platform: integration
    source: sensor.solar_panels_production_earnings_per_hour
    name: Solar Panels Total Electricity Earnings
    unique_id: yaml_integration_solar_panel_total_electricity_benefits
    unit_time: h
    method: left
    round: 2

  - platform: integration # New integration sensor for total net electricity cost
    source: sensor.net_electricity_cost_per_hour
    name: Total Net Electricity Cost
    unique_id: yaml_integration_sensor_total_net_electricity_cost
    unit_time: h
    method: left
    round: 2

  - platform: integration  #Energy costs
    source: sensor.current_electricity_cost_per_hour
    name: "Total Electricity Cost"
    method: left
    unit_time: h
    round: 2
# Integration sensors for power consumption W -> kWh
  - platform: integration
    source: sensor.total_power_consumption_watt
    name: Total Energy Usage
    unique_id: integration_total_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10
  - platform: integration
    source: sensor.heatpump_tapwater_power_estimate
    name: Tapwater Energy
    unique_id: sensor_integration_heatpump_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10
  - platform: integration
    source: sensor.unknown_power
    name: Unknown Energy
    unique_id: integration_unknown_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10
  - platform: integration
    name: Shelly PM Lights Energy
    source: sensor.shelly_pm_lights_power
    unique_id: yaml_integration_shelly_pm_lights_energy
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10
  - platform: integration
    name: Shelly Background Energy
    source: sensor.shellies_background_power_estimate
    unique_id: yaml_integration_shellies_background_energy
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10

  - platform: integration
    source: sensor.heatpump_tapwater_power
    name: Heatpump Tapwater Energy Usage
    unique_id: integration_heatpump_tapwater_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
  - platform: integration
    source: sensor.heatpump_heating_power
    name: Heatpump Heating Energy Usage
    unique_id: integration_heatpump_heating_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
    max_sub_interval:
      minutes: 10

  - platform: integration
    source: sensor.solar_panel_power_production_available
    name: Solar Panel Energy Production
    unique_id: yaml_integration_solar_panel_energy_production
    unit_time: h #source is in W, this is in kWh.
    unit_prefix: k #source is in W, this is in kWh.
    method: left
    round: 2
    max_sub_interval:
      minutes: 10

# Heat pump:
  - platform: derivative
    source: sensor.heatpump_heat_amount_heating
    name: Heat Pump Heating Power Production
    unit_time: min
    time_window: "00:01:00"
  - platform: derivative
    source: sensor.heatpump_tapwater_heat_amount
    name: Heat Pump Tapwater Power Production
    unit_time: min
    time_window: "00:01:00"

  - platform: filter
    entity_id: sensor.plug_study_desk_power
    name: Averaged Computer Power
    unique_id: filter_sensor_averaged_computer_power
    filters:
      - filter: time_simple_moving_average
        window_size: '00:15'
        precision: 0

  - platform: statistics
    name: "Energy Price Five Day Moving 2 Percentile"
    entity_id: sensor.nordpool_energy_price
    state_characteristic: percentile
    percentile: 2
    precision: 3
    max_age:
      days: 5
  - platform: statistics
    name: "Energy Price Five Day Moving 3 Percentile"
    entity_id: sensor.nordpool_energy_price
    state_characteristic: percentile
    percentile: 3
    precision: 3
    max_age:
      days: 5
  - platform: statistics
    name: "Energy Price Five Day Moving 5 Percentile"
    entity_id: sensor.nordpool_energy_price
    state_characteristic: percentile
    percentile: 5
    precision: 3
    max_age:
      days: 5
  - platform: statistics
    name: "Energy Price Five Day Moving 10 Percentile"
    entity_id: sensor.nordpool_energy_price
    state_characteristic: percentile
    percentile: 10
    precision: 3
    max_age:
      days: 5




  - platform: min_max
    name: Phase 1 Known Power
    unique_id: yaml_minmax_phase_1_known_power
    round_digits: 0
    type: sum
    entity_ids:
      - sensor.plug_10gb_switch_power #in W
      - sensor.plug_3d_printer_power #in W
      - sensor.plug_study_desk_power #in W
      - sensor.plug_study_workbench_power
      - sensor.plug_nas_power #in W
      - sensor.plug_washing_machine_power #in W
      - sensor.plug_watercooker_power #in W
      - sensor.moeke_power_estimate
      - sensor.alfred_power_estimate
      - sensor.argus_power_estimate
      - sensor.blitzwolf_ambilight_amplifier_power
      - sensor.plug_tv_power

  - platform: min_max
    name: Phase 2 Known Power
    unique_id: yaml_minmax_phase_2_known_power
    round_digits: 0
    type: sum
    entity_ids:
      - sensor.plug_dishwasher_power
      - sensor.shelly_heatpump_energy_power #Heatpump

  - platform: min_max
    name: Phase 3 Known Power
    unique_id: yaml_minmax_phase_3_known_power
    round_digits: 0
    type: sum
    entity_ids:
      - sensor.plug_poe_switch_power
      - sensor.plug_router_power
      - sensor.plug_nuc_power
      - sensor.ventilation_power_estimate
      - sensor.blitzwolf_heatpump_power

  - platform: min_max
    name: Shelly PM Lights Power
    #icon: mdi:meter-electric #Icon not yet supported for min_max sensors
    unique_id: yaml_minmax_shelly_pm_lights_power
    round_digits: 0
    type: sum
    entity_ids:
      - sensor.shelly_bathroom_channel_1_power
      - sensor.shelly_bathroom_channel_2_power
      - sensor.shelly_bedroom_power
      - sensor.shelly_dinner_table_power
      - sensor.shelly_tamara_s_room_power

  - platform: filter
    entity_id: sensor.known_power
    name: Averaged Known Power
    #icon: mdi:meter-electric #Icon not yet supported for min_max sensors
    unique_id: yaml_filter_sensor_averaged_known_power
    filters:
      - filter: time_simple_moving_average
        window_size: '00:00:05'
        precision: 1
  - platform: filter
    entity_id: sensor.unknown_power
    name: Averaged Unknown Power
    #icon: mdi:meter-electric #Icon not yet supported for min_max sensors
    unique_id: yaml_filter_sensor_averaged_unknown_power
    filters:
      - filter: time_simple_moving_average
        window_size: '00:00:05'
        precision: 1

# Voltage groups
  - platform: group
    name: Phase 1 Voltage
    #unique_id: phase_1_voltage
    type: median
    ignore_non_numeric: true
    device_class: voltage
    entities:
      - sensor.plug_10gb_switch_voltage
      - sensor.plug_3d_printer_voltage
      - sensor.plug_study_desk_voltage
      - sensor.plug_study_workbench_voltage
      - sensor.plug_nas_voltage
      - sensor.plug_washing_machine_voltage
      - sensor.plug_watercooker_voltage
      - sensor.blitzwolf_ambilight_amplifier_voltage
      - sensor.plug_tv_voltage

  - platform: group
    name: Phase 2 Voltage
    #unique_id: phase_2_voltage
    type: median
    ignore_non_numeric: true
    device_class: voltage
    entities:
      - sensor.plug_dishwasher_voltage
      - sensor.shelly_heatpump_energy_voltage

  - platform: group
    name: Phase 3 Voltage
    #unique_id: phase_3_voltage
    type: median
    ignore_non_numeric: true
    device_class: voltage
    entities:
      - sensor.plug_poe_switch_voltage
      - sensor.plug_router_voltage
      - sensor.plug_nuc_voltage

  - platform: group
    name: Shelly Voltage
    #unique_id: shelly_voltage
    type: median
    ignore_non_numeric: true
    device_class: voltage
    entities:
      - sensor.shelly_bathroom_voltage
      - sensor.shelly_bedroom_voltage
      - sensor.shelly_dinner_table_voltage
      # - sensor.shelly_heatpump_energy_voltage
      - sensor.shelly_tamara_s_room_voltage
      # - sensor.shelly_washroom_relay_supply_voltage


########################
#    BINARY SENSORS    #
########################
binary_sensor:
  # Time of day helper. I use this to check if it's after 15:00 to display tomorrow's energy prices on the dashboard
  - platform: tod
    name: "After 15:00"
    after: "15:00"
    before: "23:59"
    unique_id: yaml_tod_binary_sensor_after_1500
########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "Power state on HA start-up"
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: mqtt.publish
        data:
          topic: "sonoffs/cmnd/state"
          payload: ""

# Example automations.yaml entry
  - id: 'sonoff_firmware_installed'
    alias: Sonoff Firmware Installed
    trigger:
    - event: start
      platform: homeassistant
    action:
    - data:
        payload: '2'
        topic: sonoffs/cmnd/status
      service: mqtt.publish
    initial_state: 'true'

# Example automations.yaml entry
  - alias: "Enable MQTT discovery for all devices"
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: mqtt.publish
        data:
          topic: "cmnd/sonoffs/SetOption19"
          payload: "1"

  - alias: "[power|warning] Send message when power usage is too high and not at home"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.unknown_power
        above: 1500
        for:
          minutes: 1
      - platform: state
        entity_id: binary_sensor.house_occupied
        to: 'off'
    condition:
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.unknown_power
        above: 1500
        # for:
        #   minutes: 1
    action:
      - service: notify.mobile_app_blokmeisters21u
        data:
          title: "Warning: Power Usage!"
          message: "Unknown power is <b>{{ states('sensor.unknown_power') }} W</b> for a total of <b>{{ states('sensor.total_power_consumption_watt') }} W</b>"
          data:
            group: notification
            tag: powerwarning
            clickAction: '/lovelace-dashboard/view/6' # action when clicking main notification
            ledColor: "orange"
            channel: warning
      - delay:
          minutes: 1
      - repeat:
          while:
            - condition: state
              entity_id: binary_sensor.house_occupied
              state: 'off'
            - condition: numeric_state
              entity_id: sensor.unknown_power
              above: 1500
          sequence:
            - service: notify.mobile_app_blokmeisters21u
              data:
                title: "Warning: Power Usage!"
                message: "Unknown power is <b>{{ states('sensor.unknown_power') }} W</b> for a total of <b>{{ states('sensor.total_power_consumption_watt') }} W</b>"
                data:
                  group: notification
                  tag: powerwarning
                  clickAction: '/lovelace-dashboard/view/6' # action when clicking main notification
                  ledColor: "orange"
                  channel: warning
            - delay:
                minutes: 1

  - alias: "[home|power] Turn off solar panels if energy price is below zero"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.nordpool_energy_price
        below: 0
        id: negative_price
      - platform: numeric_state
        entity_id: sensor.nordpool_energy_price
        above: 0
        id: positive_price
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'negative_price' }}"
            sequence:
              - service: number.set_value
                data:
                  value: 0
                target:
                  entity_id:
                    - number.grid_export_limit
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'positive_price' }}"
            sequence:
              - service: number.set_value
                data:
                  value: 3000
                target:
                  entity_id:
                    - number.grid_export_limit

  - alias: "[home|power] Utilize negative electricity prices"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.nordpool_energy_price
        below: 0
        id: negative_price
      - platform: numeric_state
        entity_id: sensor.nordpool_energy_price
        above: 0
        id: positive_price
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'negative_price' }}"
            sequence:
              - parallel:
                  - alias: "Turn off solar panels"
                    sequence:
                      - service: number.set_value
                        continue_on_error: true
                        data:
                          value: 0
                        target:
                          entity_id:
                            - number.grid_export_limit
                      - delay:
                          minutes: 1
                      - service: button.press
                        continue_on_error: true
                        target:
                          entity_id: button.goodwe_stop_inverter
                  - alias: "Max Tapwater Heatup"
                    sequence:
                      - service: number.set_value
                        continue_on_error: true
                        data:
                          value: 1
                        target:
                          entity_id:
                            - number.heatpump_tapwater_hysteresis
                      - service: number.set_value
                        continue_on_error: true
                        data:
                          value: 60
                        target:
                          entity_id:
                            - number.heatpump_tapwater_target_temperature
                  - alias: "Max Ventilation Speed"
                    sequence:
                      - service: number.set_value
                        data:
                          value: "360"
                        target:
                          entity_id: number.override_fan_duration
                      - service: number.set_value
                        data:
                          entity_id: number.override_fan_speed
                          value: 100
                      - service: switch.turn_on
                        continue_on_error: true
                        target:
                          entity_id: switch.fan_speed_override
              - wait_for_trigger:
                  - platform: numeric_state
                    entity_id: sensor.nordpool_energy_price
                    above: 0
                    id: positive_price
              - service: number.set_value
                continue_on_error: true
                data:
                  value: 5
                target:
                  entity_id:
                    - number.heatpump_tapwater_hysteresis
              - service: number.set_value
                continue_on_error: true
                data:
                  value: 45
                target:
                  entity_id:
                    - number.heatpump_tapwater_target_temperature
              - service: switch.turn_off
                continue_on_error: true
                target:
                  entity_id: switch.fan_speed_override
              - service: button.press
                continue_on_error: true
                target:
                  entity_id: button.goodwe_start_inverter
              - service: number.set_value
                continue_on_error: true
                data:
                  value: 5000
                target:
                  entity_id:
                    - number.grid_export_limit
          # - conditions:
          #     - condition: template
          #       value_template: "{{ trigger.id == 'positive_price' }}"
          #   sequence:
          #     - service: number.set_value
          #       data:
          #         value: 3000
          #       target:
          #         entity_id:
          #           - number.grid_export_limit

  # - alias: "[power|watermeter] Save watermeter states to HA"
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.water_meter_main_water_consumption
  #   condition:
  #     - "{{ ( now() - states('sensor.uptime_10')|as_datetime ).seconds > 60 }}"
  #   action:
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.water_meter_daily_consumption
  #         value: "{{ states('sensor.water_meter_daily_water_consumption')|int }}"
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.water_meter_weekly_consumption
  #         value: "{{ states('sensor.water_meter_weekly_water_consumption')|int }}"
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.water_meter_monthly_consumption
  #         value: "{{ states('sensor.water_meter_monthly_water_consumption')|int }}"
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.water_meter_yearly_consumption
  #         value: "{{ states('sensor.water_meter_yearly_water_consumption')|int }}"
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.water_meter_total_consumption
  #         value: "{{ states('sensor.water_meter_main_water_consumption')|int }}"


################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  # meter_readings:
  #   name: Meter readings
  #   entities:
  #     - sensor.timestamp_local
  #     - sensor.timestamp_utc
  #     - sensor.consumption_gas_m3
  #     - sensor.consumption_kwh_high
  #     - sensor.consumption_kwh_low
  #     - sensor.consumption_kw
  #     - sensor.tarifcode
  #     - sensor.record_is_processed
  #     - sensor.consumption_l1_w
  #     - sensor.l1_v
  #     - sensor.l1_a

  power_entities:
    name: Power Entities
    entities:
      # All power entities can be found using the following jinja:
      # {{ states.sensor 
      #    | selectattr('attributes.device_class', 'eq', 'power') 
      #    | map(attribute='entity_id') 
      #    | sort() 
      #    | join('\n - ')
      # }}
      # Shelly bathroom staat er niet bij, dat wordt gedaan door die power integratie
      # Plugs can be obtained using statement below. Replace .plug by .blitzwolf to get the old names
      #   - {{ states.sensor 
      #     | selectattr('entity_id', 'match', '^sensor\.plug_.+_power$') 
      #     | rejectattr('entity_id', 'search', 'apparent') 
      #     | rejectattr('entity_id', 'search', 'reactive') 
      #     | map(attribute='entity_id') 
      #     | sort() 
      #     | join('\n - ')
      #  }}

      - sensor.plug_10gb_switch_power
      - sensor.plug_3d_printer_power
      - sensor.plug_dishwasher_power
      - sensor.plug_electric_car_power
      # - sensor.plug_epaper_ap_power # This is already included through the study workbench
      - sensor.plug_nas_power
      - sensor.plug_nuc_power
      - sensor.plug_poe_switch_power
      - sensor.plug_router_power
      - sensor.plug_study_desk_power
      - sensor.plug_study_workbench_power
      - sensor.plug_tv_power
      - sensor.plug_washing_machine_power
      - sensor.plug_watercooker_power

      - sensor.blitzwolf_ambilight_amplifier_power
      - sensor.blitzwolf_heatpump_power

      # Shellies
      - sensor.shelly_bathroom_channel_1_power
      - sensor.shelly_bathroom_channel_2_power
      - sensor.shelly_bedroom_power
      - sensor.shelly_dinner_table_power
      # - sensor.shelly_heatpump_energy_power #Excluded as this is going through heatpump_heating_power and heatpump_tapwater_power
      - sensor.shelly_tamara_s_room_power
      - sensor.shellies_background_power_estimate

      # Lights from powercalc
      - sensor.all_lights_power_estimate_power
      - sensor.all_standby_power

      - sensor.heatpump_heating_power
      - sensor.heatpump_tapwater_power
      - sensor.ventilation_power_estimate
      # - sensor.alfred_power_estimate #Alfred removed since this is included in study workbench
      - sensor.argus_power_estimate
      - sensor.moeke_power_estimate

  electricity_cost_per_hour_sensors:
    name: Electricity Cost per Hour Sensors
    entities:
      - sensor.blitzwolf_10gb_switch_electricity_cost_per_hour
      - sensor.blitzwolf_3dprinter_electricity_cost_per_hour
      - sensor.blitzwolf_ambilight_amplifier_electricity_cost_per_hour
      - sensor.blitzwolf_computer_electricity_cost_per_hour
      - sensor.blitzwolf_dishwasher_electricity_cost_per_hour
      - sensor.blitzwolf_nas_electricity_cost_per_hour
      - sensor.blitzwolf_nuc_electricity_cost_per_hour
      - sensor.blitzwolf_poe_switch_electricity_cost_per_hour
      - sensor.blitzwolf_router_electricity_cost_per_hour
      - sensor.blitzwolf_washingmachine_electricity_cost_per_hour
      - sensor.blitzwolf_watercooker_electricity_cost_per_hour
      - sensor.blitzwolf_heatpump_electricity_cost_per_hour
      - sensor.plug_study_workbench_energy_cost_hourly
      - sensor.plug_tv_energy_cost_hourly
      - sensor.all_lights_power_estimate_electricity_cost_per_hour
      - sensor.heatpump_heating_electricity_cost_per_hour
      - sensor.heatpump_tapwater_electricity_cost_per_hour
      - sensor.ventilation_power_estimate_electricity_cost_per_hour
      - sensor.alfred_power_estimate_electricity_cost_per_hour
      - sensor.argus_power_estimate_electricity_cost_per_hour
      #- sensor.moeke_power_estimate_electricity_cost_per_hour

  total_electricity_cost_sensors:
    name: Integration Sensors
    entities:
      - sensor.blitzwolf_10gb_switch_total_electricity_cost
      - sensor.blitzwolf_3d_printer_total_electricity_cost
      - sensor.blitzwolf_ambilight_amplifier_total_electricity_cost
      - sensor.blitzwolf_computer_total_electricity_cost
      - sensor.blitzwolf_dishwasher_total_electricity_cost
      - sensor.blitzwolf_nas_total_electricity_cost
      - sensor.blitzwolf_nuc_total_electricity_cost
      - sensor.blitzwolf_poe_switch_total_electricity_cost
      - sensor.blitzwolf_router_total_electricity_cost
      - sensor.blitzwolf_washing_machine_total_electricity_cost
      - sensor.blitzwolf_water_cooker_total_electricity_cost
      - sensor.blitzwolf_heat_pump_total_electricity_cost
      - sensor.plug_study_workbench_total_electricity_cost
      - sensor.plug_tv_total_electricity_cost
      - sensor.all_lights_power_estimate_total_electricity_cost
      - sensor.heat_pump_heating_total_electricity_cost
      - sensor.heat_pump_tap_water_total_electricity_cost
      - sensor.ventilation_power_estimate_total_electricity_cost
      - sensor.alfred_power_estimate_total_electricity_cost
      - sensor.argus_power_estimate_total_electricity_cost
      - sensor.moeke_power_estimate_total_electricity_cost
#################
#    SCRIPTS    #
#################
script:
