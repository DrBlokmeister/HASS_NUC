homeassistant:
  customize: {}

# weather:
#   - platform: buienradar
#     name: 'Home'
#     # Force 'Meetstation Volkel' to be used:
#     forecast: true

# camera:
#   - platform: buienradar

command_line:
  - sensor:
      name: "Precipitation Forecast"
      unique_id: "yaml_command_line_buienradar_api_precip_forecast"
      icon: mdi:weather-rainy
      command: >
        curl -s 'https://gadgets.buienradar.nl/data/raintext/?lat={{ state_attr('zone.home', 'latitude')|round(2) }}&lon={{ state_attr('zone.home', 'longitude')|round(2) }}' | 
        awk -F'|' -v "date=$(date +'%Y-%m-%d')" -v "hour=$(date +'%H')" '
        BEGIN {first = 1; print "{\"precipitation_raw\": ["} 
        {
          if (!first) printf ", "; 
          first = 0; 
          split($2, t, ":"); 
          if (t[1] < hour && hour >= 22) date=strftime("%Y-%m-%d", systime() + 86400); 
          ts = mktime(date " " t[1] " " t[2] " 00"); 
          printf "{\"time\":\"%s\",\"timestamp\":%d,\"precipitation\":%.1f,\"datetime\":\"%sT%s:00\"}", $2, ts, 10^(($1-109)/32), date, $2
        } 
        END {print "]}"}'
      scan_interval: 300  # Updates every 5 minutes; adjust as needed.
      value_template: "{{ value_json['precipitation_raw'][0]['precipitation'] }}"
      unit_of_measurement: "mm/h"
      device_class: precipitation_intensity
      json_attributes:
        - precipitation_raw

template:
  - trigger:
      - platform: state
        entity_id: weather.home
      - platform: time_pattern
        minutes: /10
    action:
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.home
        response_variable: forecast
    sensor:
      - name: Weather Forecast Hourly
        unit_of_measurement: "°C"
        icon: mdi:weather-partly-cloudy
        state: "{{ state_attr('weather.home', 'temperature') }}"
        attributes:
          forecast: "{{ forecast['weather.home']['forecast'] }}"
          last_update: "{{ now().isoformat() }}"

  - trigger:
      - platform: time_pattern
        hours: "/1"
    action:
      - service: weather.get_forecasts
        data:
          type: daily
        target:
          entity_id:
            - weather.home
            - weather.home_2
        response_variable: forecast_response
    sensor:
      - name: "Forecast Templow First Quartile" # First quartile templow
        unique_id: yaml_template_sensor_forecast_templow_first_quartile
        unit_of_measurement: "°C"
        icon: mdi:thermometer-low
        state: >
          {% set templows = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | sort
            | list %}
          {% if templows | length == 0 %}
            unavailable
          {% else %}
            {% set n = (templows | length - 1) * 0.25 %}
            {% set lower_index = n | int %}
            {% set upper_index = (lower_index + 1) if (n % 1 > 0) else lower_index %}
            {% set fraction = n - lower_index %}
            {% if upper_index < (templows | length) %}
              {% set q1 = templows[lower_index] + (fraction * (templows[upper_index] - templows[lower_index])) %}
            {% else %}
              {% set q1 = templows[lower_index] %}
            {% endif %}
            {{ q1 | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          templow_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"
      - name: "Forecast Templow Third Quartile" # Third quartile templow
        unique_id: yaml_template_sensor_forecast_templow_third_quartile
        unit_of_measurement: "°C"
        icon: mdi:thermometer-low
        state: >
          {% set templows = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | sort
            | list %}
          {% if templows | length == 0 %}
            unavailable
          {% else %}
            {% set n = (templows | length - 1) * 0.75 %}
            {% set lower_index = n | int %}
            {% set upper_index = (lower_index + 1) if (n % 1 > 0) else lower_index %}
            {% set fraction = n - lower_index %}
            {% if upper_index < (templows | length) %}
              {% set q3 = templows[lower_index] + (fraction * (templows[upper_index] - templows[lower_index])) %}
            {% else %}
              {% set q3 = templows[lower_index] %}
            {% endif %}
            {{ q3 | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          templow_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"
      - name: "Forecast Mean Templow" # Mean templow
        unique_id: yaml_template_sensor_forecast_mean_templow
        unit_of_measurement: "°C"
        icon: mdi:thermometer-low
        state: >
          {% set temperatures = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | list %}
          {% if temperatures | length == 0 %}
            unavailable
          {% else %}
            {{ temperatures | average | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          temperature_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='templow')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"
      - name: "Forecast Temperature First Quartile" # First quartile temperature
        unique_id: yaml_template_sensor_forecast_temperature_first_quartile
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set temps = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | sort
            | list %}
          {% if temps | length == 0 %}
            unavailable
          {% else %}
            {% set n = (temps | length - 1) * 0.25 %}
            {% set lower_index = n | int %}
            {% set upper_index = (lower_index + 1) if (n % 1 > 0) else lower_index %}
            {% set fraction = n - lower_index %}
            {% if upper_index < (temps | length) %}
              {% set q1 = temps[lower_index] + (fraction * (temps[upper_index] - temps[lower_index])) %}
            {% else %}
              {% set q1 = temps[lower_index] %}
            {% endif %}
            {{ q1 | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          temperature_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"
      - name: "Forecast Temperature Third Quartile"  # Third quartile temperature
        unique_id: yaml_template_sensor_forecast_temperature_third_quartile
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set temps = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | sort
            | list %}
          {% if temps | length == 0 %}
            unavailable
          {% else %}
            {% set n = (temps | length - 1) * 0.75 %}
            {% set lower_index = n | int %}
            {% set upper_index = (lower_index + 1) if (n % 1 > 0) else lower_index %}
            {% set fraction = n - lower_index %}
            {% if upper_index < (temps | length) %}
              {% set q3 = temps[lower_index] + (fraction * (temps[upper_index] - temps[lower_index])) %}
            {% else %}
              {% set q3 = temps[lower_index] %}
            {% endif %}
            {{ q3 | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          temperature_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"
      - name: "Forecast Mean Temperature" # Mean temperature
        unique_id: yaml_template_sensor_forecast_mean_temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set temperatures = (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | list %}
          {% if temperatures | length == 0 %}
            unavailable
          {% else %}
            {{ temperatures | average | round(1) }}
          {% endif %}
        availability: >
          {{ forecast_response is defined
              and forecast_response['weather.home']['forecast'] is defined
              and forecast_response['weather.home_2']['forecast'] is defined }}
        attributes:
          temperature_values: >
            {{ (
              forecast_response['weather.home']['forecast']
              + forecast_response['weather.home_2']['forecast']
            )
            | map(attribute='temperature')
            | select('is_number')
            | map('float')
            | list }}
          last_updated: "{{ now().isoformat() }}"



#################
#    SENSORS    #
#################
sensor:

########################
#    BINARY SENSORS    #
########################
binary_sensor:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[notifications|weather] Morning Forecast via GPT'
    id: yaml_automation_notifications_weather_morning_forecast_via_gpt
    description: >
      Sends a daily weather summary generated by ChatGPT based on local forecasts.
    mode: single
    trigger:
      - platform: time
        at: '07:30:00'
    action:
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id:
            - weather.home
        response_variable: forecast_response
      - service: conversation.process
        data:
          agent_id: conversation.chatgpt
          text: >
            Please write a helpful and warm weather summary for the user.
            
            Below are lists of several weather attributes for the coming 24 hours, meaning that the Nth item in the list is the condition N hours from now. For context, the current time is {{ states('sensor.time') }}
            Weather type: {{ forecast_response['weather.home']['forecast'] | map(attribute='condition') |list()}}
            Temperature: {{ forecast_response['weather.home']['forecast'] | map(attribute='temperature') |list()}}
            Precipitation: {{ forecast_response['weather.home']['forecast'] | map(attribute='precipitation') |list()}}
            UV index: {{ forecast_response['weather.home']['forecast'] | map(attribute='uv_index') |list()}}
            Humidity: {{ forecast_response['weather.home']['forecast'] | map(attribute='humidity') |list()}}
            Wind Speed: {{ forecast_response['weather.home']['forecast'] | map(attribute='wind_speed') |list()}}
            
            Summarize the conditions in a friendly way (e.g., temperature, cloud cover, rain, wind). Please mention the temperature behavior during the day with some numbers.
            If it’s an exceptionally hot, cold, rainy, or sunny day, make sure to mention that, especially when rain is expected.
            Feel free to include a little emoji for flavor, but make sure to keep it brief so that it fits in a phone message. 
            Don't add markdown formatting or a title, just the message itself. Split the message into two paragraphs.
        response_variable: gpt_weather_response
      - alias: 'Send forecast as notification'
        service: notify.sander_and_tamara_phones
        data:
          title: "Weather Forecast Today ☁️"
          message: "{{ gpt_weather_response.response.speech.plain.speech }}"



################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
