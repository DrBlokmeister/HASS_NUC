homeassistant:
  customize: {}

#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      ventilation_power_estimate:
        friendly_name: "Ventilation Power Estimate"
        unique_id: yaml_template_sensor_ventilation_power_estimate
        icon_template: mdi:fan
        unit_of_measurement: "W"
        value_template: >-
          {{ (28.4 + 0.069*(states('sensor.fan_speed_setting')|float) + 0.0062*(states('sensor.fan_speed_setting')|float)**2)|round }}
        availability_template: "{{ states('sensor.fan_speed_setting')|is_number }}"
  - platform: integration
    source: sensor.ventilation_power_estimate
    name: Ventilation Energy Usage
    unique_id: integration_ventilation_energy_usage
    unit_time: h
    unit_prefix: k
    method: left
    round: 2
########################
#    BINARY SENSORS    #
########################
binary_sensor:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "[home|ventilation] Max ventilation when shower is on"
    id: home_ventilation_max_ventilation_when_shower_is_on
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.shower_occupied
        not_from:
          - "unknown"
          - "unavailable"
    action:
      - choose:
          - conditions: "{{ trigger.to_state.state == 'on' }}"
            sequence:
              - service: number.set_value
                data:
                  entity_id: number.override_fan_speed
                  value: 100
              - delay:
                  seconds: 1
              - service: switch.turn_on
                entity_id: switch.fan_speed_override
          - conditions: "{{ trigger.to_state.state == 'off' }}"
            sequence:
              - service: switch.turn_off
                entity_id: switch.fan_speed_override

  # - alias: '[ventilation|regulation] Regulate ventilation speed based on sensors'
  #   id: ventilation_regulation_regulate_ventilation_speed_based_on_sensors
  #   mode: restart
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.bedroom_co2
  #     - platform: state
  #       entity_id: sensor.humidity_bathroom
  #   condition:
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #   action:
  #     - choose:
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ (states('sensor.humidity_bathroom')|int > 80) or (states('sensor.bedroom_co2')|int > 1000) }}"
  #           sequence:
  #             - service: fan.turn_on
  #               data:
  #                 entity_id: fan.ventilation_system_2
  #                 percentage: 100
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ (states('sensor.humidity_bathroom')|int > 70) or (states('sensor.bedroom_co2')|int > 800) }}"
  #           sequence:
  #             - service: fan.turn_on
  #               data:
  #                 entity_id: fan.ventilation_system_2
  #                 percentage: 60
  #       default:
  #         - service: fan.turn_on
  #           data:
  #             entity_id: fan.ventilation_system_2
  #             percentage: 20

  # - alias: '[ventilation|regulation] Toggle fan based on occupancy'
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.house_occupied
  #       to: 'off'
  #   action:
  #     - service: fan.turn_off
  #       entity_id: fan.ventilation_system_2
################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
