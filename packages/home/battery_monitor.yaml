homeassistant:
  customize:

#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      low_battery:
        friendly_name: "Low Battery"
        entity_id: sensor.time
        value_template: >
          {%- set threshold = 30 -%}
          {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
              {%- if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
                {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
              {%- if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
                {{ item.name }} ({{ item.state }}){%- if not loop.last %}, {% endif -%} {% endif -%}
            {%- endfor -%}
          {%- endfor -%}   

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      battery_status:
        friendly_name: "Battery Status"
        entity_id: sensor.time
        value_template: >
          {%- set threshold = 30 -%}
          {% set ns = namespace(battery_empty = false) %}
          {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
              {%- if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
                {% set ns.battery_empty = true %}{% endif -%}
              {%- if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
                {% set ns.battery_empty = true %} {% endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ns.battery_empty}}

########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  # battery_status_update:
  #   name: Battery status update
  #   icon: mdi:battery

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
#   - alias: Battery Status Update
#     trigger:
#     - platform: time_pattern
#       minutes: '/5'
#     action:
#     - alias: Battery Status Update
#       service: input_boolean.toggle
#       data:
#         entity_id: input_boolean.battery_status_update

  - alias: 'Battery Alert'
    trigger:
      - platform: time
        at: '10:00:00'
      - platform: time
        at: '18:00:00'
    condition:
      condition: template
      value_template: "{% if states('binary_sensor.battery_status') %}{{ true }}{% else %}{{ false }}{% endif %}"
    action:
      - service: persistent_notification.create
        data_template:
          title: Low Battery levels
          message: "{{ states('sensor.low_battery') }}"
          notification_id: low-battery-alert
      # - service: notify.slack_notify
      #   data_template:
      #     message: >-
      #       These devices have low battery levels: {{ states('sensor.battery_status') }}

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script: