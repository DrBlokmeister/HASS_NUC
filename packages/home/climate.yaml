homeassistant:
  customize:


# ble_monitor:
#   discovery: False
#   restore_state: True
#   active_scan: False
#   hci_interface:
#     - 0
#     - 1
#   devices:
#     - mac: 'A4:C1:38:86:60:BE'
#       name: 'Filament box sensor'
#       temperature_unit: C
#     - mac: 'A4:C1:38:C1:83:3A'
#       name: 'Kitchen temp'
#       temperature_unit: C
#     - mac: 'A4:C1:38:76:01:29'
#       name: 'Study temp'
#       temperature_unit: C
#     - mac: 'A4:C1:38:14:F4:B3'
#       name: 'Plant box temp'
#       temperature_unit: C

# luxtronik:
#   host: !secret luxtronik_gateway_IP
#   port: !secret luxtronik_gateway_port

input_datetime:
  last_heat_up:
    name: Last Heat Up
    has_date: true
    has_time: true
  last_disinfection:
    name: Last Disinfection
    has_date: true
    has_time: true

#################
#    SENSORS    #
#################
sensor:
  - platform: min_max
    type: sum
    name: Total Heat Production Power
    round_digits: 3
    entity_ids:
      - sensor.tapwater_heat_production_power
      - sensor.heating_heat_production_power

  - platform: derivative
    source: sensor.tapwater_heat_amount_updating
    name: Tapwater Heat Production Power
    round : 3
    unit_time: h
    unit: kW
    time_window: "00:10:00"

  - platform: derivative
    source: sensor.heating_heat_amount_updating
    name: Heating Heat Production Power
    round : 3
    unit_time: h
    unit: kW
    time_window: "00:10:00"

  - platform: derivative
    source: sensor.heatpump_tapwater_temperature
    name: Tapwater Temperature Change
    time_window: "00:05:00"
    unit_time: h
    unit: °C

  - platform: min_max
    type: mean
    name: Home Mean Humidity
    unique_id: sensor_home_mean_humidity
    entity_ids:
      - sensor.humidity_livingroom
      - sensor.livingroom_aqm_humidity

      - sensor.humidity_bathroom

      - sensor.humidity_bedroom
      - sensor.bedroom_aqm_humidity

      - sensor.study_multi_sensor_humidity
      - sensor.study_aqm_humidity
  - platform: min_max
    type: median
    name: Home Median Humidity
    unique_id: sensor_home_median_humidity
    entity_ids:
      - sensor.humidity_livingroom
      - sensor.livingroom_aqm_humidity

      - sensor.humidity_bathroom

      - sensor.humidity_bedroom
      - sensor.bedroom_aqm_humidity

      - sensor.study_multi_sensor_humidity
      - sensor.study_aqm_humidity
  - platform: min_max
    type: max
    name: Home Max Humidity
    unique_id: sensor_home_max_humidity
    entity_ids:
      - sensor.humidity_livingroom
      - sensor.livingroom_aqm_humidity

      - sensor.humidity_bathroom

      - sensor.humidity_bedroom
      - sensor.bedroom_aqm_humidity

      - sensor.study_multi_sensor_humidity
      - sensor.study_aqm_humidity
  - platform: min_max
    type: mean
    name: Home Mean Humidity Without Bathroom
    unique_id: sensor_home_mean_humidity_without_bathroom
    entity_ids:
      - sensor.humidity_livingroom
      - sensor.livingroom_aqm_humidity

      - sensor.humidity_bedroom
      - sensor.bedroom_aqm_humidity

      - sensor.study_multi_sensor_humidity
      - sensor.study_aqm_humidity

  - platform: min_max
    type: mean
    name: Home Mean CO2
    unique_id: sensor_home_mean_co2
    entity_ids:
      - sensor.livingroom_co2
      - sensor.mh_z19_co2_value
      - sensor.study_co2
  - platform: min_max
    type: median
    name: Home Median CO2
    unique_id: sensor_home_median_co2
    entity_ids:
      - sensor.livingroom_co2
      - sensor.mh_z19_co2_value
      - sensor.study_co2
  - platform: min_max
    type: max
    name: Home Max CO2
    unique_id: sensor_home_max_co2
    entity_ids:
      - sensor.livingroom_co2
      - sensor.mh_z19_co2_value
      - sensor.study_co2

  - platform: template
    sensors:
      warmtebron_in_uit_delta:
        friendly_name: Warmtebron in-uit Delta T
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.heatpump_heat_source_output_temperature')|float - states('sensor.heatpump_heat_source_input_temperature')|float}}"
        availability_template: "{{ states.sensor.heatpump_heat_source_output_temperature not in ['unavailable', 'unknown', 'none', None] and states.sensor.heatpump_heat_source_input_temperature not in ['unavailable', 'unknown', 'none', None] }}"
      vloerverwarming_in_uit_delta:
        friendly_name: Vloerverwarming in-uit Delta T
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.heatpump_flow_in_temperature')|float - states('sensor.heatpump_flow_out_temperature')|float}}"
        availability_template: "{{ states.sensor.heatpump_flow_in_temperature not in ['unavailable', 'unknown', 'none', None] and states.sensor.heatpump_flow_in_temperature not in ['unavailable', 'unknown', 'none', None] }}"
      tapwater_heat_amount_updating:
        friendly_name: Tapwater Heat Amount Updating
        unit_of_measurement: "kWh"
        value_template: "{{ states('sensor.heatpump_tapwater_heat_amount')|float() + ((((now().minute % 2) | float) - 0.5) / 100) }}"
        attribute_templates:
          update_minute: "{{ now().minute }}"
        availability_template: "{{ states('sensor.heatpump_tapwater_heat_amount')|is_number() }}"
      heating_heat_amount_updating:
        friendly_name: Heating Heat Amount Updating
        unit_of_measurement: "kWh"
        value_template: "{{ states('sensor.heatpump_heat_amount_heating')|float() + ((((now().minute % 2) | float) - 0.5) / 100) }}"
        attribute_templates:
          update_minute: "{{ now().minute }}"
        availability_template: "{{ states('sensor.heatpump_heat_amount_heating')|is_number() }}"
      heatpump_efficiency:
        friendly_name: Heatpump Efficiency
        unit_of_measurement: '%'
        value_template: "{{ (100 * (states('sensor.heatpump_current_heat_output')|float(0)) / states('sensor.tasmota_energy_power')|float(1))|round(0) }}"
        availability_template: "{{ states.sensor.heatpump_current_heat_output not in ['unavailable', 'unknown', 'none', None] and states.sensor.tasmota_energy_power not in ['unavailable', 'unknown', 'none', None] }}"

########################
#    BINARY SENSORS    #
########################
binary_sensor:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:
  - platform: template
    switches:
      heatpump_tapwater_power_saving_mode:
        value_template: "{{ states('number.heatpump_tapwater_target_temperature')|int <= 45 and states('number.heatpump_tapwater_hysteresis')|float() >= 5 }}"
        turn_on:
          - service: number.set_value
            data:
              entity_id: number.heatpump_tapwater_target_temperature
              value: 45
          - service: number.set_value
            data:
              entity_id: number.heatpump_tapwater_hysteresis
              value: 5
        turn_off:
          delay:
            seconds: 1
      heatpump_tapwater_heatup_mode:
        value_template: "{{ states('number.heatpump_tapwater_target_temperature')|int >= 55 and states('number.heatpump_tapwater_hysteresis')|float() < 5 }}"
        turn_on:
          - service: number.set_value
            data:
              entity_id: number.heatpump_tapwater_target_temperature
              value: 55
          - service: number.set_value
            data:
              entity_id: number.heatpump_tapwater_hysteresis
              value: 1
        turn_off:
          delay:
            seconds: 1


#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "[home|climate] Heat up tapwater in the morning"
    id: home_climate_heat_up_tapwater_in_the_morning
    mode: single
    trigger:
      - platform: template
        value_template: "{{ now().hour == (states('sensor.energyzero_today_energy_lowest_price_time')|as_datetime()).astimezone().hour }}"
        id: "heat_up_total_cheapest"
      - platform: template #Two hours after lowest energy price time
        value_template: "{{ now().hour == (states('sensor.energyzero_today_energy_lowest_price_time')|as_datetime()).astimezone().hour + 2 }}"
        id: "cool_down"
      - platform: template
        value_template: "{{ (now().hour == state_attr('sensor.cheapest_night_price', 'cheapest_hour')) and not (now().hour == (states('sensor.energyzero_today_energy_lowest_price_time')|as_datetime()).astimezone().hour) }}"
        id: "heat_up_nightly_cheapest"
      - platform: template
        value_template: "{{ (now().hour == state_attr('sensor.cheapest_night_price', 'cheapest_hour') + 2) and not (now().hour == (states('sensor.energyzero_today_energy_lowest_price_time')|as_datetime()).astimezone().hour + 4) }}"
        id: "cool_down"
    condition:
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'heat_up_total_cheapest' or trigger.id == 'heat_up_nightly_cheapest' }}"
              - condition: state
                entity_id: binary_sensor.house_occupied
                state: 'on'
              # - condition: not
              #   conditions:
              #     - condition: time
              #       weekday:
              #         - sun
            sequence:
              - service: number.set_value
                data_template: # Cheapest time and a sunday
                  value: >
                    {% if (now().isoweekday() == 7) and (now().hour == (states('sensor.energyzero_today_energy_lowest_price_time')|as_datetime()).astimezone().hour) %}
                      60
                    {% else %}
                      55
                    {% endif %}
                target:
                  entity_id: number.heatpump_tapwater_target_temperature
              - service: number.set_value
                data:
                  value: 1
                target:
                  entity_id:
                    - number.heatpump_tapwater_hysteresis
              - delay:
                  seconds: 5
              - wait_for_trigger:
                  - platform: numeric_state
                    entity_id: sensor.heatpump_tapwater_temperature
                    value_template: "{{ states('sensor.heatpump_tapwater_temperature')|float - states('number.heatpump_tapwater_target_temperature')|float }}"
                    above: -1
                    for:
                      minutes: 30
              - service: number.set_value
                data:
                  value: 45
                target:
                  entity_id: number.heatpump_tapwater_target_temperature
              - service: number.set_value
                data:
                  value: 5
                target:
                  entity_id:
                    - number.heatpump_tapwater_hysteresis
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'cool_down' }}"
            sequence:
              - service: number.set_value
                data:
                  value: 45
                target:
                  entity_id: number.heatpump_tapwater_target_temperature
              - service: number.set_value
                data:
                  value: 5
                target:
                  entity_id:
                    - number.heatpump_tapwater_hysteresis

  - alias: "[home|climate] Update Last Heat Up Time"
    trigger:
      - platform: numeric_state
        entity_id: sensor.heatpump_tapwater_temperature
        above: '50'
        for:
          minutes: 30
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_heat_up
        data:
          timestamp: "{{ now().timestamp() }}"

  - alias: "[home|climate] Update Last Disinfection Time"
    trigger:
      - platform: numeric_state
        entity_id: sensor.heatpump_tapwater_temperature
        above: '59'
        for:
          minutes: 30
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_disinfection
        data:
          timestamp: "{{ now().timestamp() }}"

  - alias: "[home|climate] Disinfection Overdue Notification"
    trigger:
      - platform: time_pattern
        hours: "/1"
      - platform: template # last disinfection was 8 days ago, but calculation is in seconds
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('input_datetime.last_disinfection'))) > (8 * 24 * 3600) }}
    condition:
      - condition: template # last disinfection was 8 days ago, but calculation is in seconds
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('input_datetime.last_disinfection'))) > (8 * 24 * 3600) }}
    action:
      - service: persistent_notification.create
        data:
          title: "Disinfection Overdue"
          message: >
            The thermal disinfection has not been performed since {{ strptime(states('input_datetime.last_disinfection'), '%Y-%m-%d %H:%M:%S').strftime('%A, %B %d, %Y %H:%M:%S') }}. Please check the system.
          notification_id: thermal_disinfection_overdue

  - alias: "[home|climate] Heat Up Overdue Notification"
    trigger:
      - platform: time_pattern
        hours: "/1"
      - platform: template # last disinfection was 2 days ago, but calculation is in seconds
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('input_datetime.last_heat_up'))) > (2 * 24 * 3600) }}
    condition:
      - condition: template # last disinfection was 2 days ago, but calculation is in seconds
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('input_datetime.last_heat_up'))) > (2 * 24 * 3600) }}
    action:
      - service: persistent_notification.create
        data:
          title: "Heat Up Overdue"
          message: >
            The water heatup has not been performed since {{ strptime(states('input_datetime.last_heat_up'), '%Y-%m-%d %H:%M:%S').strftime('%A, %B %d, %Y %H:%M:%S') }}. Please check the system.
          notification_id: regular_heatup_overdue


  # - alias: '[climate|temperature] Poll Alpha Home Temperatures'
  #   trigger:
  #     platform: time_pattern
  #     minutes: "/1"
  #   action:
  #     - service: shell_command.poll_alphahome_sensors
################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:

########################
#    SHELL COMMANDS    #
########################
shell_command:
  # poll_alphahome_sensors: "python3 /config/python_scripts/gateway.py > /config/python_scripts/gateway.json"
