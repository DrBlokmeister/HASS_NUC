homeassistant:
  customize:
    sensor.speedtest_download:
      templates:
        icon: >
          if (state > 800) return 'mdi:speedometer';
          if (state > 500) return 'mdi:speedometer-medium';
          return 'mdi:speedometer-slow'
        icon_color: >
          var maxval = 1000;
          var minval = 400;
          var maxhue = 120;
          var minhue = 0;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    sensor.speedtest_upload:
      icon: mdi:speedometer
      templates:
        icon: >
          if (state > 800) return 'mdi:speedometer';
          if (state > 500) return 'mdi:speedometer-medium';
          return 'mdi:speedometer-slow'
        icon_color: >
          var maxval = 1000;
          var minval = 400;
          var maxhue = 120;
          var minhue = 0;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    sensor.speedtest_ping:
      icon: mdi:speedometer
      templates:
        icon_color: >
          var maxval = 30;
          var minval = 1;
          var maxhue = 0;
          var minhue = 120;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );

rest:
  - resource: !secret airvpn_API_resource
    headers:
      API-KEY: !secret airvpn_API_key
    scan_interval: 60  # Set the desired update interval in seconds
    sensor:
      - name: "AirVPN exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip_new"
        value_template: >-
          {% if value_json is defined and value_json.sessions is defined and value_json.sessions | length > 0 %}
            {{ value_json.sessions[0].exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Username"
        unique_id: "yaml_restful_airvpn_username"
        value_template: >-
          {% if value_json is defined and value_json.user is defined %}
            {{ value_json.user.login }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:account"
      - name: "AirVPN VPN IP"
        unique_id: "yaml_restful_airvpn_vpn_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.vpn_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Entry IP"
        unique_id: "yaml_restful_airvpn_entry_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.entry_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Server Name"
        unique_id: "yaml_restful_airvpn_server_name"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_name }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:server"
      - name: "AirVPN Server Country"
        unique_id: "yaml_restful_airvpn_server_country"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_country }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:earth"
      - name: "AirVPN Data Uploaded"
        unique_id: "yaml_restful_airvpn_data_uploaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_read/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:upload-network-outline"
      - name: "AirVPN Data Downloaded"
        unique_id: "yaml_restful_airvpn_data_downloaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_write/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:download-network-outline"
      - name: "AirVPN Connected Since"
        unique_id: "yaml_restful_airvpn_connected_since"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ as_datetime(value_json.connection.connected_since_unix) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: timestamp
        icon: "mdi:timer-sand"
      - name: "AirVPN Upload Speed"
        unique_id: "yaml_restful_airvpn_upload_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_read/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:upload-network"
      - name: "AirVPN Download Speed"
        unique_id: "yaml_restful_airvpn_download_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_write/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:download-network"

command_line:
  - switch:
      unique_id: "yaml_command_line_switch_transmission_container"
      name: "Transmission Container"
      icon: "mdi:car-shift-pattern"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start transmission"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop transmission"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' transmission"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_plex_container"
      name: "Plex Container"
      icon: "mdi:plex"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start plex"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop plex"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' plex"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_portainer_ce_container"
      name: "Portainer CE Container"
      icon: "mdi:docker"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Portainer-CE"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Portainer-CE"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' Portainer-CE"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_firefox_container"
      name: "Firefox Container"
      icon: "mdi:firefox"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Firefox"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Firefox"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' Firefox"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_apache_guacamole_container"
      name: "Apache Guacamole Container"
      icon: "mdi:application"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start ApacheGuacamole"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop ApacheGuacamole"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' ApacheGuacamole"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_photoprism_container"
      name: "PhotoPrism Container"
      icon: "mdi:image-multiple"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start PhotoPrism"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop PhotoPrism"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' PhotoPrism"
      value_template: "{{ value == 'true' }}"
  - switch:
      unique_id: "yaml_command_line_switch_onedrive_container"
      name: "OneDrive Container"
      icon: "mdi:cloud-outline"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Onedrive"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Onedrive"
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker inspect -f '{{.State.Running}}' Onedrive"
      value_template: "{{ value == 'true' }}"

  - switch:
      unique_id: "unraid_array_control"
      name: "NAS Unraid Array"
      icon: "mdi:harddisk"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd startarray'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd stoparray'
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "mdcmd status | grep 'mdState=' | cut -d'=' -f2"
      value_template: >-
        {{ value == "STARTED" }}

  - switch:
      unique_id: "wireguard_service_control"
      name: "NAS Wireguard Service"
      icon: "mdi:vpn"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        '/etc/rc.d/rc.wireguard start'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/etc/rc.d/rc.wireguard stop'
      command_state: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        'if [[ $(wg) ]]; then echo true; else echo false; fi'
      value_template: "{{ value == 'true' }}"

  # - sensor:
  #     name: "NAS CPU Usage"
  #     icon: mdi:cpu-64-bit
  #     unit_of_measurement: '%'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "top -bn1 | grep 'Cpu(s)' | sed 's/.*, *\([0-9.]*\)%* id.*/\\1/' | awk '{print 100 - \$1}'"
  # - sensor:
  #     name: "NAS CPU Temperature"
  #     icon: mdi:cpu-64-bit
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "sensors | grep 'CPU Temp:' | awk '{print \$3}'"
  #     value_template: "{{ value | replace('+','') | replace('°C','') }}"
  #     scan_interval: 60
  # - sensor:
  #     name: "NAS Total Memory"
  #     icon: mdi:memory
  #     unit_of_measurement: 'MB'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "free -m | awk '/Mem:/ {print \$2}'"
  #     scan_interval: 60
  # - sensor:
  #     name: "NAS Used Memory"
  #     icon: mdi:memory
  #     unit_of_measurement: 'MB'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "free -m | awk '/Mem:/ {print \$7}'"
  #     scan_interval: 60
  # - sensor:
  #     name: "NAS Used Disk Space"
  #     icon: mdi:disk
  #     unit_of_measurement: 'GB'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "df -h | grep /mnt/user/ | awk '{print \$3}' | sed 's/T//g' | awk '{print \$1 * 1024}'"
  #     scan_interval: 60
  # - sensor:
  #     name: "NAS NVMe Composite Temperature"
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "sensors | grep 'Composite:' | awk '{print \$2}'"
  #     value_template: "{{ value | replace('+','') | replace('°C','') }}"
  #     scan_interval: 60

  # - sensor:
  #     name: "NAS Parity Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sdb | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600
  # - sensor:
  #     name: "NAS Disk 1 Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sdc | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600
  # - sensor:
  #     name: "NAS Disk 3 Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sdd | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600
  # - sensor:
  #     name: "NAS Disk 2 Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sde | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600
  # - sensor:
  #     name: "NAS Dev 2 Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sdf | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600
  # - sensor:
  #     name: "NAS Dev 1 Temperature"
  #     icon: mdi:harddisk
  #     unit_of_measurement: '°C'
  #     command: >-
  #       ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
  #       root@10.0.0.250
  #       "smartctl -A /dev/sdg | grep Temperature_Celsius | awk '{print \$10}'"
  #     scan_interval: 600

  - sensor:
      name: "NAS CPU Usage File"
      icon: mdi:cpu-64-bit
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.cpu_usage }}"
  - sensor:
      name: "NAS CPU Temperature File"
      icon: mdi:thermometer
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.cpu_temperature }}"
  - sensor:
      name: "NAS Total Memory File"
      icon: mdi:memory
      unit_of_measurement: 'MB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.total_memory }}"
  - sensor:
      name: "NAS Used Memory File"
      icon: mdi:memory
      unit_of_measurement: 'MB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.used_memory }}"
  - sensor:
      name: "NAS Used Disk Space File"
      icon: mdi:harddisk
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.used_disk_space }}"
  - sensor:
      name: "NAS NVMe Composite Temperature File"
      icon: mdi:thermometer
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.nvme_composite_temperature }}"
  - sensor:
      name: "NAS Parity Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.parity_temperature }}"
  - sensor:
      name: "NAS Disk 1 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.disk_1_temperature }}"
  - sensor:
      name: "NAS Disk 2 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.disk_2_temperature }}"
  - sensor:
      name: "NAS Disk 3 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.disk_3_temperature }}"
  - sensor:
      name: "NAS Dev 1 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.dev_1_temperature }}"
  - sensor:
      name: "NAS Dev 2 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.dev_2_temperature }}"
#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      ping_router_avg:
        value_template: "{{ state_attr('binary_sensor.udm_pro', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Router ping average"
        availability_template: "{{ state_attr('binary_sensor.udm_pro', 'round_trip_time_avg')|is_number }}"

      ping_blokmeisternas_avg:
        value_template: "{{ state_attr('binary_sensor.blokmeisternas', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "BlokmeisterNAS ping average"
        availability_template: "{{ state_attr('binary_sensor.blokmeisternas', 'round_trip_time_avg')|is_number }}"

      ping_phone_avg:
        value_template: "{{ state_attr('binary_sensor.phone', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Phone ping average"
        availability_template: "{{ state_attr('binary_sensor.phone', 'round_trip_time_avg')|is_number }}"

      ping_odroid_c2_avg:
        value_template: "{{ state_attr('binary_sensor.odroid_c2', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Odroid C2 ping average"
        availability_template: "{{ state_attr('binary_sensor.odroid_c2', 'round_trip_time_avg')|is_number }}"

      ping_ambilight_rpi_avg:
        value_template: "{{ state_attr('binary_sensor.ambilight_rpi', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Ambilight RPI ping average"
        availability_template: "{{ state_attr('binary_sensor.ambilight_rpi', 'round_trip_time_avg')|is_number }}"

      ping_snlr_avg:
        value_template: "{{ state_attr('binary_sensor.snlr', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Plinq ping average"
        availability_template: "{{ state_attr('binary_sensor.snlr', 'round_trip_time_avg')|is_number }}"

      ping_google_dns_avg:
        value_template: "{{ state_attr('binary_sensor.google_dns', 'round_trip_time_avg')|round(2) }}"
        unit_of_measurement: ms
        friendly_name: "Google DNS ping average"
        availability_template: "{{ state_attr('binary_sensor.google_dns', 'round_trip_time_avg')|is_number }}"

      udmp_download_speed_mbs:
        value_template: "{{ (states('sensor.unifi_dream_machine_kib_s_received')|float/1024)|round(1) }}"
        unit_of_measurement: MB/s
        friendly_name: "Router Download Speed"
        availability_template: "{{ states('sensor.unifi_dream_machine_kib_s_received')|is_number }}"
      udmp_upload_speed_mbs:
        value_template: "{{ (states('sensor.unifi_dream_machine_kib_s_sent')|float/1024)|round(1) }}"
        unit_of_measurement: MB/s
        friendly_name: "Router Download Speed"
        availability_template: "{{ states('sensor.unifi_dream_machine_kib_s_sent')|is_number }}"
      udmp_download_gb:
        value_template: "{{ (states('sensor.unifi_dream_machine_b_received')|float/1024**3)|round(1) }}"
        unit_of_measurement: GB
        friendly_name: "Router Total Download"
        availability_template: "{{ states('sensor.unifi_dream_machine_b_received')|is_number }}"
      udmp_upload_gb:
        value_template: "{{ (states('sensor.unifi_dream_machine_b_sent')|float/1024**3)|round(1) }}"
        unit_of_measurement: GB
        friendly_name: "Router Total Upload"
        availability_template: "{{ states('sensor.unifi_dream_machine_b_sent')|is_number }}"

      ap_groundfloor_number_of_clients:
        value_template: "{{ states.device_tracker | selectattr('attributes.ap_mac','defined') | selectattr('attributes.ap_mac','eq','d0:21:f9:64:06:39') | list | count }}"
        friendly_name: "AP Ground Floor Number of Clients"
        unit_of_measurement: "Clients"
        availability_template: "{{ is_state('device_tracker.udmpro', 'home' ) }}"
      ap_firstfloor_number_of_clients:
        value_template: "{{ states.device_tracker | selectattr('attributes.ap_mac','defined') | selectattr('attributes.ap_mac','eq','d0:21:f9:b7:9c:88') | list | count }}"
        friendly_name: "AP First Floor Number of Clients"
        unit_of_measurement: "Clients"
        availability_template: "{{ is_state('device_tracker.udmpro', 'home' ) }}"
      ap_secondfloor_number_of_clients:
        value_template: "{{ states.device_tracker | selectattr('attributes.ap_mac','defined') | selectattr('attributes.ap_mac','eq','d0:21:f9:b7:ea:68') | list | count }}"
        friendly_name: "AP Second Floor Number of Clients"
        unit_of_measurement: "Clients"
        availability_template: "{{ is_state('device_tracker.udmpro', 'home' ) }}"
      number_of_guests_connected:
        value_template: "{{ states.device_tracker | selectattr('attributes.essid','defined') | selectattr('attributes.essid','eq','BlokmeisterWIFI_Guest') | list | count }}"
        friendly_name: "Number of Guests Connected"
        unit_of_measurement: "Clients"
        availability_template: "{{ is_state('device_tracker.udmpro', 'home' ) }}"


shell_command:
  execute_nas_monitor_commands: sh /config/bash_scripts/nas_monitor.sh
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  # - platform: ping
  #   name: BlokmeisterNAS
  #   host: tower.local
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: UDM Pro
  #   host: 10.0.0.1
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: "10 Gbe Switch"
  #   host: 10.0.0.74
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: PoE Switch
  #   host: 10.0.0.212
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: USW Switch Mini
  #   host: 10.0.0.48
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: AP Ground Floor
  #   host: 10.0.0.251
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: AP 1st Floor
  #   host: 10.0.0.197
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: AP 2nd Floor
  #   host: 10.0.0.155
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: AP Outside
  #   host: 10.0.0.186
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Phone
  #   host: 10.0.0.100
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Odroid_C2
  #   host: CoreELEC.local
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Ambilight_RPI
  #   host: HyperBian.local
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: SNLR
  #   host: 45.145.109.105
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Google_DNS
  #   host: 8.8.8.8
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Blokmeisterdesktop
  #   host: 10.0.0.101
  #   count: 5
  #   scan_interval: 60

  # - platform: ping
  #   name: Heatpump Controller
  #   host: 10.0.20.10
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Alpha Home Gateway
  #   host: 10.0.20.11
  #   count: 5
  #   scan_interval: 60
  # - platform: ping
  #   name: Alpha Home Control Box
  #   host: 10.0.20.12
  #   count: 5
  #   scan_interval: 60

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
#Send a notification to Ariela when the a torrent is completed
  - alias: 'Completed Torrent'
    trigger:
      platform: event
      event_type: transmission_downloaded_torrent
    action:
      service: notify.mobile_app_blokmeisters21u
      data:
        title: "Torrent completed!"
        message: "{{ trigger.event.data.name }} has finished downloading!"
        data:
          group: reminder
          tag: transmission
          icon_url: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"
          timeout: 1800

  - alias: '[network|notify]Alert phone when network speed is too low'
    trigger:
      - platform: numeric_state
        entity_id: sensor.speedtest_download
        below: 100
        for:
          minutes: 70
    action:
      service: notify.mobile_app_blokmeisters21u
      data:
        title: "Network speed 100mbit!"
        message: "Current network speed {{ states('sensor.speedtest_download') }} Mbit/s."
        data:
          group: reminder
          tag: networkspeed
          timeout: 1800

  - alias: "[system|network]Enter Work Zone - Start Containers"
    description: "Turns on Guacamole and Firefox containers when entering work zone."
    trigger:
      - platform: zone
        entity_id: person.sander_blok
        zone: zone.work
        event: enter
    action:
      - service: switch.turn_on
        target:
          entity_id:
            - switch.apache_guacamole_container
            - switch.firefox_container
      - wait_for_trigger:
          - platform: zone
            entity_id: person.sander_blok
            zone: zone.work
            event: leave
        timeout:
          hours: 12
        continue_on_timeout: false
      - service: switch.turn_off
        entity_id:
          - switch.apache_guacamole_container
          - switch.firefox_container
    mode: single

  - alias: "[system|network]Query NAS sensors"
    description: "Automatically queries the sensors in the NAS using a bash script every five minutes."
    trigger:
      - platform: time_pattern
        minutes: "/5"
    action:
      - service: shell_command.execute_nas_monitor_commands
    mode: single


################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
  transmission_message_download_completed:
      alias: "Message phone about completed torrent"
      sequence:
        - service: notify.mobile_app_blokmeisters21u
          data:
            message: "A torrent is done downloading"
            title: "Home Assistant - Transmission"
            data:
              group: reminder
              tag: transmission
              icon_url: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"
              timeout: 1800

  # message_transmission_not_reachable:
  #     alias: "Contact to transmission lost"
  #     sequence:
  #       - service: notify.mobile_app_blokmeister_op6
  #         data:
  #           message: "The contact to Transmission has been lost"
  #           title: "Home Assistant - Transmission"
  #           data:
  #             icon: "http://wfarm2.dataknet.com/static/resources/icons/set92/b8ef5c32.png"
  #             image: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"

  # message_odroid_not_reachable:
  #     alias: "Contact to Odroid C2 lost"
  #     sequence:
  #       - service: notify.mobile_app_blokmeister_op6
  #         data:
  #           message: "The contact to the Odroid C2 has been lost"
  #           title: "Home Assistant - Odroid C2"
  #           data:
  #             icon: mdi:library-movie
  #             image: mdi_library-movie
