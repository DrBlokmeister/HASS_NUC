homeassistant:
  customize_glob:
    sensor.*db_size:
      icon: mdi:database
    sensor.mediacenter_cabinet_*:
      device_class: temperature
      unit_of_measurement: '째C'
      templates:
        icon_color: >-
          var maxval = 35;
          var minval = 15;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    switch.*_mounted:
      templates:
        icon: >
          if (state === 'on' ) return 'mdi:check-network-outline'; else return 'mdi:close-network-outline';
  customize:
    switch.plexmediaserver:
      icon: mdi:plex
    binary_sensor.plexmediaserver:
      icon: mdi:plex

# monitor_docker:
#   - name: Docker
#     url: tcp://10.0.0.252:2375
#     containers:
#       - addon_core_mariadb
#       - addon_core_deconz
#       - homeassistant
#       - hassio_supervisor
#       - addon_a0d7b954_vscode
#       - addon_a0d7b954_tautulli
#       - addon_a0d7b954_ssh
#       - addon_a0d7b954_influxdb
#       - addon_a0d7b954_portainer
#       - addon_core_mosquitto
#       - hassio_multicast
#       - hassio_dns
#       - hassio_cli
#       - hassio_audio
#     rename:
#       addon_core_mariadb: MariaDB database
#       addon_core_deconz: Deconz Zigbee
#       homeassistant: Home Assistant
#       hassio_supervisor: Supervisor
#       addon_a0d7b954_vscode: VScode
#       addon_a0d7b954_tautulli: Tautulli
#       addon_a0d7b954_ssh: SSH
#       addon_a0d7b954_influxdb: InfluxDB
#       addon_a0d7b954_portainer: Portainer
#       addon_core_mosquitto: Mosquitto
#     monitored_conditions:
#       - version
#       - containers_running
#       - containers_total
#       - containers_cpu_percentage
#       - cpu_percentage
#       - status
#       - memory

counter:
  log_errors:
    name: "Log Errors"
    icon: mdi:alert-octagon
    initial: 0
    step: 1
    restore: False
  log_warnings:
    name: "Log Warnings"
    icon: mdi:alert
    initial: 0
    step: 1
    restore: False

######################
#    COMMAND LINE    #
######################
command_line:
  - sensor:
      name: "NUC Free RAM"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Mem:/ {print \\$4}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC Used RAM"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Mem:/ {print \\$3}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC Buff/Cached RAM"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Mem:/ {print \\$6}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC Available RAM"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Mem:/ {print \\$7}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC Used Swap"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Swap:/ {print \\$3}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC Free Swap"
      icon: mdi:memory
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"free | awk '/^Swap:/ {print \\$4}'\""
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "kB"
  - sensor:
      name: "NUC NVMe Composite Temperature"
      icon: mdi:thermometer
      command: >
        ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \
        "sensors | awk '/nvme-pci/ {found=1} found && /Composite/ {print \$2; exit}' | sed 's/+//;s/째C//' || echo -1"
      command_timeout: 30
      scan_interval: 60
      unit_of_measurement: "째C"


  # - sensor:
  #     name: "NUC HDD Temperature"
  #     icon: mdi:thermometer
  #     command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 \"sudo smartctl -n standby -A /dev/sda | awk '/^194 Temperature/ {print \\$10} /Device is in STANDBY/ {print \\\"-1\\\"}'\""
  #     command_timeout: 30
  #     scan_interval: 60
  #     unit_of_measurement: "째C"

  - sensor:
      name: "NUC Available Package Updates"
      icon: mdi:package-variant-closed
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 '/home/drblokmeister/Documents/check_updates.sh'"
      command_timeout: 30
      scan_interval: 3600  # Adjust the scan interval as needed
      value_template: "{{ value_json.available_updates }}"
      unit_of_measurement: packages
      json_attributes:
        - updatable_packages
  - sensor:
      name: 'Home Assistant Log Error Count'
      unit_of_measurement: ''
      scan_interval: 60
      command: "grep -c 'ERROR' /config/home-assistant.log"

#################
#    SENSORS    #
#################
sensor:
  # - platform: systemmonitor
  #   resources:
  #     - type: disk_use_percent
  #       arg: /
  #     - type: memory_free
  #     - type: memory_use
  #     - type: load_1m
  #     - type: load_5m
  #     - type: load_15m
  #     - type: processor_use
  #     - type: last_boot
  #     - type: processor_use
  #     - type: processor_temperature

  # - platform: sql
  #   db_url: !secret mariadb_URL
  #   queries:
  #     - name: MariaDB size
  #       query: >
  #           SELECT SUM(data_length + index_length) / 1024 / 1024 AS db_size_mb FROM information_schema.TABLES WHERE table_schema = 'homeassistant';
  #       column: 'value'
  #       device_class: data_size
  #       unit_of_measurement: MB

      # - name: MariaDB most recorded entities
      #   query: >
      #       SELECT
      #         COUNT(*) AS cnt,
      #         COUNT(*) * 100 / (SELECT COUNT(*) FROM states) AS cnt_pct,
      #         states_meta.entity_id
      #       FROM states
      #       INNER JOIN states_meta ON states.metadata_id=states_meta.metadata_id
      #       GROUP BY states_meta.entity_id
      #       ORDER BY cnt DESC
      #       LIMIT 10
      #   column: 'entity_id'

  # - platform: influxdb
  #   username: !secret influxdb_user
  #   password: !secret influxdb_pass
  #   queries:
  #     - name: InfluxDB Size
  #       unit_of_measurement: MB
  #       value_template: '{{ value | float | round(1) }}'
  #       group_function: sum
  #       measurement: '"_internal".."tsm1_engine"'
  #       database: _internal
  #       where: 'time > now() - 10m'
  #       field: diskBytes

  # - platform: influxdb
  #   username: !secret influxdb_user
  #   password: !secret influxdb_pass
  #   queries:
  #     - name: InfluxDB Size
  #       unit_of_measurement: MB
  #       value_template: '{{ (value | float / 1024 /1024) | round(1) }}'
  #       group_function: sum
  #       measurement: '"monitor"."shard"'
  #       database: _internal
  #       where: 'time > now() - 10s'
  #       field: diskBytes
  # - platform: template
  #   sensors:
  #     hassio_uptime_human_readable:
  #       friendly_name: "Home Assistant uptime"
  #       value_template: >
  #         {{ (states( 'sensor.uptime' )|float * 60 | round(0) - 3600) | timestamp_custom(('%H:%M:%S')) }}
  #     uptime_seconds:
  #       device_class: timestamp
  #       value_template: >
  #         {{ states( 'sensor.uptime' )|float * 60 | float }}
  - platform: template
    sensors:
      running_automations:
        friendly_name: "Running Automations"
        unique_id: yaml_template_running_automations
        icon_template: "mdi:counter"
        value_template: >
          {{ states.automation | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | count() }}
        attribute_templates:
          automations: >
            {{ states.automation | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | join(', ') }}
      running_scripts:
        friendly_name: "Running Scripts"
        unique_id: yaml_template_running_scripts
        icon_template: "mdi:counter"
        value_template: >
          {{ states.script | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | count() }}
        attribute_templates:
          automations: >
            {{ states.script | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | join(', ') }}

  - platform: filter
    name: "Filtered NUC CPU Temperature"
    entity_id: sensor.processor_temperature
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered NUC Power"
    entity_id: sensor.plug_nuc_power
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered NUC CPU Use"
    entity_id: sensor.processor_use
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered Docker CPU Use"
    entity_id: sensor.docker_cpu
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered HA Container CPU Use"
    entity_id: sensor.docker_homeassistant_cpu
    filters:
      - filter: lowpass
        time_constant: 10

########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[System] Hass Stopped'
    initial_state: on
    trigger:
      platform: homeassistant
      event: shutdown
    action:
      - service: tts.cloud_say
        entity_id: media_player.living_room_speaker
        data:
          message: "Home Assistant shut down"
          language: en-IE
      - service: notify.mobile_app_blokmeisters21u
        data_template:
          title: "Hass.io Offline"
          message: >
            {% set running_scripts = states('sensor.running_scripts')|int %}
            {% set running_automations = states('sensor.running_automations')|int %}
            {% set script_ids = state_attr('sensor.running_scripts', 'automations') %}
            {% set automation_ids = state_attr('sensor.running_automations', 'automations') %}
            {% if running_scripts == 0 and running_automations == 0 %}
              No automations or scripts were running upon shutdown.
            {% else %}
              {% set script_msg = 'script' if running_scripts == 1 else 'scripts' %}
              {% set automation_msg = 'automation' if running_automations == 1 else 'automations' %}
              {{ running_scripts }} {{ script_msg }} ({{ script_ids }}) and {{ running_automations }} {{ automation_msg }} ({{ automation_ids }}) were running at shutdown.
            {% endif %}
          data:
            group: reminder
            tag: hassiostopstart
            icon_url: local/icons/home-assistant.png
      # - condition: state
      #   entity_id: switch.unrarredmovies_mounted
      #   state: 'on'
      # - service: switch.turn_on
      #   entity_id: switch.plexmediaserver


  - alias: '[System] Hass Started'
    initial_state: on
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "Hass.io was back online!"
          title: "Hass.io Online"
          data:
            group: reminder
            tag: hassiostopstart
            icon_url: local/icons/home-assistant.png
      - service: tts.cloud_say
        entity_id: media_player.living_room_speaker
        data:
          message: "Home Assistant back online"
          language: en-IE

  - alias: '[System] Hass Updater'
    initial_state: on
    trigger:
      - platform: state
        entity_id: update.home_assistant_core_update
        to: 'on'
    action:
      - service: persistent_notification.create
        data:
          message: "Hass.io version **[{{ state_attr('update.home_assistant_core_update', 'latest_version') }}]({{ state_attr('update.home_assistant_core_update', 'release_url') }})** is now available! Installed version: {{ state_attr('update.home_assistant_core_update', 'installed_version') }}"
          title: Upgrade time!
          notification_id: update_available
      # - service: hassio.addon_start
      #   data:
      #     addon: core_check_config

  - alias: '[system|database] Update MariaDB database size sensor'
    mode: single
    trigger:
      platform: time_pattern
      minutes: /30
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.mariadb_size

  - alias: '[system|database] Auto purge database'
    mode: single
    trigger:
      - platform: time
        at: "01:00:00"
    action:
      - service: recorder.purge_entities
        data:
          entity_id:
            - sensor.unknown_power
            - sensor.averaged_unknown_power
            - sensor.known_power
            - sensor.averaged_known_power
            - sensor.total_power_consumption_watt
            - sensor.total_power_consumption_kilowatt
            - sensor.udmpro_cpu_utilization
            - sensor.phase_1_known_power
            - sensor.phase_2_known_power
            - sensor.phase_3_known_power
            - sensor.udmpro_memory_utilization
          keep_days: 7
      - delay:
          seconds: 20
      - wait_for_trigger:
          - platform: numeric_state
            entity_id: sensor.mariadb_cpu_percent
            below: 2
            for:
              minutes: 5
      - if:
          - condition: time
            weekday:
              - sun
        then:
          - service: recorder.purge
            data:
              keep_days: 14
              repack: true
        else:
          - service: recorder.purge
            data:
              keep_days: 14
              repack: false

  - alias: "[System Monitor] Monitor log for errors"
    id: yaml_automation_system_monitor_monitor_log_for_errors
    mode: queued
    trigger:
      - platform: event
        event_type: system_log_event
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.level in ['WARNING', 'ERROR'] }}"
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.level == 'ERROR' }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.log_errors
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.level == 'WARNING' }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.log_warnings

  - alias: "[System Monitor] Notify on log error"
    mode: single
    id: yaml_automation_system_monitor_notify_on_log_error
    trigger:
      - platform: event
        event_type: system_log_event
        event_data:
          level: 'ERROR'
    action:
      - service: persistent_notification.create
        data:
          title: "Log Error Detected"
          message: "Error: {{ trigger.event.data.message }}"

  - alias: "[system|nuc]Periodic Profiler"
    mode: single
    id: yaml_automation_sytem_nuc_periodic_profiler
    trigger:
      - platform: time_pattern
        minutes: /10
    action:
      - service: profiler.start
        data:
          seconds: 30

  - alias: "[system|3dprinter] Manage OctoPrint integration based on printer status"
    mode: single
    description: "Automation to manage OctoPrint integration based on printer status"
    id: yaml_automation_system_3dprinter_manage_octoprint_integration
    trigger:
      # Trigger when the device tracker changes state
      - platform: state
        entity_id: device_tracker.octopi
      # Trigger when the power usage sensor changes state
      - platform: numeric_state
        entity_id: sensor.plug_3d_printer_power
        below: 5
      - platform: numeric_state
        entity_id: sensor.plug_3d_printer_power
        above: 5
      # Trigger on Home Assistant startup
      - platform: homeassistant
        event: start
    condition: []
    action:
      - choose:
        # Check if Home Assistant uptime is less than 5 minutes
        - conditions:
          - condition: template
            value_template: >
              {{ (now() - as_datetime(states('sensor.uptime'))).total_seconds() < 300 }}
          sequence:
            - delay:
                minutes: 5  # Delay for 5 minutes
      - choose:
          # Disable OctoPrint integration if the printer is offline
          - conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity_id: device_tracker.octopi
                    state: "away"
                  - condition: numeric_state
                    entity_id: sensor.plug_3d_printer_power
                    below: 5
            sequence:
              - service: homeassistant.disable_config_entry
                data:
                  config_entry_id: 4579f9b25783c90b764ed2ce0ebbbc66
          # Enable OctoPrint integration if the printer is online
          - conditions:
              - condition: and
                conditions:
                  - condition: state
                    entity_id: device_tracker.octopi
                    state: "home"
                  - condition: numeric_state
                    entity_id: sensor.plug_3d_printer_power
                    above: 5
            sequence:
              - service: homeassistant.enable_config_entry
                data:
                  config_entry_id: 4579f9b25783c90b764ed2ce0ebbbc66


################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  shelly_1_update_entities:
    name: Shelly 1 Update Entities
    entities:
      - update.shelly_kitchen_firmware
      - update.shelly_study_firmware
      - update.shelly_entry_firmware
      - update.shelly_hallway_1st_floor_firmware
      - update.shelly_hallway_2nd_floor_firmware

  shelly_1_plus_update_entities:
    name: Shelly 1 Plus Update Entities
    entities:
      - update.shelly_livingroom_firmware
      - update.shelly_washroom_firmware
      - update.shelly_porch_firmware

  shelly_1_plus_mini_update_entities:
    name: Shelly 1 Plus Mini Update Entities
    entities:
      - update.shelly_babyroom_firmware
      - update.shelly_backgarden_firmware
      - update.shelly_closet_plus1mini_firmware
      - update.shelly_guestroom_firmware

  shelly_dimmer_update_entities:
    name: Shelly Dimmer Update Entities
    entities:
      - update.shelly_bedroom_firmware
      - update.shelly_dinnertable_firmware
      - update.shelly_tamaras_room_firmware

  plug_update_entities:
    name: Plug Update Entities
    entities:
      - update.plug_3d_printer_firmware
      - update.plug_electric_car_firmware
      - update.plug_nas_firmware
      - update.plug_study_desk_firmware
      - update.plug_study_workbench_firmware
      - update.plug_tv_firmware
      - update.blitzwolf_ambilight_amplifier_firmware
      - update.blitzwolf_dishwasher_firmware
      - update.plug_router_firmware
      - update.blitzwolf_10gb_switch_firmware
      - update.plug_washing_machine_firmware
      - update.plug_watercooker_firmware

  ledstrip_update_entities:
    name: Ledstrip Update Entities
    entities:
      - update.study_cabinet_ledstrip_firmware
      - update.study_desk_ledstrip_firmware
      - update.atmoorb_left_firmware
      - update.atmoorb_right_firmware
      - update.livingroom_tv_ambilight_firmware
      - update.ledstrip_falcon_firmware

  aqm_update_entities:
    name: Air Quality Monitor Update Entities
    entities:
      - update.bedroom_air_quality_monitor_firmware
      - update.shed_air_quality_monitor_firmware
      - update.air_quality_monitor_1_firmware
      - update.aqm_guest_room_firmware
      - update.aqm_living_room_firmware_firmware
      - update.aqm_baby_room_firmware

#################
#    SCRIPTS    #
#################
script:
  update_esphome_group:
    alias: "Update ESPHome Devices Group"
    description: "Updates ESPHome devices in a specified group sequentially with error handling."
    fields:
      group_entity:
        description: "The group entity containing ESPHome update entities."
        example: "group.shellies_updates"
        required: true
        selector:
          entity:
            domain: group
      force_update:
        description: "Whether to force reflash the devices even if they are up to date."
        example: "false"
        default: false
        required: false
        selector:
          boolean:
    mode: single
    sequence:
      - variables:
          # Extract the list of entities from the specified group
          update_entities: "{{ state_attr(group_entity, 'entity_id') | list }}"
      - service: system_log.write
        data:
          message: "Starting update of ESPHome group {{ group_entity }}."
          level: info
      - repeat:
          # Iterate over each update entity in the group
          for_each: "{{ update_entities }}"
          sequence:
            - variables:
                current_update: "{{ repeat.item }}"
            - choose:
                - conditions:
                    # Combined condition to ensure:
                    # 1. The entity is in the 'update' domain
                    # 2. The entity's state is 'on' (update available)
                    - condition: template
                      value_template: >
                        {{
                          current_update.split('.')[0] == 'update' and
                          ( is_state(current_update, 'on') or force_update )
                        }}
                  sequence:
                    - service: update.install
                      target:
                        entity_id: "{{ current_update }}"
                    - wait_template: >
                        {{ is_state(current_update, 'off') or is_state(current_update, 'unavailable') }}
                      timeout: '00:10:00'  # Adjust timeout as needed
                      continue_on_timeout: false
                    - choose:
                        - conditions:
                            # Check if the update did not complete successfully
                            - condition: template
                              value_template: >
                                {{
                                  not (is_state(current_update, 'off') or is_state(current_update, 'unavailable'))
                                }}
                          sequence:
                            - service: notify.notify
                              data:
                                title: "Firmware Update Failed"
                                message: "Update failed for {{ current_update }}."
                            - service: script.turn_off
                              # Aborts the current script by turning it off
                              data:
                                entity_id: "{{ this.entity_id }}"
              # Default sequence if the conditions are not met
              default:
                - service: system_log.write
                  data:
                    message: "Skipping entity {{ current_update }} because it is not an update entity or no update is available."
                    level: info
      - service: notify.notify
        data:
          title: "Firmware Update Complete"
          message: "All devices in {{ group_entity }} have been updated successfully."

  run_profiler_every_minute:
    alias: "Run Profiler Every Minute"
    description: "Runs the profiler for 58 seconds every 60 seconds, repeating 60 times."
    mode: restart
    sequence:
      - alias: "Run profiler 60 times"
        repeat:
          count: 60
          sequence:
            - service: profiler.start
              data:
                seconds: 60  # Duration for profiler to run
            # - delay: 
            #     seconds: 60  # Waits for 60 seconds total before repeating
      - alias: "Notify completion"
        service: persistent_notification.create
        data:
          title: "Profiler Run Complete"
          message: "The profiler has successfully run 60 times over the past hour."
          notification_id: "profiler_complete"
