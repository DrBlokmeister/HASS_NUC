homeassistant:
  customize_glob:
    sensor.*db_size:
      icon: mdi:database
    sensor.mediacenter_cabinet_*:
      device_class: temperature
      unit_of_measurement: 'Â°C'
      templates:
        icon_color: >-
          var maxval = 35;
          var minval = 15;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    switch.*_mounted:
      templates:
        icon: >
          if (state === 'on' ) return 'mdi:check-network-outline'; else return 'mdi:close-network-outline';
  customize:
    switch.plexmediaserver:
      icon: mdi:plex
    binary_sensor.plexmediaserver:
      icon: mdi:plex

# monitor_docker:
#   - name: Docker
#     url: tcp://10.0.0.252:2375
#     containers:
#       - addon_core_mariadb
#       - addon_core_deconz
#       - homeassistant
#       - hassio_supervisor
#       - addon_a0d7b954_vscode
#       - addon_a0d7b954_tautulli
#       - addon_a0d7b954_ssh
#       - addon_a0d7b954_influxdb
#       - addon_a0d7b954_portainer
#       - addon_core_mosquitto
#       - hassio_multicast
#       - hassio_dns
#       - hassio_cli
#       - hassio_audio
#     rename:
#       addon_core_mariadb: MariaDB database
#       addon_core_deconz: Deconz Zigbee
#       homeassistant: Home Assistant
#       hassio_supervisor: Supervisor
#       addon_a0d7b954_vscode: VScode
#       addon_a0d7b954_tautulli: Tautulli
#       addon_a0d7b954_ssh: SSH
#       addon_a0d7b954_influxdb: InfluxDB
#       addon_a0d7b954_portainer: Portainer
#       addon_core_mosquitto: Mosquitto
#     monitored_conditions:
#       - version
#       - containers_running
#       - containers_total
#       - containers_cpu_percentage
#       - cpu_percentage
#       - status
#       - memory

counter:
  log_errors:
    name: "Log Errors"
    icon: mdi:alert-octagon
    initial: 0
    step: 1
    restore: False
  log_warnings:
    name: "Log Warnings"
    icon: mdi:alert
    initial: 0
    step: 1
    restore: False

######################
#    COMMAND LINE    #
######################
command_line:
  - sensor:
      name: "NUC Available Package Updates"
      icon: mdi:package-variant-closed
      command: "ssh -t -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q drblokmeister@10.0.0.252 '/home/drblokmeister/Documents/check_updates.sh'"
      command_timeout: 30
      scan_interval: 3600  # Adjust the scan interval as needed
      value_template: "{{ value_json.available_updates }}"
      json_attributes:
        - updatable_packages
  - sensor:
      name: 'Home Assistant Log Error Count'
      unit_of_measurement: ''
      scan_interval: 60
      command: "grep -c 'ERROR' /config/home-assistant.log"

#################
#    SENSORS    #
#################
sensor:
  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_free
      - type: memory_use
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: processor_use
      - type: last_boot
      - type: processor_use
      - type: processor_temperature


  - platform: sql
    db_url: !secret mariadb_URL
    queries:
      - name: MariaDB size
        query: >
            SELECT table_schema "database", Round(Sum(data_length + index_length) / POWER(1024,2), 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;
        column: 'value'
        unit_of_measurement: MB
      # - name: MariaDB most recorded entities
      #   query: >
      #       SELECT
      #         COUNT(*) AS cnt,
      #         COUNT(*) * 100 / (SELECT COUNT(*) FROM states) AS cnt_pct,
      #         states_meta.entity_id
      #       FROM states
      #       INNER JOIN states_meta ON states.metadata_id=states_meta.metadata_id
      #       GROUP BY states_meta.entity_id
      #       ORDER BY cnt DESC
      #       LIMIT 10
      #   column: 'entity_id'

  # - platform: influxdb
  #   username: !secret influxdb_user
  #   password: !secret influxdb_pass
  #   queries:
  #     - name: InfluxDB Size
  #       unit_of_measurement: MB
  #       value_template: '{{ value | float | round(1) }}'
  #       group_function: sum
  #       measurement: '"_internal".."tsm1_engine"'
  #       database: _internal
  #       where: 'time > now() - 10m'
  #       field: diskBytes

  # - platform: influxdb
  #   username: !secret influxdb_user
  #   password: !secret influxdb_pass
  #   queries:
  #     - name: InfluxDB Size
  #       unit_of_measurement: MB
  #       value_template: '{{ (value | float / 1024 /1024) | round(1) }}'
  #       group_function: sum
  #       measurement: '"monitor"."shard"'
  #       database: _internal
  #       where: 'time > now() - 10s'
  #       field: diskBytes
  # - platform: template
  #   sensors:
  #     hassio_uptime_human_readable:
  #       friendly_name: "Home Assistant uptime"
  #       value_template: >
  #         {{ (states( 'sensor.uptime' )|float * 60 | round(0) - 3600) | timestamp_custom(('%H:%M:%S')) }}
  #     uptime_seconds:
  #       device_class: timestamp
  #       value_template: >
  #         {{ states( 'sensor.uptime' )|float * 60 | float }}
  - platform: template
    sensors:
      running_automations:
        friendly_name: "Running Automations"
        unique_id: yaml_template_running_automations
        icon_template: "mdi:counter"
        value_template: >
          {{ states.automation | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | count() }}
        attribute_templates:
          automations: >
            {{ states.automation | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | join(', ') }}
      running_scripts:
        friendly_name: "Running Scripts"
        unique_id: yaml_template_running_scripts
        icon_template: "mdi:counter"
        value_template: >
          {{ states.script | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | count() }}
        attribute_templates:
          automations: >
            {{ states.script | selectattr('attributes.current', 'eq', 1) | map(attribute='entity_id') | list() | join(', ') }}

  - platform: filter
    name: "Filtered NUC CPU Temperature"
    entity_id: sensor.processor_temperature
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered NUC Power"
    entity_id: sensor.blitzwolf_nuc_energy_power
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered NUC CPU Use"
    entity_id: sensor.processor_use
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered Docker CPU Use"
    entity_id: sensor.docker_cpu
    filters:
      - filter: lowpass
        time_constant: 10
  - platform: filter
    name: "Filtered HA Container CPU Use"
    entity_id: sensor.docker_homeassistant_cpu
    filters:
      - filter: lowpass
        time_constant: 10

########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[System] Hass Stopped'
    initial_state: on
    trigger:
      platform: homeassistant
      event: shutdown
    action:
      - service: tts.cloud_say
        entity_id: media_player.living_room_speaker
        data:
          message: "Home Assistant shut down"
          language: en-IE
      - service: notify.mobile_app_blokmeisters21u
        data_template:
          title: "Hass.io Offline"
          message: >
            {% set running_scripts = states('sensor.running_scripts')|int %}
            {% set running_automations = states('sensor.running_automations')|int %}
            {% set script_ids = state_attr('sensor.running_scripts', 'automations') %}
            {% set automation_ids = state_attr('sensor.running_automations', 'automations') %}
            {% if running_scripts == 0 and running_automations == 0 %}
              No automations or scripts were running upon shutdown.
            {% else %}
              {% set script_msg = 'script' if running_scripts == 1 else 'scripts' %}
              {% set automation_msg = 'automation' if running_automations == 1 else 'automations' %}
              {{ running_scripts }} {{ script_msg }} ({{ script_ids }}) and {{ running_automations }} {{ automation_msg }} ({{ automation_ids }}) were running at shutdown.
            {% endif %}
          data:
            group: reminder
            tag: hassiostopstart
            icon_url: local/icons/home-assistant.png
      # - condition: state
      #   entity_id: switch.unrarredmovies_mounted
      #   state: 'on'
      # - service: switch.turn_on
      #   entity_id: switch.plexmediaserver


  - alias: '[System] Hass Started'
    initial_state: on
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: notify.mobile_app_blokmeisters21u
        data:
          message: "Hass.io was back online!"
          title: "Hass.io Online"
          data:
            group: reminder
            tag: hassiostopstart
            icon_url: local/icons/home-assistant.png
      - service: tts.cloud_say
        entity_id: media_player.living_room_speaker
        data:
          message: "Home Assistant back online"
          language: en-IE

  - alias: '[System] Hass Updater'
    initial_state: on
    trigger:
      - platform: state
        entity_id: update.home_assistant_core_update
        to: 'on'
    action:
      - service: persistent_notification.create
        data:
          message: "Hass.io version **[{{ state_attr('update.home_assistant_core_update', 'latest_version') }}]({{ state_attr('update.home_assistant_core_update', 'release_url') }})** is now available! Installed version: {{ state_attr('update.home_assistant_core_update', 'installed_version') }}"
          title: Upgrade time!
          notification_id: update_available
      # - service: hassio.addon_start
      #   data:
      #     addon: core_check_config

  - alias: '[system|database] Update MariaDB database size sensor'
    mode: single
    trigger:
      platform: time_pattern
      minutes: 5
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.mariadb_size

  - alias: '[system|database] Auto purge database'
    mode: single
    trigger:
      - platform: time
        at: "01:00:00"
    action:
      - service: recorder.purge
        data:
          keep_days: 14
          repack: true

  - alias: "[System Monitor] Monitor log for errors"
    id: yaml_automation_system_monitor_monitor_log_for_errors
    mode: queued
    trigger:
      - platform: event
        event_type: system_log_event
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.level in ['WARNING', 'ERROR'] }}"
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.level == 'ERROR' }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.log_errors
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.level == 'WARNING' }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.log_warnings

  - alias: "[System Monitor] Notify on log error"
    mode: single
    id: yaml_automation_system_monitor_notify_on_log_error
    trigger:
      - platform: event
        event_type: system_log_event
        event_data:
          level: 'ERROR'
    action:
      - service: persistent_notification.create
        data:
          title: "Log Error Detected"
          message: "Error: {{ trigger.event.data.message }}"

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
