homeassistant:
  customize: {}


monitor_docker:
  - name: Docker Tower
    url: http://10.0.0.250:2375
    monitored_conditions:
      - containers_1cpu_percentage
      - uptime
      - version
      - containers_running
      - containers_total
      - state
      - status
      - memory
      - cpu_percentage

###################
#    TEMPLATES    #
###################
template:
  - binary_sensor:
      - name: "Parity Disk Spun Up"
        unique_id: "yaml_template_binary_sensor_parity_disk_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_parity_health.attributes.power_state is defined }}"
        state: "{{ state_attr('binary_sensor.tower_parity_health', 'power_state') == 'active' }}"
      - name: "Disk 1 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_1_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_disk1_health.attributes['Power State'] is defined }}"
        state: "{{ state_attr('binary_sensor.tower_disk1_health', 'Power State') == 'Active' }}"
      - name: "Disk 2 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_2_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_disk2_health.attributes['Power State'] is defined }}"
        state: "{{ state_attr('binary_sensor.tower_disk2_health', 'Power State') == 'Active' }}"
      - name: "Disk 3 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_3_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_disk3_health.attributes['Power State'] is defined }}"
        state: "{{ state_attr('binary_sensor.tower_disk3_health', 'Power State') == 'Active' }}"
      - name: "Disk 4 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_4_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_disk4_health.attributes['Power State'] is defined }}"
        state: "{{ state_attr('binary_sensor.tower_disk4_health', 'Power State') == 'Active' }}"
      - name: "Disk 5 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_5_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_disk5_health.attributes['Power State'] is defined }}"
        state: "{{ state_attr('binary_sensor.tower_disk5_health', 'Power State') == 'Active' }}"

  - sensor:
      - name: "Unraid Parity Temperature"
        unique_id: "yaml_template_unraid_parity_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_parity_health', 'temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_parity_health', 'power_state') == 'Active' }}"
      - name: "Unraid Disk 1 Temperature"
        unique_id: "yaml_template_unraid_disk1_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_disk1_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_disk1_health', 'Power State') == 'Active' }}"
      - name: "Unraid Disk 2 Temperature"
        unique_id: "yaml_template_unraid_disk2_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_disk2_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_disk2_health', 'Power State') == 'Active' }}"
      - name: "Unraid Disk 3 Temperature"
        unique_id: "yaml_template_unraid_disk3_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_disk3_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_disk3_health', 'Power State') == 'Active' }}"
      - name: "Unraid Disk 4 Temperature"
        unique_id: "yaml_template_unraid_disk4_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_disk4_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_disk4_health', 'Power State') == 'Active' }}"
      - name: "Unraid Disk 5 Temperature"
        unique_id: "yaml_template_unraid_disk5_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_disk5_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: "{{ state_attr('binary_sensor.tower_disk5_health', 'Power State') == 'Active' }}"
      - name: "Unraid Cache Temperature"
        unique_id: "yaml_template_unraid_cache_pool_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {%- set raw = state_attr('binary_sensor.tower_cache_health', 'Temperature') %}
          {%- if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {%- else %}
            -1
          {%- endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_cache_health', 'unavailable') and
              state_attr('binary_sensor.tower_cache_health', 'Power State') == 'Active' }}

      - name: "Plex Log SQLITE Debugs"
        unique_id: yaml_template_sensor_plex_log_sqlite_debugs
        state: "{{ state_attr('sensor.plex_log_overview', 'sqlite_debug') | int(0) }}"
        icon: mdi:database-alert
        unit_of_measurement: entries
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Log SQLITE Infos"
        unique_id: yaml_template_sensor_plex_log_sqlite_infos
        state: "{{ state_attr('sensor.plex_log_overview', 'sqlite_info') | int(0) }}"
        icon: mdi:database-alert
        unit_of_measurement: errors
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Log SQLITE Warnings"
        unique_id: yaml_template_sensor_plex_log_sqlite_warnings
        state: "{{ state_attr('sensor.plex_log_overview', 'sqlite_warn') | int(0) }}"
        icon: mdi:database-alert
        unit_of_measurement: errors
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Log SQLITE Errors"
        unique_id: yaml_template_sensor_plex_log_sqlite_errors
        state: "{{ state_attr('sensor.plex_log_overview', 'sqlite_error') | int(0) }}"
        icon: mdi:database-alert
        unit_of_measurement: errors
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Log WARN Entries"
        unique_id: yaml_template_sensor_plex_log_warn_entries
        state: "{{ state_attr('sensor.plex_log_overview', 'warn') | int(0) }}"
        icon: mdi:alert-outline
        unit_of_measurement: warnings
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Log ERROR Entries"
        unique_id: yaml_template_sensor_plex_log_error_entries
        state: "{{ state_attr('sensor.plex_log_overview', 'error') | int(0) }}"
        icon: mdi:alert-circle-outline
        unit_of_measurement: errors
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"
      - name: "Plex Last Scan"
        unique_id: yaml_template_sensor_plex_last_scan
        state: "{{ state_attr('sensor.plex_log_overview', 'last_scan') or 'unavailable' }}"
        icon: mdi:magnify-scan
        availability: "{{ not is_state('sensor.plex_log_overview', 'unavailable') }}"

        # PiKVM Sensors
      - name: "piKVM Signal Level"
        unique_id: yaml_template_sensor_pikvm_signal_level
        icon: mdi:wifi-strength-2
        state: "{{ state_attr('sensor.pikvm_system_details', 'signal_level') }}"
        unit_of_measurement: "dBm"
        device_class: signal_strength
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM Link Quality"
        unique_id: yaml_template_sensor_pikvm_link_quality
        icon: mdi:wifi-strength
        state: "{{ state_attr('sensor.pikvm_system_details', 'link_quality') }}"
        unit_of_measurement: "%"
        device_class: signal_strength
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM Bit Rate"
        unique_id: yaml_template_sensor_pikvm_bit_rate
        icon: mdi:speedometer
        state: "{{ state_attr('sensor.pikvm_system_details', 'bit_rate') }}"
        unit_of_measurement: "Mb/s"
        device_class: data_rate
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM TX Power"
        unique_id: yaml_template_sensor_pikvm_tx_power
        icon: mdi:access-point
        state: "{{ state_attr('sensor.pikvm_system_details', 'tx_power') }}"
        unit_of_measurement: "dBm"
        device_class: signal_strength
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM AP MAC"
        unique_id: yaml_template_sensor_pikvm_ap_mac
        icon: mdi:lan-connect
        state: "{{ state_attr('sensor.pikvm_system_details', 'ap_mac') }}"
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM SSID"
        unique_id: yaml_template_sensor_pikvm_ssid
        icon: mdi:wifi
        state: "{{ state_attr('sensor.pikvm_system_details', 'ssid') }}"
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM Missed Beacon"
        unique_id: yaml_template_sensor_pikvm_missed_beacon
        icon: mdi:wifi-alert
        state: "{{ state_attr('sensor.pikvm_system_details', 'missed_beacon') }}"
        unit_of_measurement: "count"
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM TX Retries"
        unique_id: yaml_template_sensor_pikvm_tx_retries
        icon: mdi:reload
        state: "{{ state_attr('sensor.pikvm_system_details', 'tx_retries') }}"
        unit_of_measurement: "count"
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
      - name: "piKVM CPU Temp"
        unique_id: yaml_template_sensor_pikvm_cpu_temp
        icon: mdi:thermometer
        state: "{{ state_attr('sensor.pikvm_system_details', 'cpu_temp') }}"
        unit_of_measurement: "°C"
        device_class: temperature
        availability: "{{ not is_state('sensor.pikvm_system_details', 'unavailable') }}"
##############
#    REST    #
##############
rest:
  - resource: !secret airvpn_API_resource
    headers:
      API-KEY: !secret airvpn_API_key
    scan_interval: 60  # Set the desired update interval in seconds
    sensor:
      - name: "AirVPN exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip_new"
        value_template: >-
          {% if value_json is defined and value_json.sessions is defined and value_json.sessions | length > 0 %}
            {{ value_json.sessions[0].exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Username"
        unique_id: "yaml_restful_airvpn_username"
        value_template: >-
          {% if value_json is defined and value_json.user is defined %}
            {{ value_json.user.login }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:account"
      - name: "AirVPN VPN IP"
        unique_id: "yaml_restful_airvpn_vpn_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.vpn_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Entry IP"
        unique_id: "yaml_restful_airvpn_entry_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.entry_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Server Name"
        unique_id: "yaml_restful_airvpn_server_name"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_name }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:server"
      - name: "AirVPN Server Country"
        unique_id: "yaml_restful_airvpn_server_country"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_country }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:earth"
      - name: "AirVPN Data Uploaded"
        unique_id: "yaml_restful_airvpn_data_uploaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_read/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:upload-network-outline"
      - name: "AirVPN Data Downloaded"
        unique_id: "yaml_restful_airvpn_data_downloaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_write/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:download-network-outline"
      - name: "AirVPN Connected Since"
        unique_id: "yaml_restful_airvpn_connected_since"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ as_datetime(value_json.connection.connected_since_unix) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: timestamp
        icon: "mdi:timer-sand"
      - name: "AirVPN Upload Speed"
        unique_id: "yaml_restful_airvpn_upload_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_read/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:upload-network"
      - name: "AirVPN Download Speed"
        unique_id: "yaml_restful_airvpn_download_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_write/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:download-network"

######################
#    COMMAND LINE    #
######################
command_line:
  - switch:
      unique_id: "unraid_array_control"
      name: "NAS Unraid Array"
      icon: "mdi:harddisk"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd startarray'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd stoparray'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.unraid_array_status'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "wireguard_service_control"
      name: "NAS Wireguard Service"
      icon: "mdi:vpn"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        '/etc/rc.d/rc.wireguard start'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/etc/rc.d/rc.wireguard stop'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.wireguard_service_status'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}

  # Plex Log: Count of SQLITE mentions
  - sensor:
      name: "Plex Log Overview"
      unique_id: yaml_command_line_sensor_plex_log_overview
      icon: mdi:database-search
      scan_interval: 900
      unit_of_measurement: errors
      command: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q root@10.0.0.250 '
          LOG="/mnt/user/appdata/plex/Library/Application Support/Plex Media Server/Logs/Plex Media Server.log";
          SQLITE_DEBUG=$(grep "DEBUG" "$LOG" | grep -c "SQLITE" 2>/dev/null); SQLITE_DEBUG=${SQLITE_DEBUG:-0}
          SQLITE_INFO=$(grep "INFO" "$LOG" | grep -c "SQLITE" 2>/dev/null); SQLITE_INFO=${SQLITE_INFO:-0}
          SQLITE_WARN=$(grep "WARN" "$LOG" | grep -c "SQLITE" 2>/dev/null); SQLITE_WARN=${SQLITE_WARN:-0}
          SQLITE_ERROR=$(grep "ERROR" "$LOG" | grep -c "SQLITE" 2>/dev/null); SQLITE_ERROR=${SQLITE_ERROR:-0}
          WARN=$(grep -c "WARN" "$LOG" 2>/dev/null); WARN=${WARN:-0}
          ERROR=$(grep -c "ERROR" "$LOG" 2>/dev/null); ERROR=${ERROR:-0}
          LAST_SCAN=$(grep -F "Activity: Ended activity" "$LOG" | tail -1 | awk "{print \$1, \$2, \$3}");
          [ -z "$LAST_SCAN" ] && LAST_SCAN="";
          LAST_SCAN=${LAST_SCAN//\"/\\\"}
          # Get last SQLITE error line, if any
          SQLITE_ERROR_TEXT=$(grep "ERROR" "$LOG" | grep "SQLITE" | tail -1 | head -c 255)
          SQLITE_ERROR_TEXT=${SQLITE_ERROR_TEXT//\"/\\\"}
          echo "{\"sqlite_debug\": $SQLITE_DEBUG, \"sqlite_info\": $SQLITE_INFO, \"sqlite_warn\": $SQLITE_WARN, \"sqlite_error\": $SQLITE_ERROR, \"warn\": $WARN, \"error\": $ERROR, \"last_scan\": \"$LAST_SCAN\", \"sqlite_error_text\": \"$SQLITE_ERROR_TEXT\"}"
        ' || echo '{}'
      value_template: >
        {% if value_json is defined and value_json.error is defined %}
          {{ value_json.error | int(0) }}
        {% else %}
          0
        {% endif %}
      json_attributes:
        - sqlite_debug
        - sqlite_info
        - sqlite_warn
        - sqlite_error
        - warn
        - error
        - last_scan
        - sqlite_error_text
      availability: "{{ is_state('binary_sensor.nas_ssh_reachability', 'on') }}"

  - binary_sensor:
      name: "NAS SSH Reachability"
      command: "cat /config/www/nas_status.json | jq -r '.nas_available'"
      payload_on: "true"
      payload_off: "false"
      device_class: connectivity

  - sensor:
      name: piKVM System Details
      unique_id: yaml_command_line_sensor_pikvm_system_details
      icon: mdi:database-search
      scan_interval: 300
      command_timeout: 20
      state_class: measurement
      command: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q root@10.0.30.20 '
          PATH=$PATH:/usr/sbin:/sbin;
          iface=wlan0;
          iw=$(iwconfig "$iface");
          sig=$(echo "$iw" | grep -oP "Signal level=-?\K\d+");
          lq_pair=$(echo "$iw" | grep -oP "Link Quality=\K\d+/\d+");
          IFS=/ read lq_cur lq_max <<<"$lq_pair";
          lq_pct=$(( lq_max>0 ? lq_cur*100/lq_max : 0 ));
          bit=$(echo "$iw" | grep -oP "Bit Rate=\K[0-9.]+");
          txp=$(echo "$iw" | grep -oP "Tx-Power=\K\d+");
          apm=$(echo "$iw" | grep -oP "Access Point: \K([0-9A-F]{2}:){5}[0-9A-F]{2}");
          missed=$(echo "$iw" | grep -oP "Missed beacon:\K\d+");
          retry=$(echo "$iw" | grep -oP "Tx excessive retries:\K\d+");
          ssid=$(iwgetid -r);
          load=$(cut -d" " -f1 /proc/loadavg);
          temp=$(awk "{printf \"%.1f\", \$1/1000}" /sys/class/thermal/thermal_zone0/temp);
          printf "{\"signal_level\":%s,\"link_quality\":%s,\"bit_rate\":%s,\"tx_power\":%s,\"ap_mac\":\"%s\",\"ssid\":\"%s\",\"missed_beacon\":%s,\"tx_retries\":%s,\"load_avg\":%s,\"cpu_temp\":%s}\n" \
                "${sig:-0}" "${lq_pct:-0}" "${bit:-0}" "${txp:-0}" \
                "${apm:-\"\"}" "${ssid:-\"\"}" "${missed:-0}" "${retry:-0}" \
                "${load:-0}" "${temp:-0}"
        ' || echo '{}'
      value_template: "{{ value_json.load_avg | default(0) }}"
      json_attributes:
        - signal_level
        - link_quality
        - bit_rate
        - tx_power
        - ap_mac
        - ssid
        - missed_beacon
        - tx_retries
        - cpu_temp



#################
#    SENSORS    #
#################
sensor:


########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:
  platform: wake_on_lan
  name: BlokmeisterNAS
  host: 10.0.0.250
  mac: "BC:5F:F4:8B:7A:9E"
  turn_off:
    service: rest_command.nas_shutdown
#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "[system|network]Enter Work Zone - Start Containers"
    description: "Turns on Guacamole and Firefox containers when entering work zone."
    trigger:
      - platform: zone
        entity_id: person.sander_blok
        zone: zone.work
        event: enter
      - platform: state
        entity_id:
          - device_tracker.worklaptop_dock
          - device_tracker.worklaptop_wifi
        from: "not_home"
        to: "home"
        for:
          minutes: 2
      #can also be used to trigger container start/stop
      # - platform: state
      #   entity_id: device_tracker.worklaptop_wifi
      #   to: home
      # - platform: state
      #   entity_id: device_tracker.worklaptop_dock
      #   to: home
    action:
      - service: switch.turn_on
        target:
          entity_id:
            - switch.tower_docker_firefox
      - wait_for_trigger:
          - platform: zone
            entity_id: person.sander_blok
            zone: zone.work
            event: leave
          - platform: template
            value_template: "{{ is_state('device_tracker.worklaptop_dock', 'not_home') and is_state('device_tracker.worklaptop_wifi', 'not_home') }}"
            for:
              minutes: 15
        timeout:
          hours: 12
        continue_on_timeout: false
      - service: switch.turn_off
        entity_id:
          - switch.tower_docker_firefox
    mode: single

  - alias: "[system|network]Query NAS sensors"
    mode: single
    description: "Automatically queries the sensors in the NAS using a bash script every minute."
    trigger:
      - platform: time_pattern
        minutes: "/5"
    action:
      - service: shell_command.execute_nas_monitor_commands
      - delay:
          seconds: 30
      - service: homeassistant.update_entity
        data:
          entity_id:
            - binary_sensor.nas_ssh_reachability
            - switch.nas_unraid_array
            - switch.nas_wireguard_service

  - alias: '[system|nas]Completed Torrent Notification'
    id: yaml_automation_system_nas_completed_torrent_notification
    trigger:
      platform: event
      event_type: transmission_downloaded_torrent
    action:
      service: notify.mobile_app_blokmeisterp9pro
      data:
        title: "Torrent completed!"
        message: "{{ trigger.event.data.name }} has finished downloading!"
        data:
          sticky: "true"
          group: reminder
          tag: transmission
          icon_url: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"
          timeout: 1800

  # - alias: "[system|nas]Link Speed Alert"
  #   trigger:
  #     - platform: numeric_state
  #       entity_id: sensor.nas_link_speed
  #       below: 9000
  #       for:
  #         minutes: 10
  #   action:
  #     - service: persistent_notification.create
  #       data:
  #         title: "Network Speed Alert"
  #         message: "Warning: Network speed has dropped below 9000 Mb/s."
  #         notification_id: "network_speed_alert"
  #     - wait_for_trigger:
  #         - platform: numeric_state
  #           entity_id: sensor.nas_link_speed
  #           above: 9000
  #     - service: persistent_notification.dismiss
  #       data:
  #         notification_id: "network_speed_alert"

  - alias: "[system|nas] Notify on Plex log errors"
    id: yaml_automation_system_nas_notify_on_plex_log_errors
    description: "Sends a mobile notification when Plex log sensors detect errors or SQLITE mentions."
    mode: single
    trigger:
      # - platform: numeric_state
      #   entity_id: sensor.plex_log_error_entries
      #   above: 0
      - platform: numeric_state
        entity_id: sensor.plex_log_sqlite_errors
        above: 0
    condition: []
    action:
      - service: notify.mobile_app_blokmeisterp9pro
        data:
          title: "⚠️ Plex Log Alert"
          message: >
            {% set err = states('sensor.plex_log_error_entries')|int %}
            {% set sqlite = states('sensor.plex_log_sqlite_errors')|int %}
            Detected issues in Plex logs:
            {% if err > 0 %}• {{ err }} error entry(ies){% endif %}
            {% if sqlite > 0 %}{{ '\n' if err > 0 }}• {{ sqlite }} SQLITE mention(s) with text {{ state_attr('sensor.plex_log_overview', 'sqlite_error_text') }}{% endif %}
          data:
            clickAction: "/lovelace/4"
            sticky: "true"
            tag: "plex_log_alert"
            group: "plex_log_alert"
            notification_icon: "mdi:database-alert"

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  container_sensors_switches:
    name: "NAS Container Sensors and Switches"
    entities:
      - switch.docker_tower_apacheguacamole
      - switch.docker_tower_audiobookshelf
      - switch.docker_tower_authelia
      - switch.docker_tower_diskspeed
      - switch.docker_tower_dupeguru
      - switch.docker_tower_firefox
      - switch.docker_tower_frigate
      - switch.docker_tower_hddtemp
      - switch.docker_tower_immich
      - switch.docker_tower_iperf3
      - switch.docker_tower_ntp
      - switch.docker_tower_onedrive
      - switch.docker_tower_photoprism
      - switch.docker_tower_plex
      - switch.docker_tower_qdirstat
      - switch.docker_tower_thelounge
      - switch.docker_tower_transmission
      - switch.docker_tower_watchtower

      - sensor.docker_tower_apacheguacamole_cpu
      - sensor.docker_tower_audiobookshelf_cpu
      - sensor.docker_tower_authelia_cpu
      - sensor.docker_tower_diskspeed_cpu
      - sensor.docker_tower_dupeguru_cpu
      - sensor.docker_tower_firefox_cpu
      - sensor.docker_tower_frigate_cpu
      - sensor.docker_tower_hddtemp_cpu
      - sensor.docker_tower_immich_cpu
      - sensor.docker_tower_iperf3_cpu
      - sensor.docker_tower_ntp_cpu
      - sensor.docker_tower_onedrive_cpu
      - sensor.docker_tower_photoprism_cpu
      - sensor.docker_tower_plex_cpu
      - sensor.docker_tower_qdirstat_cpu
      - sensor.docker_tower_thelounge_cpu
      - sensor.docker_tower_transmission_cpu
      - sensor.docker_tower_watchtower_cpu

      - sensor.docker_tower_apacheguacamole_memory
      - sensor.docker_tower_audiobookshelf_memory
      - sensor.docker_tower_authelia_memory
      - sensor.docker_tower_diskspeed_memory
      - sensor.docker_tower_dupeguru_memory
      - sensor.docker_tower_firefox_memory
      - sensor.docker_tower_frigate_memory
      - sensor.docker_tower_hddtemp_memory
      - sensor.docker_tower_immich_memory
      - sensor.docker_tower_iperf3_memory
      - sensor.docker_tower_ntp_memory
      - sensor.docker_tower_onedrive_memory
      - sensor.docker_tower_photoprism_memory
      - sensor.docker_tower_plex_memory
      - sensor.docker_tower_qdirstat_memory
      - sensor.docker_tower_thelounge_memory
      - sensor.docker_tower_transmission_memory
      - sensor.docker_tower_watchtower_memory
  nas_status_sensors:
    name: "NAS Status Sensors"
    entities:
      - sensor.tower_array_usage
      # - sensor.nas_nvme_composite_temperature_file
      # - sensor.nas_parity_temperature_file
      # - sensor.nas_disk_1_temperature_file
      # - sensor.nas_disk_2_temperature_file
      # - sensor.nas_disk_3_temperature_file
      # - sensor.nas_dev_1_temperature_file
      # - sensor.nas_dev_2_temperature_file
      - binary_sensor.nas_ssh_reachability
      - switch.nas_unraid_array
      - switch.nas_wireguard_service
  airvpn_status:
    name: "AirVPN Status"
    entities:
      - switch.nas_wireguard_service
      - sensor.airvpn_exit_ip
      - sensor.airvpn_username
      - sensor.airvpn_vpn_ip
      - sensor.airvpn_exit_ip
      - sensor.airvpn_entry_ip
      - sensor.airvpn_server_name
      - sensor.airvpn_server_country
      - sensor.airvpn_data_uploaded
      - sensor.airvpn_data_downloaded
      - sensor.airvpn_connected_since
      - sensor.airvpn_upload_speed
      - sensor.airvpn_download_speed

#################
#    SCRIPTS    #
#################
script:

#######################
#    SHELL COMMAND    #
#######################
shell_command:
  execute_nas_monitor_commands: sh /config/bash_scripts/nas_monitor.sh
