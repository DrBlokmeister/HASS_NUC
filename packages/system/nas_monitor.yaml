homeassistant:
  customize:
    sensor.nas_last_boot:
      device_class: timestamp
      unit_of_measurement: ''
      friendly_name: Last boot
      icon: mdi:clock
    #
    sensor.nas_cpu_use_percent:
      friendly_name: 'CPU use'
    sensor.nas_cpu_load_1m:
      unit_of_measurement: ' '
      friendly_name: 'Load (1m)'
    sensor.nas_cpu_load_5m:
      unit_of_measurement: ' '
      friendly_name: 'Load (5m)'
    sensor.nas_cpu_load_15m:
      unit_of_measurement: ' '
      friendly_name: 'Load (15m)'
    sensor.nas_cpu_temperature:
      device_class: 'temperature'
      unit_of_measurement: 'Â°C'
      friendly_name: 'CPU temperature'
      templates:
        icon_color: >-
          var maxval = 60;
          var minval = 30;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    #
    sensor.nas_memory_use_percent:
      friendly_name: 'Memory use'
    sensor.nas_memory_free:
      unit_of_measurement: 'MiB'
      friendly_name: 'Memory free'
    #
    sensor.nas_swap_use:
      unit_of_measurement: 'MiB'
      friendly_name: 'Swap use'
      icon: mdi:harddisk
    #
    sensor.nas_pool_pool1_health:
      friendly_name: 'Pool health'
    #
    sensor.nas_alerts:
      friendly_name: 'Alert Message'
      icon: mdi:message-alert

  customize_glob:
    sensor.nas_disk_*_temperature:
      device_class: temperature
      templates:
        icon_color: >
          var maxval = 45;
          var minval = 25;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    sensor.fn_*_pct_used:
      templates:
        icon_color: >
          var maxval = 90;
          var minval = 50;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';
    sensor.nas_cpu*_temp*:
      device_class: 'temperature'
      unit_of_measurement: 'Â°C'
      friendly_name: 'CPU temperature'
      templates:
        icon_color: >-
          var maxval = 60;
          var minval = 30;
          var maxhue = 0;
          var minhue = 140;
          if (state > maxval) return 'hsl(' + maxhue.toString() + ',80%,50%)';
          if (state < minval) return 'hsl(' + minhue.toString() + ',80%,50%)';
          var hue = Math.round((Number(state) - minval) / (maxval - minval) * (maxhue - minhue) + minhue );
          return 'hsl(' + hue.toString() + ',80%,50%)';

rest_command:
  nas_shutdown:
    url: 'http://192.168.1.250:250/api/v2.0/system/shutdown'
    method: post
    username: !secret nas_user
    password: !secret nas_pass
    headers:
      content_type: 'application/json'
#################
#    SENSORS    #
#################
sensor:
  - platform: rest
    name: FN_NewStorage_report
    json_attributes:
      - name
      - used
      - used_pct
    resource: http://192.168.1.250:250/api/v2.0/storage/volume/NewStorage/?format=json
    value_template: '{{ value_json.status }}'
    username: !secret nas_user
    password: !secret nas_pass
    authentication: basic
    scan_interval: '00:05'
    force_update: true
    headers:
      Content-Type: application/json

  - platform: template
    sensors:
      fn_newstorage_pct_used:
        value_template: "{{ state_attr('sensor.FN_NewStorage_report', 'used_pct')|replace('%','') }}"
        entity_id:
          - sensor.fn_NewStorage_report
          - sensor.time
        unit_of_measurement: '%'

  - platform: template
    sensors:
      fn_newstorage_used:
        value_template: "{{ (state_attr('sensor.FN_NewStorage_report', 'used') / (1024**4)) | round(2) }}"
        entity_id:
          - sensor.fn_NewStorage_report
          - sensor.time
        unit_of_measurement: 'TB'

  - platform: rest
    name: FN_Storage2_report
    json_attributes:
      - name
      - used
      - used_pct
    resource: http://192.168.1.250:250/api/v2.0/storage/volume/Storage2/?format=json
    value_template: '{{ value_json.status }}'
    username: !secret nas_user
    password: !secret nas_pass
    authentication: basic
    scan_interval: '00:05'
    force_update: true
    headers:
      Content-Type: application/json

  - platform: template
    sensors:
      fn_storage2_pct_used:
        value_template: "{{ state_attr('sensor.FN_Storage2_report', 'used_pct')|replace('%','') }}"
        entity_id:
          - sensor.fn_NewStorage_report
          - sensor.time
        unit_of_measurement: '%'

  - platform: template
    sensors:
      fn_storage2_used:
        value_template: "{{ (state_attr('sensor.FN_Storage2_report', 'used') / (1024**4)) | round(2) }}"
        entity_id:
          - sensor.fn_NewStorage_report
          - sensor.time
        unit_of_measurement: 'TB'

  - platform: rest
    name: FN_alert_level
    resource: http://192.168.1.250:250/api/v2.0/system/alert/?format=json
    value_template: '{{ value_json.objects[0].level }}'
    username: !secret nas_user
    password: !secret nas_pass
    authentication: basic
    scan_interval: 60
    headers:
      Content-Type: application/json

  - platform: rest
    name: FN_alert_message
    resource: http://192.168.1.250:250/api/v2.0/system/alert/?format=json
    value_template: '{{ value_json.objects[0].message }}'
    username: !secret nas_user
    password: !secret nas_pass
    authentication: basic
    scan_interval: 60
    headers:
      Content-Type: application/json

  - platform: rest
    name: FN_version
    json_attributes:
      - fullversion
      - name
      - version
    resource: http://192.168.1.250:250/api/v2.0/system/version/?format=json
    value_template: '{{ value_json.fullversion }}'
    username: !secret nas_user
    password: !secret nas_pass
    authentication: basic
    headers:
      Content-Type: application/json

  # - platform: rest
  #   name: 'Ubuntu_VM'
  #   json_attributes_path: "$.[0]"
  #   json_attributes:
  #     - state
  #     - info
  #   resource: http://192.168.1.250:250/api/v1.0/vm/vm/?format=json
  #   value_template: '{{ value_json.state }}'
  #   username: !secret nas_user
  #   password: !secret nas_pass
  #   authentication: basic
  #   headers:
  #     Content-Type: application/json

  - platform: template
    sensors:
      nas_cpu_alert_level:
        value_template: >-
          {{ (states("sensor.nas_cpu_use_percent")|int > 100)|int
            + (states("sensor.nas_cpu_use_percent")|int > 300)|int }}
      nas_memory_alert_level:
        value_template: >-
          {{ (states("sensor.nas_memory_use_percent")|int > 70)|int }}
      nas_disks_alert_level:
        value_template: >-
          {{ [
            (states("sensor.nas_disk_ada0_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada0_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada0_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada1_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada1_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada1_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada2_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada2_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada2_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada3_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada3_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada3_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada4_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada4_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada4_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada5_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada5_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada5_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada6_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada6_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada6_temperature")|int > 55)|int,
            (states("sensor.nas_disk_ada7_temperature")|int < 25)|int
              + (states("sensor.nas_disk_ada7_temperature")|int > 45)|int
              + (states("sensor.nas_disk_ada7_temperature")|int > 55)|int,
          ]|max }}
      nas_pools_alert_level:
        value_template: >-
          {{ [
            (states("sensor.nas_pool_NewStorage_use_percent")|int >= 80)|int
              + (states("sensor.nas_pool_NewStorage_use_percent")|int >= 90)|int,
            2 - 2 * (states("sensor.nas_pool_NewStorage_health") == 'ONLINE')|int
              - (states("sensor.nas_pool_NewStorage_health") == 'DEGRADED')|int,
          ]|max }}
      nas_alert_level:
        value_template: >-
          {{ [
            states("sensor.nas_cpu_alert_level"),
            states("sensor.nas_memory_alert_level"),
            states("sensor.nas_disks_alert_level"),
            states("sensor.nas_pools_alert_level"),
          ]|max }}
      nas_load_pct:
        value_template: "{{ states('sensor.nas_load')|float * 25}}"
        unit_of_measurement: '%'
        friendly_name: "Nas Load"
  - platform: mqtt
    name: nas_last_boot
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.last_boot }}
  - platform: mqtt
    name: nas_cpu_use_percent
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ 100 - value_json.cpu_stat.idle | round(1) }}
  - platform: mqtt
    name: nas_cpu_load_1m
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.cpu_load_1m }}
  - platform: mqtt
    name: nas_cpu_load_5m
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.cpu_load_5m }}
  - platform: mqtt
    name: nas_cpu_load_15m
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.cpu_load_15m }}
  - platform: mqtt
    name: nas_cpu_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.cpu_temperature|float }}
  - platform: mqtt
    name: nas_memory_use_percent
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.memory_stat.percent|float }}
  - platform: mqtt
    name: nas_memory_free
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ ((value_json.memory_stat.free | int) / 1024 / 1024) | round(1) }}
  - platform: mqtt
    name: nas_swap_use
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ ((value_json.swap_stat.used | int) / 1024 / 1024) | round(1) }}
  - platform: mqtt
    name: nas_disk_ada0_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada0|int }}
  - platform: mqtt
    name: nas_disk_ada1_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada1|int }}
  - platform: mqtt
    name: nas_disk_ada2_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada2|int }}
  - platform: mqtt
    name: nas_disk_ada3_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada3|int }}
  - platform: mqtt
    name: nas_disk_ada4_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada4|int }}
  - platform: mqtt
    name: nas_disk_ada5_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada5|int }}
  - platform: mqtt
    name: nas_disk_ada6_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada6|int }}
  - platform: mqtt
    name: nas_disk_ada7_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.ada7|int }}
  - platform: mqtt
    name: nas_disk_da0_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.da0|int }}
  - platform: mqtt
    name: nas_disk_da1_temperature
    unit_of_measurement: 'Â°C'
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.disks_temperature.da1|int }}

  - platform: mqtt
    name: nas_pool_NewStorage_use_percent
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.pools_stat.NewStorage.percent }}
  - platform: mqtt
    name: nas_pool_NewStorage_health
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.pools_stat.NewStorage.health }}
  - platform: mqtt
    name: nas_pool_Storage2_use_percent
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.pools_stat.Storage2.percent }}
  - platform: mqtt
    name: nas_pool_Storage2_health
    state_topic: "sensor/blokmeisternas_8_8_8_8_state"
    value_template: >-
      {{ value_json.pools_stat.Storage2.health }}

  - platform: command_line
    name: 'NAS CPU0 temp'
    # friendly_name: 'CPU Core 0 temp'
    unit_of_measurement: 'Â°C'
    scan_interval: 60
    command: >-
      ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
      root@192.168.1.250
      sysctl dev.cpu.0 | grep temperature | tr '.' ' ' | awk '{print $5}'

  - platform: command_line
    name: 'NAS CPU1 temp'
    # friendly_name: 'CPU Core 1 temp'
    unit_of_measurement: 'Â°C'
    scan_interval: 60
    command: >-
      ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
      root@192.168.1.250
      sysctl dev.cpu.1 | grep temperature | tr '.' ' ' | awk '{print $5}'

  - platform: command_line
    name: 'NAS CPU2 temp'
    # friendly_name: 'CPU Core 2 temp'
    unit_of_measurement: 'Â°C'
    scan_interval: 60
    command: >-
      ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
      root@192.168.1.250
      sysctl dev.cpu.2 | grep temperature | tr '.' ' ' | awk '{print $5}'

  - platform: command_line
    name: 'NAS CPU3 temp'
    # friendly_name: 'CPU Core 3 temp'
    unit_of_measurement: 'Â°C'
    scan_interval: 60
    command: >-
      ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
      root@192.168.1.250
      sysctl dev.cpu.3 | grep temperature | tr '.' ' ' | awk '{print $5}'

  # - platform: command_line
  #   name: 'NAS load'
  #   # friendly_name: 'Load'
  #   unit_of_measurement: '%'
  #   scan_interval: 60
  #   command: >-
  #     ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
  #     root@192.168.1.250
  #     uptime | awk '{print $(NF-1)}' | sed 's/,//g'

  - platform: command_line
    name: 'Transmission status'
    scan_interval: 60
    command: >-
      ssh -i /config/.ssh/id_rsa -o StrictHostKeyChecking=no -q -p 300
      root@192.168.1.250
      iocage get state transmission

########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:
  platform: wake_on_lan
  name: BlokmeisterNAS
  host: 192.168.1.250
  mac: "BC:5F:F4:8B:7A:9E"
  turn_off:
    service: rest_command.nas_shutdown
#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[nas|logging]disable logging when NAS is offline'
    mode: restart
    trigger:
      - platform: state
        entity_id: switch.blokmeisternas
        to: 'off'
        for:
          minutes: 5
      - platform: numeric_state #if the state was already off at startup, we also need to trigger
        entity_id: sensor.uptime
        above: 5
    condition:
      condition: state
      entity_id: switch.blokmeisternas
      state: 'off'
    action:
      - wait_template: "{{ states('sensor.uptime')|int > 5 }}"
        timeout: '00:05:00'
      - service: logger.set_level
        data:
          homeassistant.components.rest.sensor: fatal  #don't log rest sensors
          homeassistant.components.command_line: fatal #don't log command_line sensors
          homeassistant.helpers.entity: fatal #this component is also triggered when above don't update
      - service: system_log.write
        data:
          message: 'Default logging level for homeassistant.components.rest.sensor, homeassistant.components.command_line and homeassistant.helpers.entity changed to FATAL to prevent error log pollution (NAS offline)'
          level: warning
      - wait_template: "{{ is_state('switch.blokmeisternas','on') }}"
      - service: logger.set_level
        data:
          homeassistant.components.rest.sensor: info
          homeassistant.components.command_line: info
          homeassistant.helpers.entity: info
      - service: system_log.write
        data:
          message: 'Default logging level for homeassistant.components.rest.sensor, homeassistant.components.command_line and homeassistant.helpers.entity changed back to INFO (NAS online)'
          level: warning

  - alias: '[nas|shutdown] Ask for shutdown when at work'
    mode: restart
    trigger:
      - platform: state
        entity_id: person.sander_blok
        to: 'work'
        for:
          minutes: 10
    condition:
      - condition: state
        entity_id: switch.blokmeisternas
        state: 'on'
    action:
      - service: automation.turn_on
        entity_id: automation.nas_shutdown_trigger_shutdown_dependent_on_response
      # - service: notify.mobile_app_blokmeister_op6
      #   data:
      #     title: 'Shutdown NAS'
      #     message: 'NAS is still on. Want to turn it off?'
      #     data:
      #       actions:
      #         - action: poweron
      #           title: Keep on
      #         - action: poweroff
      #           title: Shutdown
      - service: notify.mobile_app_blokmeister_op6_haapp
        data:
          title: 'Shutdown NAS'
          message: 'NAS is still on. Want to turn it off?'
          data:
            group: reminder
            tag: nasshutdown
            icon_url: local/icons/nas.png
            actions:
              - action: "poweron"
                title: "Keep on"
              - action: "poweroff"
                title: "Shutdown"
      - delay:
          minutes: 10
      - service: automation.turn_off
        entity_id: automation.nas_shutdown_trigger_shutdown_dependent_on_response

  - alias: '[nas|shutdown] Trigger shutdown dependent on response'
    mode: restart
    trigger:
      - platform: event
        event_type: ariela_notification_clicked
        event_data:
          action: poweroff
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "poweroff"
    condition: []
    action:
      - service: switch.turn_off
        entity_id: switch.blokmeisternas
      - wait_template: "{{ is_state('switch.blokmeisternas', 'off') }}"
        timeout:
          minutes: 5
      # - service: notify.mobile_app_blokmeister_op6
      #   data:
      #     title: 'NAS shutdown'
      #     message: 'NAS was successfully shut down'
      - service: notify.mobile_app_blokmeister_op6_haapp
        data:
          title: 'Shutdown NAS'
          message: 'NAS was successfully shut down'
          data:
            group: reminder
            tag: nasshutdown
            icon_url: local/icons/nas.png

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  nas_rest_sensors:
    entities:
      - sensor.fn_alert_level
      - sensor.fn_alert_message
      - sensor.fn_newstorage_pct_used
      - sensor.fn_newstorage_report
      - sensor.fn_newstorage_used
      - sensor.fn_storage2_pct_used
      - sensor.fn_storage2_report
      - sensor.fn_storage2_used
      - sensor.fn_version
  nas_cmd_sensors:
    entities:
      - sensor.nas_cpu0_temp
      - sensor.nas_cpu1_temp
      - sensor.nas_cpu2_temp
      - sensor.nas_cpu3_temp
      - sensor.transmission_status
  nas_mqtt_sensors:
    entities:
      - sensor.nas_cpu_load_15m
      - sensor.nas_cpu_load_1m
      - sensor.nas_cpu_load_5m
      - sensor.nas_cpu_temperature
      - sensor.nas_cpu_use_percent
      - sensor.nas_memory_free
      - sensor.nas_memory_use_percent
      - sensor.nas_swap_use
      - sensor.nas_disk_ada0_temperature
      - sensor.nas_disk_ada1_temperature
      - sensor.nas_disk_ada2_temperature
      - sensor.nas_disk_ada3_temperature
      - sensor.nas_disk_ada4_temperature
      - sensor.nas_disk_ada5_temperature
      - sensor.nas_disk_ada6_temperature
      - sensor.nas_disk_ada7_temperature
      - sensor.nas_disk_da0_temperature
      - sensor.nas_disk_da1_temperature
      - sensor.nas_pool_newstorage_health
      - sensor.nas_pool_newstorage_use_percent
      - sensor.nas_pool_storage2_health
      - sensor.nas_pool_storage2_use_percent
#################
#    SCRIPTS    #
#################
script:
