homeassistant:
  customize:

##############
#    REST    #
##############
rest:
  - resource: !secret airvpn_API_resource
    headers:
      API-KEY: !secret airvpn_API_key
    scan_interval: 60  # Set the desired update interval in seconds
    sensor:
      - name: "AirVPN exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip_new"
        value_template: >-
          {% if value_json is defined and value_json.sessions is defined and value_json.sessions | length > 0 %}
            {{ value_json.sessions[0].exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Username"
        unique_id: "yaml_restful_airvpn_username"
        value_template: >-
          {% if value_json is defined and value_json.user is defined %}
            {{ value_json.user.login }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:account"
      - name: "AirVPN VPN IP"
        unique_id: "yaml_restful_airvpn_vpn_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.vpn_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Entry IP"
        unique_id: "yaml_restful_airvpn_entry_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.entry_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Server Name"
        unique_id: "yaml_restful_airvpn_server_name"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_name }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:server"
      - name: "AirVPN Server Country"
        unique_id: "yaml_restful_airvpn_server_country"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_country }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:earth"
      - name: "AirVPN Data Uploaded"
        unique_id: "yaml_restful_airvpn_data_uploaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_read/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:upload-network-outline"
      - name: "AirVPN Data Downloaded"
        unique_id: "yaml_restful_airvpn_data_downloaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_write/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:download-network-outline"
      - name: "AirVPN Connected Since"
        unique_id: "yaml_restful_airvpn_connected_since"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ as_datetime(value_json.connection.connected_since_unix) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: timestamp
        icon: "mdi:timer-sand"
      - name: "AirVPN Upload Speed"
        unique_id: "yaml_restful_airvpn_upload_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_read/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:upload-network"
      - name: "AirVPN Download Speed"
        unique_id: "yaml_restful_airvpn_download_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_write/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:download-network"

######################
#    COMMAND LINE    #
######################
command_line:
  - switch:
      unique_id: "yaml_command_line_switch_transmission_container"
      name: "Transmission Container"
      icon: "mdi:car-shift-pattern"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start transmission"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop transmission"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.transmission_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_plex_container"
      name: "Plex Container"
      icon: "mdi:plex"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start plex"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop plex"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.plex_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_portainer_ce_container"
      name: "Portainer CE Container"
      icon: "mdi:docker"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Portainer-CE"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Portainer-CE"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '."Portainer-CE_container_state"'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_firefox_container"
      name: "Firefox Container"
      icon: "mdi:firefox"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Firefox"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Firefox"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.Firefox_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_apache_guacamole_container"
      name: "Apache Guacamole Container"
      icon: "mdi:application"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start ApacheGuacamole"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop ApacheGuacamole"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.ApacheGuacamole_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_photoprism_container"
      name: "PhotoPrism Container"
      icon: "mdi:image-multiple"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start PhotoPrism"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop PhotoPrism"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.PhotoPrism_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "yaml_command_line_switch_onedrive_container"
      name: "OneDrive Container"
      icon: "mdi:cloud-outline"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker start Onedrive"
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        "docker stop Onedrive"
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.Onedrive_container_state'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}

  - switch:
      unique_id: "unraid_array_control"
      name: "NAS Unraid Array"
      icon: "mdi:harddisk"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd startarray'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd stoparray'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.unraid_array_status'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "wireguard_service_control"
      name: "NAS Wireguard Service"
      icon: "mdi:vpn"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        '/etc/rc.d/rc.wireguard start'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/etc/rc.d/rc.wireguard stop'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.wireguard_service_status'
      value_template: "{{ value == 'true' or value == true }}"

  - binary_sensor:
      name: "NAS SSH Reachability"
      command: "cat /config/www/nas_status.json | jq -r '.nas_available'"
      payload_on: "true"
      payload_off: "false"
      device_class: connectivity

  - sensor:
      name: "NAS CPU Usage File"
      icon: mdi:cpu-64-bit
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('cpu_usage', 0) }}"
  - sensor:
      name: "NAS CPU Temperature File"
      icon: mdi:thermometer
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('cpu_temperature', 0) }}"
  - sensor:
      name: "NAS Total Memory File"
      icon: mdi:memory
      unit_of_measurement: 'MB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('total_memory', 0) }}"
  - sensor:
      name: "NAS Used Memory File"
      icon: mdi:memory
      unit_of_measurement: 'MB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('used_memory', 0) }}"
  - sensor:
      name: "NAS Used Disk Space File"
      icon: mdi:harddisk
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('used_disk_space', 0) }}"
  - sensor:
      name: "NAS NVMe Composite Temperature File"
      icon: mdi:thermometer
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('nvme_composite_temperature', 0) }}"
  - sensor:
      name: "NAS Parity Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('parity_temperature', 0) }}"
  - sensor:
      name: "NAS Disk 1 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('disk_1_temperature', 0) }}"
  - sensor:
      name: "NAS Disk 2 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('disk_2_temperature', 0) }}"
  - sensor:
      name: "NAS Disk 3 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('disk_3_temperature', 0) }}"
  - sensor:
      name: "NAS Dev 1 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('dev_1_temperature', 0) }}"
  - sensor:
      name: "NAS Dev 2 Temperature File"
      icon: mdi:harddisk
      unit_of_measurement: '°C'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('dev_2_temperature', 0) }}"

  - sensor:
      name: "Transmission CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('transmission_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "Transmission Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = "229.5MiB" %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '%0.3f' | format(0) }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "Transmission Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('transmission_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "Plex CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('plex_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "Plex Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.plex_mem_usage %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '%0.3f' | format(0) }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "Plex Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('plex_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "Portainer-CE CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('Portainer-CE_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "Portainer-CE Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.get('Portainer-CE_mem_usage', '0B') %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '0.000' }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "Portainer-CE Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('Portainer-CE_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "Firefox CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('Firefox_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "Firefox Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.get('Firefox_mem_usage', '0B') %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '0.000' }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "Firefox Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('Firefox_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "ApacheGuacamole CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('ApacheGuacamole_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "ApacheGuacamole Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.get('ApacheGuacamole_mem_usage', '0B') %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '0.000' }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "ApacheGuacamole Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('ApacheGuacamole_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "PhotoPrism CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('photoprism_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "PhotoPrism Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.get('PhotoPrism_mem_usage', '0B') %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '0.000' }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "PhotoPrism Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('photoprism_mem_perc', 0) }}"
      icon: mdi:percent
  - sensor:
      name: "OneDrive CPU Usage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('onedrive_cpu_usage', 0) }}"
      icon: mdi:cpu-64-bit
  - sensor:
      name: "OneDrive Memory Usage"
      unit_of_measurement: 'GB'
      command: "cat /config/www/nas_status.json"
      value_template: >
        {% set mem_usage = value_json.get('Onedrive_mem_usage', '0B') %}
        {% set value = mem_usage | regex_replace('([^0-9.]+)', '') | float %}
        {% set unit = mem_usage | regex_replace('([0-9.]+)', '') %}
        {% if unit == 'MiB' %}
          {{ '%0.3f' | format(value / 1024) }}
        {% elif unit == 'GiB' %}
          {{ '%0.3f' | format(value) }}
        {% elif unit == 'KiB' %}
          {{ '%0.3f' | format(value / (1024 * 1024)) }}
        {% elif unit == 'B' %}
          {{ '%0.3f' | format(value / (1024 * 1024 * 1024)) }}
        {% else %}
          {{ '0.000' }}  # Fallback in case unit is not recognized
        {% endif %}
      icon: mdi:memory
  - sensor:
      name: "OneDrive Memory Usage Percentage"
      unit_of_measurement: '%'
      command: "cat /config/www/nas_status.json"
      value_template: "{{ value_json.get('onedrive_mem_perc', 0) }}"
      icon: mdi:percent


#################
#    SENSORS    #
#################
sensor:


########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:
  platform: wake_on_lan
  name: BlokmeisterNAS
  host: 192.168.1.250
  mac: "BC:5F:F4:8B:7A:9E"
  turn_off:
    service: rest_command.nas_shutdown
#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "[system|network]Enter Work Zone - Start Containers"
    description: "Turns on Guacamole and Firefox containers when entering work zone."
    trigger:
      - platform: zone
        entity_id: person.sander_blok
        zone: zone.work
        event: enter
    action:
      - service: switch.turn_on
        target:
          entity_id:
            - switch.apache_guacamole_container
            - switch.firefox_container
      - wait_for_trigger:
          - platform: zone
            entity_id: person.sander_blok
            zone: zone.work
            event: leave
        timeout:
          hours: 12
        continue_on_timeout: false
      - service: switch.turn_off
        entity_id:
          - switch.apache_guacamole_container
          - switch.firefox_container
    mode: single

  - alias: "[system|network]Query NAS sensors"
    mode: single
    description: "Automatically queries the sensors in the NAS using a bash script every minute."
    trigger:
      - platform: time_pattern
        minutes: "/1"
    action:
      - service: shell_command.execute_nas_monitor_commands
      - delay:
          seconds: 5
      - service: homeassistant.update_entity
        data:
          entity_id:
            - binary_sensor.nas_ssh_reachability
            - sensor.nas_cpu_usage_file
            - sensor.nas_cpu_temperature_file
            - sensor.nas_total_memory_file
            - sensor.nas_used_memory_file
            - sensor.nas_used_disk_space_file
            - sensor.nas_nvme_composite_temperature_file
            - sensor.nas_parity_temperature_file
            - sensor.nas_disk_1_temperature_file
            - sensor.nas_disk_2_temperature_file
            - sensor.nas_disk_3_temperature_file
            - sensor.nas_dev_1_temperature_file
            - sensor.nas_dev_2_temperature_file
            - switch.transmission_container
            - switch.plex_container
            - switch.portainer_ce_container
            - switch.firefox_container
            - switch.apache_guacamole_container
            - switch.photoprism_container
            - switch.onedrive_container
            - switch.nas_unraid_array
            - switch.nas_wireguard_service
            - sensor.transmission_cpu_usage
            - sensor.transmission_memory_usage
            - sensor.transmission_memory_usage_percentage
            - sensor.plex_cpu_usage
            - sensor.plex_memory_usage
            - sensor.plex_memory_usage_percentage
            - sensor.portainer_ce_cpu_usage
            - sensor.portainer_ce_memory_usage
            - sensor.portainer_ce_memory_usage_percentage
            - sensor.firefox_cpu_usage
            - sensor.firefox_memory_usage
            - sensor.firefox_memory_usage_percentage
            - sensor.apacheguacamole_cpu_usage
            - sensor.apacheguacamole_memory_usage
            - sensor.apacheguacamole_memory_usage_percentage
            - sensor.photoprism_cpu_usage
            - sensor.photoprism_memory_usage
            - sensor.photoprism_memory_usage_percentage
            - sensor.onedrive_cpu_usage
            - sensor.onedrive_memory_usage
            - sensor.onedrive_memory_usage_percentage

  - alias: 'Completed Torrent'
    trigger:
      platform: event
      event_type: transmission_downloaded_torrent
    action:
      service: notify.mobile_app_blokmeisters21u
      data:
        title: "Torrent completed!"
        message: "{{ trigger.event.data.name }} has finished downloading!"
        data:
          group: reminder
          tag: transmission
          icon_url: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"
          timeout: 1800
################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:

#######################
#    SHELL COMMAND    #
#######################
shell_command:
  execute_nas_monitor_commands: sh /config/bash_scripts/nas_monitor.sh
