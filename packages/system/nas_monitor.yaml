homeassistant:
  customize: {}


monitor_docker:
  - name: Docker Tower
    url: http://10.0.0.250:2375
    monitored_conditions:
      - containers_1cpu_percentage
      - uptime
      - version
      - containers_running
      - containers_total
      - state
      - status
      - memory
      - cpu_percentage

###################
#    TEMPLATES    #
###################
template:
  - binary_sensor:
      - name: "Parity Disk Spun Up"
        unique_id: "yaml_template_binary_sensor_parity_disk_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_parity_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_parity_health.attributes.power_state == 'active' }}"
      - name: "Disk 1 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_1_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_array_disk1_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_array_disk1_health.attributes.power_state == 'active' }}"
      - name: "Disk 2 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_2_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_array_disk2_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_array_disk2_health.attributes.power_state == 'active' }}"
      - name: "Disk 3 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_3_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_array_disk3_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_array_disk3_health.attributes.power_state == 'active' }}"
      - name: "Disk 4 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_4_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_array_disk4_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_array_disk4_health.attributes.power_state == 'active' }}"
      - name: "Disk 5 Spun Up"
        unique_id: "yaml_template_binary_sensor_nas_disk_5_spun_up"
        icon: mdi:harddisk
        device_class: running
        availability: "{{ states.binary_sensor.tower_array_disk5_health.attributes.power_state is defined }}"
        state: "{{ states.binary_sensor.tower_array_disk5_health.attributes.power_state == 'active' }}"

  - sensor:
      - name: "Unraid Parity Temperature"
        unique_id: "yaml_template_unraid_parity_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_parity_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_parity_health', 'unavailable') and
              state_attr('binary_sensor.tower_parity_health', 'power_state') == 'active' }}
      - name: "Unraid Disk 1 Temperature"
        unique_id: "yaml_template_unraid_disk1_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_array_disk1_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_array_disk1_health', 'unavailable') and
              state_attr('binary_sensor.tower_array_disk1_health', 'power_state') == 'active' }}
      - name: "Unraid Disk 2 Temperature"
        unique_id: "yaml_template_unraid_disk2_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_array_disk2_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_array_disk2_health', 'unavailable') and
              state_attr('binary_sensor.tower_array_disk2_health', 'power_state') == 'active' }}
      - name: "Unraid Disk 3 Temperature"
        unique_id: "yaml_template_unraid_disk3_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_array_disk3_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_array_disk3_health', 'unavailable') and
              state_attr('binary_sensor.tower_array_disk3_health', 'power_state') == 'active' }}
      - name: "Unraid Disk 4 Temperature"
        unique_id: "yaml_template_unraid_disk4_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_array_disk4_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_array_disk4_health', 'unavailable') and
              state_attr('binary_sensor.tower_array_disk4_health', 'power_state') == 'active' }}
      - name: "Unraid Disk 5 Temperature"
        unique_id: "yaml_template_unraid_disk5_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_array_disk5_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_array_disk5_health', 'unavailable') and
              state_attr('binary_sensor.tower_array_disk5_health', 'power_state') == 'active' }}
      - name: "Unraid Cache Pool Temperature"
        unique_id: "yaml_template_unraid_cache_pool_temperature"
        device_class: temperature
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        state: >
          {% set raw = state_attr('binary_sensor.tower_pool_cache_health', 'temperature') %}
          {% if raw is string and raw.endswith('°C') %}
            {{ raw.replace('°C', '') | float(-1) }}
          {% else %}
            -1
          {% endif %}
        availability: >
          {{ not is_state('binary_sensor.tower_pool_cache_health', 'unavailable') and
              state_attr('binary_sensor.tower_pool_cache_health', 'power_state') == 'active' }}



##############
#    REST    #
##############
rest:
  - resource: !secret airvpn_API_resource
    headers:
      API-KEY: !secret airvpn_API_key
    scan_interval: 60  # Set the desired update interval in seconds
    sensor:
      - name: "AirVPN exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip_new"
        value_template: >-
          {% if value_json is defined and value_json.sessions is defined and value_json.sessions | length > 0 %}
            {{ value_json.sessions[0].exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Username"
        unique_id: "yaml_restful_airvpn_username"
        value_template: >-
          {% if value_json is defined and value_json.user is defined %}
            {{ value_json.user.login }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:account"
      - name: "AirVPN VPN IP"
        unique_id: "yaml_restful_airvpn_vpn_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.vpn_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Exit IP"
        unique_id: "yaml_restful_airvpn_exit_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.exit_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Entry IP"
        unique_id: "yaml_restful_airvpn_entry_ip"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.entry_ip }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:ip-network-outline"
      - name: "AirVPN Server Name"
        unique_id: "yaml_restful_airvpn_server_name"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_name }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:server"
      - name: "AirVPN Server Country"
        unique_id: "yaml_restful_airvpn_server_country"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ value_json.connection.server_country }}
          {% else %}
            'unavailable'
          {% endif %}
        icon: "mdi:earth"
      - name: "AirVPN Data Uploaded"
        unique_id: "yaml_restful_airvpn_data_uploaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_read/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:upload-network-outline"
      - name: "AirVPN Data Downloaded"
        unique_id: "yaml_restful_airvpn_data_downloaded"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.bytes_write/(1024*1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_size
        unit_of_measurement: GB
        icon: "mdi:download-network-outline"
      - name: "AirVPN Connected Since"
        unique_id: "yaml_restful_airvpn_connected_since"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ as_datetime(value_json.connection.connected_since_unix) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: timestamp
        icon: "mdi:timer-sand"
      - name: "AirVPN Upload Speed"
        unique_id: "yaml_restful_airvpn_upload_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_read/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:upload-network"
      - name: "AirVPN Download Speed"
        unique_id: "yaml_restful_airvpn_download_speed"
        value_template: >-
          {% if value_json is defined and value_json.connection is defined %}
            {{ (value_json.connection.speed_write/(1024*1024))|round(2) }}
          {% else %}
            'unavailable'
          {% endif %}
        device_class: data_rate
        unit_of_measurement: MB/s
        icon: "mdi:download-network"

######################
#    COMMAND LINE    #
######################
command_line:
  - switch:
      unique_id: "unraid_array_control"
      name: "NAS Unraid Array"
      icon: "mdi:harddisk"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd startarray'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/usr/local/sbin/emcmd stoparray'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.unraid_array_status'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}
  - switch:
      unique_id: "wireguard_service_control"
      name: "NAS Wireguard Service"
      icon: "mdi:vpn"
      command_on: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no -q
        root@10.0.0.250
        '/etc/rc.d/rc.wireguard start'
      command_off: >-
        ssh -i /config/.ssh/NUC_id_rsa -o StrictHostKeyChecking=no
        -q root@10.0.0.250
        '/etc/rc.d/rc.wireguard stop'
      command_state: >-
        cat /config/www/nas_status.json | jq -r '.wireguard_service_status'
      value_template: "{{ value == 'true' or value == true }}"
      availability: >-
        {{ states('binary_sensor.nas_ssh_reachability') }}

  - binary_sensor:
      name: "NAS SSH Reachability"
      command: "cat /config/www/nas_status.json | jq -r '.nas_available'"
      payload_on: "true"
      payload_off: "false"
      device_class: connectivity

#################
#    SENSORS    #
#################
sensor:


########################
#    BINARY SENSORS    #
########################
binary_sensor:

##################
#    SWITCHES    #
##################
switch:
  platform: wake_on_lan
  name: BlokmeisterNAS
  host: 10.0.0.250
  mac: "BC:5F:F4:8B:7A:9E"
  turn_off:
    service: rest_command.nas_shutdown
#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: "[system|network]Enter Work Zone - Start Containers"
    description: "Turns on Guacamole and Firefox containers when entering work zone."
    trigger:
      - platform: zone
        entity_id: person.sander_blok
        zone: zone.work
        event: enter
      - platform: state
        entity_id:
          - device_tracker.worklaptop_dock
          - device_tracker.worklaptop_wifi
        from: "not_home"
        to: "home"
        for:
          minutes: 2
      #can also be used to trigger container start/stop
      # - platform: state
      #   entity_id: device_tracker.worklaptop_wifi
      #   to: home
      # - platform: state
      #   entity_id: device_tracker.worklaptop_dock
      #   to: home
    action:
      - service: switch.turn_on
        target:
          entity_id:
            # - switch.unifi_network_guac_http
            - switch.tower_docker_swag
            - switch.tower_docker_apacheguacamole
            - switch.tower_docker_firefox
            - switch.unifi_network_swag_http_https
            - switch.unifi_network_swag_https
      - wait_for_trigger:
          - platform: zone
            entity_id: person.sander_blok
            zone: zone.work
            event: leave
          - platform: template
            value_template: "{{ is_state('device_tracker.worklaptop_dock', 'not_home') and is_state('device_tracker.worklaptop_wifi', 'not_home') }}"
            for:
              minutes: 15
        timeout:
          hours: 12
        continue_on_timeout: false
      - service: switch.turn_off
        entity_id:
          # - switch.unifi_network_guac_http
          - switch.tower_docker_swag
          - switch.tower_docker_apacheguacamole
          - switch.tower_docker_firefox
          - switch.unifi_network_swag_http_https
          - switch.unifi_network_swag_https
    mode: single

  - alias: "[system|network]Query NAS sensors"
    mode: single
    description: "Automatically queries the sensors in the NAS using a bash script every minute."
    trigger:
      - platform: time_pattern
        minutes: "/5"
    action:
      - service: shell_command.execute_nas_monitor_commands
      - delay:
          seconds: 30
      - service: homeassistant.update_entity
        data:
          entity_id:
            - binary_sensor.nas_ssh_reachability
            - switch.nas_unraid_array
            - switch.nas_wireguard_service

  - alias: 'Completed Torrent'
    trigger:
      platform: event
      event_type: transmission_downloaded_torrent
    action:
      service: notify.mobile_app_blokmeisterp9pro
      data:
        title: "Torrent completed!"
        message: "{{ trigger.event.data.name }} has finished downloading!"
        data:
          group: reminder
          tag: transmission
          icon_url: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Transmission_icon.png"
          timeout: 1800

  # - alias: "[system|nas]Link Speed Alert"
  #   trigger:
  #     - platform: numeric_state
  #       entity_id: sensor.nas_link_speed
  #       below: 9000
  #       for:
  #         minutes: 10
  #   action:
  #     - service: persistent_notification.create
  #       data:
  #         title: "Network Speed Alert"
  #         message: "Warning: Network speed has dropped below 9000 Mb/s."
  #         notification_id: "network_speed_alert"
  #     - wait_for_trigger:
  #         - platform: numeric_state
  #           entity_id: sensor.nas_link_speed
  #           above: 9000
  #     - service: persistent_notification.dismiss
  #       data:
  #         notification_id: "network_speed_alert"

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:
  container_sensors_switches:
    name: "NAS Container Sensors and Switches"
    entities:
      - switch.docker_tower_apacheguacamole
      - switch.docker_tower_audiobookshelf
      - switch.docker_tower_authelia
      - switch.docker_tower_diskspeed
      - switch.docker_tower_dupeguru
      - switch.docker_tower_firefox
      - switch.docker_tower_frigate
      - switch.docker_tower_hddtemp
      - switch.docker_tower_immich
      - switch.docker_tower_iperf3
      - switch.docker_tower_ntp
      - switch.docker_tower_onedrive
      - switch.docker_tower_photoprism
      - switch.docker_tower_plex
      - switch.docker_tower_qdirstat
      - switch.docker_tower_swag
      - switch.docker_tower_thelounge
      - switch.docker_tower_transmission
      - switch.docker_tower_watchtower

      - sensor.docker_tower_apacheguacamole_cpu
      - sensor.docker_tower_audiobookshelf_cpu
      - sensor.docker_tower_authelia_cpu
      - sensor.docker_tower_diskspeed_cpu
      - sensor.docker_tower_dupeguru_cpu
      - sensor.docker_tower_firefox_cpu
      - sensor.docker_tower_frigate_cpu
      - sensor.docker_tower_hddtemp_cpu
      - sensor.docker_tower_immich_cpu
      - sensor.docker_tower_iperf3_cpu
      - sensor.docker_tower_ntp_cpu
      - sensor.docker_tower_onedrive_cpu
      - sensor.docker_tower_photoprism_cpu
      - sensor.docker_tower_plex_cpu
      - sensor.docker_tower_qdirstat_cpu
      - sensor.docker_tower_swag_cpu
      - sensor.docker_tower_thelounge_cpu
      - sensor.docker_tower_transmission_cpu
      - sensor.docker_tower_watchtower_cpu

      - sensor.docker_tower_apacheguacamole_memory
      - sensor.docker_tower_audiobookshelf_memory
      - sensor.docker_tower_authelia_memory
      - sensor.docker_tower_diskspeed_memory
      - sensor.docker_tower_dupeguru_memory
      - sensor.docker_tower_firefox_memory
      - sensor.docker_tower_frigate_memory
      - sensor.docker_tower_hddtemp_memory
      - sensor.docker_tower_immich_memory
      - sensor.docker_tower_iperf3_memory
      - sensor.docker_tower_ntp_memory
      - sensor.docker_tower_onedrive_memory
      - sensor.docker_tower_photoprism_memory
      - sensor.docker_tower_plex_memory
      - sensor.docker_tower_qdirstat_memory
      - sensor.docker_tower_swag_memory
      - sensor.docker_tower_thelounge_memory
      - sensor.docker_tower_transmission_memory
      - sensor.docker_tower_watchtower_memory
  nas_status_sensors:
    name: "NAS Status Sensors"
    entities:
      - sensor.tower_array_usage
      # - sensor.nas_nvme_composite_temperature_file
      # - sensor.nas_parity_temperature_file
      # - sensor.nas_disk_1_temperature_file
      # - sensor.nas_disk_2_temperature_file
      # - sensor.nas_disk_3_temperature_file
      # - sensor.nas_dev_1_temperature_file
      # - sensor.nas_dev_2_temperature_file
      - binary_sensor.nas_ssh_reachability
      - switch.nas_unraid_array
      - switch.nas_wireguard_service
  airvpn_status:
    name: "AirVPN Status"
    entities:
      - switch.nas_wireguard_service
      - sensor.airvpn_exit_ip
      - sensor.airvpn_username
      - sensor.airvpn_vpn_ip
      - sensor.airvpn_exit_ip
      - sensor.airvpn_entry_ip
      - sensor.airvpn_server_name
      - sensor.airvpn_server_country
      - sensor.airvpn_data_uploaded
      - sensor.airvpn_data_downloaded
      - sensor.airvpn_connected_since
      - sensor.airvpn_upload_speed
      - sensor.airvpn_download_speed

#################
#    SCRIPTS    #
#################
script:

#######################
#    SHELL COMMAND    #
#######################
shell_command:
  execute_nas_monitor_commands: sh /config/bash_scripts/nas_monitor.sh
