########## REFERENCES ##########
#| Title                      | MAC Address           | Device ID                        | Notes                                    |
#| -------------------------- | --------------------- | -------------------------------- | ---------------------------------------- |
#| Washing Machine            | 0000021c3bc6341b      | 89b2b0672c4ebd0eeb86b7a8672e1b2a |                                          |
#| Study Climate              | 00000218736e3b1e      | ab510c02b314bf3bf98fa4d65f911229 |                                          |
#| Study Energy               | 0000039223703418      | bee8d1c7023925de74fc4e839cae072e |                                          |
#| Garbage Display            | 00000219a2923b10      | c7b6f77506400992217dfccd860d1ee0 | Matches reference: Garbage Monitor       |
#| Moeke Status               | 0000021d7356341f      | a5fb0b3999b39d6b82d0c338d9bc211e |                                          |
#| Electricity Price Kitchen  | 00007e225dc2b29f      | 29d7d4483b27d042b60d86ac92541aa2 |                                          |
#| Electricity Price Study    | 00007e22cc92b292      | 322949b4c22af9b50d8546decb19354d |                                          |
#| Electricity Price Washroom | 00007e1f8b30b297      | fceb879457ffabc7cdd9e21651afbe11 |                                          |
#| Litterbox Status OLD       | 0000021DC9CA341B      | 5f61de1a08a9f1dcb162b383d8be9a4e | Replaced by 0000021dc9ca341b on 20250603 |
#| Powerstrip Study           | 0000021D1C8E3413      | fcf0279b783325a85401128ab88eefd4 |                                          |
#| Moeke Status Control       | 0000021ef7993413      | 1a55b4b3210d9df377ff1da5f8bd8ebe | Control group tag for Moeke Status       |
#| Litterbox Status           | 0000021dc9ca341b      | 5f61de1a08a9f1dcb162b383d8be9a4e | Replaced 0000021DC9CA341B on 20250603    |
#| Study Energy Control       | 0000021dc3bf3413      | 8a5608d777be457d781e79b5948c2332 | Control group tag for Study Energy       |
#| Study Calendar             | 780105561c817600      | 0384f3ad3a85237fcb589d95931ddc60 |                                          |

homeassistant:
  customize: {}

template:
  - trigger:
      - platform: time_pattern
        seconds: "/20"
    sensor:
      - name: "Median Epaper Tag Last Check-In Time"
        device_class: timestamp
        unique_id: yaml_template_sensor_median_epaper_tag_last_check_in_time
        icon: mdi:clock-in
        state: >
          {% set ns = namespace(times=[]) %}
          {%- for sensor in [
            'sensor.0000021c3bc6341b_last_seen',
            'sensor.00000218736e3b1e_last_seen',
            'sensor.0000039223703418_last_seen',
            'sensor.00000219a2923b10_last_seen',
            'sensor.0000021d7356341f_last_seen',
            'sensor.00007e225dc2b29f_last_seen',
            'sensor.00007e22cc92b292_last_seen',
            'sensor.00007e1f8b30b297_last_seen',
            'sensor.0000021d1c8e3413_last_seen',
            'sensor.0000021ef7993413_last_seen',
            'sensor.0000021dc9ca341b_last_seen',
            'sensor.0000021dc3bf3413_last_seen'
          ] -%}
            {%- if states(sensor) not in ['unknown', 'unavailable', 'none', ''] -%}
              {%- set timestamp = as_timestamp(states(sensor)) -%}
              {%- if timestamp is not none -%}
                {%- set ns.times = ns.times + [timestamp] -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {%- if ns.times | length > 0 -%}
            {%- set ns.times = ns.times | sort -%}
            {%- set mid = ns.times | length // 2 -%}
            {%- if ns.times | length is odd -%}
              {{ (ns.times[mid] | as_datetime | as_local).isoformat() }}
            {%- else -%}
              {{ (((ns.times[mid - 1] + ns.times[mid]) / 2) | as_datetime | as_local).isoformat() }}
            {%- endif -%}
          {%- else -%}
            'unavailable'
          {%- endif -%}
        availability: >
          {%- for sensor in [
            'sensor.0000021c3bc6341b_last_seen',
            'sensor.00000218736e3b1e_last_seen',
            'sensor.0000039223703418_last_seen',
            'sensor.00000219a2923b10_last_seen',
            'sensor.0000021d7356341f_last_seen',
            'sensor.00007e225dc2b29f_last_seen',
            'sensor.00007e22cc92b292_last_seen',
            'sensor.00007e1f8b30b297_last_seen',
            'sensor.0000021d1c8e3413_last_seen',
            'sensor.0000021ef7993413_last_seen',
            'sensor.0000021dc9ca341b_last_seen',
            'sensor.0000021dc3bf3413_last_seen'
          ] %}
          {% set ns = namespace(available = false) %}
          {% for sensor in all_sensors %}
            {% if states(sensor) not in ['unknown', 'unavailable', 'none', ''] %}
              {% set ns.available = true %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ ns.available }}
      - name: "Total Pending Epaperlink Transfers"
        unique_id: yaml_template_sensor_epaperlink_total_pending_transfers
        icon: mdi:transfer
        unit_of_measurement: transfers
        state: >
          {{ states.sensor
              | selectattr('entity_id', 'search', '_pending_updates$')
              | map(attribute='state')
              | map('float', default=0)
              | sum }}

  - sensor:
      - name: "OpenEpaperLink Livingroom AP MAC"
        unique_id: yaml_template_sensor_openepaperlink_livingroom_ap_mac
        icon: mdi:access-point
        state: "{{ state_attr('device_tracker.openepaperlink_8640', 'ap_mac') }}"
        availability: "{{ state_attr('device_tracker.openepaperlink_8640', 'ap_mac') is not none }}"

      - name: "OpenEpaperLink Livingroom AP Radio"
        unique_id: yaml_template_sensor_openepaperlink_livingroom_ap_radio
        icon: mdi:wifi
        state: "{{ state_attr('device_tracker.openepaperlink_8640', 'radio') }}"
        availability: "{{ state_attr('device_tracker.openepaperlink_8640', 'radio') is not none }}"

#################
#    SENSORS    #
#################
sensor:
  - platform: group
    name: "Epaperlink Pending Transfer Sensors"
    unique_id: yaml_group_sensor_epaperlink_pending_transfer_sensors
    type: sum
    ignore_non_numeric: true
    #unit_of_measurement: transfers
    entities: # Use template code:  - {{ states.sensor | selectattr('entity_id', 'search', '_pending_updates$') | map(attribute='entity_id') | list | join('\n - ') }}
      - sensor.00007e1f7f9fb299_pending_updates
      - sensor.00007e1f8b30b297_pending_updates
      - sensor.780105561c92b300_pending_updates
      - sensor.0000039223703418_pending_updates
      - sensor.00007e225dceb293_pending_updates
      - sensor.0000021c3bc6341b_pending_updates
      - sensor.00007e225dd0b29c_pending_updates
      - sensor.780105561a342201_pending_updates
      - sensor.00007e22cc92b292_pending_updates
      - sensor.780105561c817600_pending_updates
      - sensor.780105561c294d00_pending_updates
      - sensor.0000021e6b5b3b17_pending_updates
      - sensor.00000218736e3b1e_pending_updates
      - sensor.0000c87b913bdaec_pending_updates
      - sensor.00007e1f8186b290_pending_updates
      - sensor.garbage_monitor_tag_pending_updates
      - sensor.0000021f86d83b1e_pending_updates
      - sensor.780105561a2ce800_pending_updates
      - sensor.00007e22b1d7b299_pending_updates
      - sensor.00007e1f75f1b29b_pending_updates
      - sensor.00007e225dc2b29f_pending_updates
      - sensor.00007e22b1b2b29a_pending_updates
      - sensor.000040866ce6fc84_pending_updates
      - sensor.fd600b561a2ce800_pending_updates
      - sensor.fd600bb900090900_pending_updates
      - sensor.0000021d7356341f_pending_updates
      - sensor.0000021dc9ca341b_pending_updates
      - sensor.0000021d2ef23419_pending_updates
      - sensor.fd600bd70007074d_pending_updates
      - sensor.7801055600817600_pending_updates


########################
#    BINARY SENSORS    #
########################
binary_sensor:

########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[misc|epaperlink]Timed update epaper displays'
    id: misc_epaperlink_timed_update_epaper_displays
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/30"
    action:
      - service: script.update_garbage_monitor_display
        data:
          display_device_id: c7b6f77506400992217dfccd860d1ee0

  - alias: '[misc|epaperlink]Update washing machine energy display'
    id: misc_epaperlink_update_washing_machine_energy_display
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/15"
      - platform: time
        at: '07:00:00'  # This will trigger the automation every morning at 7 AM
    condition:
      - condition: or  # Wrap the existing conditions in an or condition
        conditions:
          - condition: not
            conditions:
              - condition: template
                value_template: "{{ states('sensor.plug_washing_machine_power')|int < 5 }}"
                # for:
                #   minutes: 15
          - condition: template
            value_template: "{{ now().strftime('%H:%M:%S') == '07:00:00' }}"  # This effectively bypasses the conditions for the morning trigger
      - condition: time
        after: "6:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 240 }}" #Checks if tags have checked in in the past 4 minutes. Only updates if it actually works
    action:
      - service: script.update_washing_machine_energy_display

  - alias: '[misc|epaperlink]Update study displays'
    id: misc_epaperlink_update_study_displays
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/15"
    condition:
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
        for:
          minutes: 5
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.study_motion_combined
            state: 'off'
            for:
              minutes: 15
      - condition: time
        after: "6:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 240 }}" #Checks if tags have checked in in the past 4 minutes. Only updates if it actually works
    action:
      # - service: open_epaper_link.lines4
      #   target:
      #     device_id: ab510c02b314bf3bf98fa4d65f911229
      #   data:
      #     line1: " Update: {{ states('sensor.time') | string }} "
      #     line2: " T: {{ states('sensor.study_aqm_temperature') | string }} C, CO2: {{ states('sensor.study_co2') | int | string }}"
      #     line3: "PM2.5: {{ states('sensor.study_pm_2_5_concentration') | int | string }} µg/m³ "
      #     line4: " Today's Elec {{ states('sensor.blitzwolf_computer_energy_today') | round(2) | string }} kWh "
      #     border: b
      #     format1: lwwb
      #     format2: lwwb
      #     format3: lwwb
      #     format4: lwwb
      - delay:
          seconds: 2
      - service: script.update_study_energy_display
        continue_on_error: true
        data:
          display_device_id: bee8d1c7023925de74fc4e839cae072e
      - delay:
          seconds: 2
      - service: script.update_study_energy_display #Sanity check. This for Moeke/Litterbox tags (this is tag 0000021DC3BF3413 http://blokmeisternuc.local:8123/config/devices/device/8a5608d777be457d781e79b5948c2332)
        continue_on_error: true
        data:
          display_device_id: 8a5608d777be457d781e79b5948c2332
      - delay:
          seconds: 2
      - service: script.update_study_climate_display
        data:
          display_device_id: ab510c02b314bf3bf98fa4d65f911229
      - service: script.update_router_speedtest_display
        data:
          display_device_id: 696378a0a18ab5f3b2eca6c1c991b0f8

  - alias: '[misc|epaperlink]Timed update electricity price display'
    id: misc_epaperlink_timed_update_electricity_price_display
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/15" #every fifteen minutes. Should not affect battery life since the image updates only every hour.
    condition:
      - condition: time
        after: "5:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 240 }}" #Checks if tags have checked in in the past 4 minutes. Only updates if it actually works
    action:
      - delay: #ensure that the current nordpool price has already been updated
          minutes: 1
      - choose:
        - conditions:
            - condition: time
              before: "15:00:00"
          sequence:
            - service: script.update_energy_price_today_larger_display
              continue_on_error: true
              data:
                display_device_id: 29d7d4483b27d042b60d86ac92541aa2 # Kitchen
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  #- fceb879457ffabc7cdd9e21651afbe11 #New Display 2
            - delay:
                seconds: 10
            - service: script.update_energy_price_today_larger_display
              continue_on_error: true
              data:
                display_device_id: 322949b4c22af9b50d8546decb19354d # Study
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  #- fceb879457ffabc7cdd9e21651afbe11 #New Display 2
            - delay:
                seconds: 10
            - service: script.update_energy_price_today_larger_display
              continue_on_error: true
              data:
                display_device_id: fceb879457ffabc7cdd9e21651afbe11 # Washroom
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  # - fceb879457ffabc7cdd9e21651afbe11 #New Display 2
        default:
            - service: script.update_energy_price_transition_larger_display
              continue_on_error: true
              data:
                display_device_id: 29d7d4483b27d042b60d86ac92541aa2 # Kitchen
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  #- fceb879457ffabc7cdd9e21651afbe11 #New Display 2
            - delay:
                seconds: 10
            - service: script.update_energy_price_transition_larger_display
              continue_on_error: true
              data:
                display_device_id: 322949b4c22af9b50d8546decb19354d # Study
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  #- fceb879457ffabc7cdd9e21651afbe11 #New Display 2
            - delay:
                seconds: 10
            - service: script.update_energy_price_transition_larger_display
              continue_on_error: true
              data:
                display_device_id: fceb879457ffabc7cdd9e21651afbe11 # Washroom
                  #- 29d7d4483b27d042b60d86ac92541aa2 #Kitchen
                  #- 322949b4c22af9b50d8546decb19354d #New Display 1
                  #- fceb879457ffabc7cdd9e21651afbe11 #New Display 2

  - alias: "[misc|epaperlink] Timed Update Moeke Water Tank Display"
    id: misc_epaperlink_timed_update_moeke_water_tank_display
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/30"  # Triggers every 30 minutes
      - platform: state
        entity_id:
          - binary_sensor.moeke_reservoir_leak_sensor
      - platform: state
        entity_id: sensor.moeke_low_water_warning
        to:
          - "No warning"
          - no_warning
        for:
          minutes: 5
      - platform: state
        entity_id: sensor.moeke_low_water_warning
        not_to:
          - "No warning"
          - no_warning
        for:
          minutes: 5
    condition:
      - condition: time
        after: "06:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 240 }}" #Checks if tags have checked in in the past 4 minutes. Only updates if it actually works
    action:
      - service: script.update_moeke_water_tank_display
        data:
          display_device_id: a5fb0b3999b39d6b82d0c338d9bc211e
      - service: script.update_moeke_water_tank_display #Sanity check for tag 0000021EF7993413 (http://blokmeisternuc.local:8123/config/devices/device/1a55b4b3210d9df377ff1da5f8bd8ebe)
        data:
          display_device_id: 1a55b4b3210d9df377ff1da5f8bd8ebe

  - alias: "[misc|epaperlink] Update Pixel Litterbox Display"
    id: misc_epaperlink_update_pixel_litterbox_display
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/30"  # Triggers every 30 minutes
      - platform: state
        entity_id:
          - sensor.litterbox_counts_today
    condition:
      - condition: time
        after: "06:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 240 }}" #Checks if tags have checked in in the past 4 minutes. Only updates if it actually works
    action:
      - service: script.update_litterbox_display
        data:
          display_device_id: 5f61de1a08a9f1dcb162b383d8be9a4e

  - alias: "[misc|epaperlink] Update Study Powerstrip Display"
    id: misc_epaperlink_update_study_powerstrip_display
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: "/30"  # Triggers every 30 minutes
      - platform: state
        entity_id:
          - switch.powerstrip_study_desk_socket_1
          - switch.powerstrip_study_desk_socket_2
          - switch.powerstrip_study_desk_socket_3
          - switch.powerstrip_study_desk_socket_4
    condition:
      - condition: time
        after: "06:00:00"
        before: "23:30:00"
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'),default=3000000000)) <= 600 }}" #Checks if tags have checked in in the past 10 minutes. Only updates if it actually works
    action:
      - delay:
          seconds: 10
      - service: script.update_study_powerstrip_display
        data:
          display_device_id: fcf0279b783325a85401128ab88eefd4

  - alias: "[misc|epaperlink] Update Calendar Displays"
    id: yaml_script_misc_epaperlink_update_calendar_displays
    mode: restart
    trigger:
      - platform: time
        at: "05:00:00"
    condition:
    action:
      - service: script.update_epaper_calendar_display
        data:
          display_device_id: 0384f3ad3a85237fcb589d95931ddc60

  - alias: "[misc|epaperlink] Tag Button Update of Displays"
    id: automation_yaml_misc_epaperlink_tag_button_update_of_displays
    mode: queued
    trigger:
      - platform: event
        event_type: open_epaper_link_event
        event_data:
          type: 'BUTTON1'
      - platform: event
        event_type: open_epaper_link_event
        event_data:
          type: 'BUTTON2'
    condition:
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.device_id == '00007E225DC2B29F' }}"
            sequence:
              - service: script.update_energy_price_today_larger_display
                data:
                  display_device_id: 29d7d4483b27d042b60d86ac92541aa2
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.device_id == '00007E22B1D7B299' }}"
            sequence:
              - service: script.update_energy_price_today_larger_display
                data:
                  display_device_id: fceb879457ffabc7cdd9e21651afbe11
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.device_id == '00007E22B1B2B29A' }}"
            sequence:
              - service: script.update_energy_price_today_larger_display
                data:
                  display_device_id: 29d7d4483b27d042b60d86ac92541aa2

  - alias: "[misc|epaperlink]Notify if tag not seen"
    id: yaml_automation_misc_epaperlink_notify_if_tag_not_seen
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: "/10"  # Check every 10 minutes
    condition: []
      # - condition: template
      #   value_template: >
      #     {%- set outdated = namespace(found=false) -%}
      #     {%- for sensor in [
      #         "sensor.0000021c3bc6341b_last_seen",
      #         "sensor.00000218736e3b1e_last_seen",
      #         "sensor.0000039223703418_last_seen",
      #         "sensor.00000219a2923b10_last_seen",
      #         "sensor.0000021d7356341f_last_seen",
      #         "sensor.00007e225dc2b29f_last_seen",
      #         "sensor.00007e22cc92b292_last_seen",
      #         "sensor.00007e1f8b30b297_last_seen",
      #         "sensor.0000021dc9ca341b_last_seen",
      #         "sensor.0000021d1c8e3413_last_seen"
      #       ] -%}
      #         {%- set last_seen = states(sensor) -%}
      #         {%- if last_seen == 'unavailable' or (last_seen == 'unknown') or (last_seen == '') or (as_timestamp(now()) - as_timestamp(last_seen | default(0)) > 600) -%}
      #           {%- set outdated.found = true -%}
      #         {%- endif -%}
      #     {% endfor %}
      #     {{ outdated.found }}
    action:
      # - condition: template
      #   value_template: "{{ trigger.to_state.state == 'unavailable' or (as_timestamp(now()) - as_timestamp(trigger.to_state.last_changed)) > 300 }}"
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {%- set outdated = namespace(found=false) -%}
                  {%- for sensor in [
                      "sensor.0000021c3bc6341b_last_seen",
                      "sensor.00000218736e3b1e_last_seen",
                      "sensor.0000039223703418_last_seen",
                      "sensor.00000219a2923b10_last_seen",
                      "sensor.0000021d7356341f_last_seen",
                      "sensor.00007e225dc2b29f_last_seen",
                      "sensor.00007e22cc92b292_last_seen",
                      "sensor.00007e1f8b30b297_last_seen",
                      "sensor.0000021dc9ca341b_last_seen",
                      "sensor.0000021d1c8e3413_last_seen"
                    ] -%}
                      {%- set last_seen = states(sensor) -%}
                      {%- if last_seen == 'unavailable' or (last_seen == 'unknown') or (last_seen == '') or (as_timestamp(now()) - as_timestamp(last_seen | default(0)) > 600) -%}
                        {%- set outdated.found = true -%}
                      {%- endif -%}
                  {% endfor %}
                  {{ outdated.found }}
              - condition: template
                value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'))) > 300 }}"
            sequence:
              - service: persistent_notification.create
                data_template:
                  title: "Tag Not Seen Alert"
                  notification_id: tag_not_seen_alert
                  message: >
                    One or more tags have not been seen for more than 5 minutes:
                    {% for sensor in [
                        "sensor.0000021c3bc6341b_last_seen",
                        "sensor.00000218736e3b1e_last_seen",
                        "sensor.0000039223703418_last_seen",
                        "sensor.00000219a2923b10_last_seen",
                        "sensor.0000021d7356341f_last_seen",
                        "sensor.00007e225dc2b29f_last_seen",
                        "sensor.00007e22cc92b292_last_seen",
                        "sensor.00007e1f8b30b297_last_seen",
                        "sensor.0000021dc9ca341b_last_seen",
                        "sensor.0000021d1c8e3413_last_seen"
                      ] %}
                        {%- set last_seen = states(sensor) -%}
                        {%- if last_seen == 'unavailable' or last_seen == 'unknown' or last_seen == '' or (as_timestamp(now()) - as_timestamp(last_seen | default(0)) > 600) -%}
                          {%- if not state_attr(sensor, 'friendly_name') == None -%}
                            {{ state_attr(sensor, 'friendly_name') | replace(' Last Seen', '') }}{% if not loop.last %}, {% endif %}
                          {%- else -%}
                            {{ state_attr(sensor, 'entity_id') }}{% if not loop.last %}, {% endif %}
                          {%- endif -%}
                        {%- endif -%}
                    {%- endfor -%}
        default:
          - service: persistent_notification.dismiss
            data:
              notification_id: tag_not_seen_alert

  - alias: "[misc|epaperlink]Trigger Reload When Last Seen Exceeds 5 Minutes"
    description: "Reloads config entry if the median last check-in time is more than 5 minutes. In this case, it is likely that the integration has failed and needs a restart."
    mode: restart
    id: yaml_automation_misc_epaperlink_trigger_reload_when_last_seen_exceeds_5_minutes
    trigger:
      - platform: template
        value_template: >
          {{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'), default=3000000000)) > 600 }} #default of 3000000000 is Saturday, January 24, 2065 6:20:00 AM
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.epaperlink_study_ap_round_trip_time_average
            state: 'unavailable'
      - condition: template
        value_template: >
          {{ state_attr('automation.misc_epaperlink_power_cycle_ap_when_ap_is_unavailable_and_devices_haven_t_checked_in', 'current') == 0 }}
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'))) > 600 }}"
    action:
      # Attempt to reload the integration until devices have checked in or max attempts reached
      - alias: "Reload Integration Until Devices Check In or Max Attempts"
        repeat:
          sequence:
            # Reload the OpenEPaperLink integration
            - service: homeassistant.reload_config_entry
              data:
                entry_id: dcd0a828896007b5be2b87a699bb028f
            # Wait for devices to check in
            - wait_template: >
                {{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'), default=3000000000)) < 300 }}
              timeout: '00:05:00'  # Wait up to 5 minutes
              continue_on_timeout: true
          until:
            # Exit loop if devices have checked in or maximum attempts reached
            - condition: or
              conditions:
                - condition: template
                  value_template: >
                    {{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'), default=3000000000)) < 600 }}
                - condition: template
                  value_template: >
                    {{ repeat.index >= 3 }}
      # Check if devices have checked in
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'), default=3000000000)) < 600 }}
            sequence:
              # Devices have checked in, trigger display updates
              - service: automation.trigger
                entity_id:
                  - automation.misc_epaperlink_timed_update_electricity_price_display
                  - automation.misc_epaperlink_timed_update_moeke_water_tank_display
                  - automation.misc_epaperlink_update_pixel_litterbox_display
                  - automation.misc_epaperlink_update_study_displays
        default:
          # Devices haven't checked in, send a notification
          - service: notify.mobile_app_blokmeisterp9pro
            data:
              title: "OpenEPaperLink Integration Issue"
              message: "Devices haven't checked in after multiple integration reloads."

  - alias: "[misc|epaperlink] Power Cycle AP When AP is Unavailable and Devices Haven't Checked In"
    description: "Power cycles the AP and reloads the integration when the AP is unavailable and devices haven't checked in."
    id: yaml_automation_misc_epaperlink_power_cycle_ap_when_ap_is_unavailable_and_devices_havent_checked_in
    mode: single
    trigger:
      # Trigger when the ping sensor becomes 'unavailable' for more than 1 minute
      - platform: state
        entity_id: sensor.epaperlink_study_ap_round_trip_time_average
        to: 'unavailable'
        for:
          minutes: 2
    condition:
      # Condition: Median check-in time is 'unavailable' or exceeds 10 minutes
      - condition: template
        value_template: >
          {{
            states('sensor.median_epaper_tag_last_check_in_time') == 'unavailable' or
            (as_timestamp(now()) - as_timestamp(states('sensor.median_epaper_tag_last_check_in_time'))) > 900 or
            is_state('device_tracker.openepaperlink_7bc8', 'off')
          }}
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'))) > 600 }}"
    action:
      # Repeat power cycling the AP until it becomes available or maximum attempts reached
      - alias: "Power Cycle AP Until Available or Max Attempts"
        repeat:
          sequence:
            # Power off the AP
            - service: switch.turn_off
              entity_id: switch.plug_epaper_ap_switch
            # Wait for 5 seconds
            - delay:
                seconds: 5
            # Power on the AP
            - service: switch.turn_on
              entity_id: switch.plug_epaper_ap_switch
            # Wait for the AP to boot up
            - delay:
                seconds: 120
          until:
            # Exit loop if AP is pingable or maximum attempts reached
            - condition: or
              conditions:
                - condition: template
                  value_template: >
                    {{
                      not is_state('sensor.epaperlink_study_ap_round_trip_time_average', 'unavailable') or
                      is_state('device_tracker.openepaperlink_7bc8', 'on')
                    }}
                - condition: template
                  value_template: >
                    {{ repeat.index >= 3 }}
      - delay:
          minutes: 5
      # Check if the AP is now available
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ is_state('sensor.median_epaper_tag_last_check_in_time', 'unavailable') }}
            sequence:
              # Reload the OpenEPaperLink integration
              - service: homeassistant.reload_config_entry
                data:
                  entry_id: dcd0a828896007b5be2b87a699bb028f
              # Wait for 1 minute to allow devices to check in
              - delay:
                  minutes: 5
              # Trigger the display update automations
      - service: automation.trigger
        entity_id:
          - automation.misc_epaperlink_timed_update_electricity_price_display
          - automation.misc_epaperlink_timed_update_moeke_water_tank_display
          - automation.misc_epaperlink_update_pixel_litterbox_display
          - automation.misc_epaperlink_update_study_displays
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ is_state('sensor.median_epaper_tag_last_check_in_time', 'unavailable') }}
            sequence:
              # If AP is still unavailable, send a notification
              - service: notify.mobile_app_blokmeisterp9pro
                data:
                  title: "OpenEPaperLink AP Issue"
                  message: "AP did not come back online after multiple power cycles."


################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

#################
#    SCRIPTS    #
#################
script:
  update_washing_machine_energy_display:
    alias: "Update Washing Machine Energy Display"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: 89b2b0672c4ebd0eeb86b7a8672e1b2a
        data:
          background: white
          rotate: 0
          payload:
            - type: text
              value: "Energy today:"
              font: ppb.ttf
              anchor: mt
              x: 76
              "y": 10
              size: 18
              color: 'black'
            - type: text
              value: "{{ states('sensor.plug_washing_machine_energy_today')|round(1) | string }}"
              font: ppb.ttf
              anchor: rt
              x: 100
              "y": 38
              size: 45
              color: 'red'
            - type: text
              value: "kWh"
              font: ppb.ttf
              anchor: rt
              x: 150
              "y": 38
              size: 18
              color: black
            - type: text
              value: "Energy yesterday:"
              font: ppb.ttf
              anchor: mt
              x: 76
              "y": 85
              size: 16
              color: black
            - type: text
              value: "{{ states('sensor.plug_washing_machine_energy_yesterday')|round(1) | string }}"
              font: ppb.ttf
              anchor: lt
              x: 32
              "y": 110
              size: 28
              color: red
            - type: text
              value: "kWh"
              font: ppb.ttf
              anchor: rt
              x: 120
              "y": 110
              size: 15
              color: black

  update_energy_price_today_display:
    alias: "Update Energy Price Today Display"
    description: "Updates the old Solum M2 2.7 inch screens with today's electricty prices"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated. Note: the example is the wrong type of tag!"
        example: "fceb879457ffabc7cdd9e21651afbe11"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 0 else 'black' }}"
              width: 1
              x_start: 30
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[0].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 38
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[0].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 1 else 'black' }}"
              width: 1
              x_start: 41
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[1].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 49
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[1].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 2 else 'black' }}"
              width: 1
              x_start: 51
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[2].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 59
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[2].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 3 else 'black' }}"
              width: 1
              x_start: 62
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[3].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 70
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[3].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 4 else 'black' }}"
              width: 1
              x_start: 72
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[4].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 80
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[4].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 5 else 'black' }}"
              width: 1
              x_start: 83
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[5].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 91
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[5].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 6 else 'black' }}"
              width: 1
              x_start: 94
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[6].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 102
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[6].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 7 else 'black' }}"
              width: 1
              x_start: 104
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[7].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 112
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[7].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 8 else 'black' }}"
              width: 1
              x_start: 115
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[8].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 123
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[8].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 9 else 'black' }}"
              width: 1
              x_start: 125
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[9].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 133
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[9].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 10 else 'black' }}"
              width: 1
              x_start: 136
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[10].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 144
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[10].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 11 else 'black' }}"
              width: 1
              x_start: 146
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[11].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 154
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[11].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 12 else 'black' }}"
              width: 1
              x_start: 157
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 165
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 13 else 'black' }}"
              width: 1
              x_start: 168
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 176
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 14 else 'black' }}"
              width: 1
              x_start: 178
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 186
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 15 else 'black' }}"
              width: 1
              x_start: 189
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 197
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 16 else 'black' }}"
              width: 1
              x_start: 199
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 207
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 17 else 'black' }}"
              width: 1
              x_start: 210
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 218
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 18 else 'black' }}"
              width: 1
              x_start: 220
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 228
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 19 else 'black' }}"
              width: 1
              x_start: 231
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 239
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 20 else 'black' }}"
              width: 1
              x_start: 242
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 250
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 21 else 'black' }}"
              width: 1
              x_start: 252
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 260
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 22 else 'black' }}"
              width: 1
              x_start: 263
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 271
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 23 else 'black' }}"
              width: 1
              x_start: 273
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 281
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"

            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 10
              x_end: 286
              y_end: 10
            - type: text
              value: '€0.50'
              x: 0
              "y": 1
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 30
              x_end: 286
              y_end: 30
            - type: text
              value: '€0.40'
              x: 0
              "y": 21
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 49
              x_end: 286
              y_end: 49
            - type: text
              value: '€0.30'
              x: 0
              "y": 40
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 69
              x_end: 286
              y_end: 69
            - type: text
              value: '€0.20'
              x: 0
              "y": 60
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 88
              x_end: 286
              y_end: 88
            - type: text
              value: '€0.10'
              x: 0
              "y": 79
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 108
              x_end: 286
              y_end: 108
            - type: text
              value: '€0.00'
              x: 0
              "y": 99
              size: 8
              color: black
              font: "ppb.ttf"

            - type: text
              value: "0:00"
              x: 20  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "6:00"
              x: 84  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "12:00"
              x: 147  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "18:00"
              x: 210  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "24:00"
              x: 260  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"

            # - type: text
            #   value: "High: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
            #   x: 285
            #   "y": 2
            #   size: 13
            #   color: white
            #   font: "/config/www/fonts/poppins/Poppins-Black.ttf" #"ppb.ttf"
            #   anchor: rt
            # - type: text
            #   value: "Low: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
            #   x: 285
            #   "y": 15
            #   size: 13
            #   color: white
            #   font: "/config/www/fonts/poppins/Poppins-Black.ttf" #"ppb.ttf"
            #   anchor: rt
            # - type: text
            #   value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
            #   x: 285
            #   "y": 28
            #   size: 13
            #   color: white
            #   font: "/config/www/fonts/poppins/Poppins-Black.ttf" #"ppb.ttf"
            #   anchor: rt

            - type: text
              value: "High: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
              x: 285
              "y": 2
              size: 10
              color: red
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf" #"ppb.ttf"
              anchor: rt
            - type: text
              value: "Low: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
              x: 285
              "y": 15
              size: 10
              color: red
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf" #"ppb.ttf"
              anchor: rt
            - type: text
              value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
              x: 285
              "y": 28
              size: 10
              color: red
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf" #"ppb.ttf"
              anchor: rt

            - type: text
              value: "High: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
              x: 185
              "y": 2
              size: 10
              color: red
              font: "/config/www/fonts/PixeloidMono_9px_h10.ttf" #"ppb.ttf"
              anchor: rt
            - type: text
              value: "Low: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
              x: 185
              "y": 15
              size: 10
              color: red
              font: "/config/www/fonts/PixeloidMono_9px_h10.ttf" #"ppb.ttf"
              anchor: rt
            - type: text
              value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
              x: 185
              "y": 28
              size: 10
              color: red
              font: "/config/www/fonts/PixeloidMono_9px_h10.ttf" #"ppb.ttf"
              anchor: rt

  update_energy_price_tomorrow_display:
    alias: "Update Energy Price Tomorrow Display"
    description: "Updates the old Solum M2 2.7 inch screens with tomorrow's electricty prices"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated. Note: the example is the wrong type of tag!"
        example: "fceb879457ffabc7cdd9e21651afbe11"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 0 else 'black' }}"
              width: 1
              x_start: 30
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[0].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 38
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 1 else 'black' }}"
              width: 1
              x_start: 41
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[1].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 49
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 2 else 'black' }}"
              width: 1
              x_start: 51
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[2].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 59
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 3 else 'black' }}"
              width: 1
              x_start: 62
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[3].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 70
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 4 else 'black' }}"
              width: 1
              x_start: 72
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[4].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 80
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 5 else 'black' }}"
              width: 1
              x_start: 83
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[5].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 91
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 6 else 'black' }}"
              width: 1
              x_start: 94
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[6].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 102
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 7 else 'black' }}"
              width: 1
              x_start: 104
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[7].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 112
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 8 else 'black' }}"
              width: 1
              x_start: 115
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[8].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 123
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 9 else 'black' }}"
              width: 1
              x_start: 125
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[9].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 133
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 10 else 'black' }}"
              width: 1
              x_start: 136
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[10].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 144
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 11 else 'black' }}"
              width: 1
              x_start: 146
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[11].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 154
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 12 else 'black' }}"
              width: 1
              x_start: 157
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[12].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 165
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 13 else 'black' }}"
              width: 1
              x_start: 168
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[13].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 176
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 14 else 'black' }}"
              width: 1
              x_start: 178
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[14].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 186
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 15 else 'black' }}"
              width: 1
              x_start: 189
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[15].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 197
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 16 else 'black' }}"
              width: 1
              x_start: 199
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[16].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 207
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 17 else 'black' }}"
              width: 1
              x_start: 210
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[17].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 218
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 18 else 'black' }}"
              width: 1
              x_start: 220
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[18].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 228
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 19 else 'black' }}"
              width: 1
              x_start: 231
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[19].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 239
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 20 else 'black' }}"
              width: 1
              x_start: 242
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[20].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 250
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 21 else 'black' }}"
              width: 1
              x_start: 252
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[21].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 260
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 22 else 'black' }}"
              width: 1
              x_start: 263
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[22].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 271
              y_end: 108
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 23 else 'black' }}"
              width: 1
              x_start: 273
              y_start: "{{ 108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[23].value / 0.50 * (108 - 10))) | round(0) }}"
              x_end: 281
              y_end: 108

            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 10
              x_end: 286
              y_end: 10
            - type: text
              value: '€0.50'
              x: 0
              "y": 1
              size: 8
              color: black
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 30
              x_end: 286
              y_end: 30
            - type: text
              value: '€0.40'
              x: 0
              "y": 21
              size: 8
              color: black
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 49
              x_end: 286
              y_end: 49
            - type: text
              value: '€0.30'
              x: 0
              "y": 40
              size: 8
              color: black
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 69
              x_end: 286
              y_end: 69
            - type: text
              value: '€0.20'
              x: 0
              "y": 60
              size: 8
              color: black
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 88
              x_end: 286
              y_end: 88
            - type: text
              value: '€0.10'
              x: 0
              "y": 79
              size: 8
              color: black
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 108
              x_end: 286
              y_end: 108

            - type: text
              value: '€0.00'
              x: 0
              "y": 99
              size: 8
              color: black
            - type: text
              value: "0:00"
              x: 20  # Adjust for alignment
              "y": 113
              size: 8
              color: black
            - type: text
              value: "6:00"
              x: 84  # Adjust for alignment
              "y": 113
              size: 8
              color: black
            - type: text
              value: "12:00"
              x: 147  # Adjust for alignment
              "y": 113
              size: 8
              color: black
            - type: text
              value: "18:00"
              x: 210  # Adjust for alignment
              "y": 113
              size: 8
              color: black
            - type: text
              value: "24:00"
              x: 260  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"

            # - type: rectangle
            #   outline: white
            #   fill: white
            #   x_start: 226
            #   y_start: 10
            #   x_end: 286
            #   y_end: 30

            - type: text
              value: "Current: €{{ states.sensor.nordpool_energy_price.attributes.raw_today[now().hour].value }}"
              x: 285
              "y": 12
              size: 12
              color: red
              anchor: rt

            # - type: text
            #   value: "{{ now().hour }}:00"
            #   x: "{{ (10 + (now().hour * (single_bar_width + space_between_bars))) }}"
            #   "y": 50  # Adjust the position as needed
            #   size: 8
            #   color: red

  update_energy_price_transition_display:
    alias: "Update Energy Price Transition Display"
    description: "Updates the old Solum M2 2.7 inch screens with the transition electricty prices"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated. Note: the example is the wrong type of tag!"
        example: "fceb879457ffabc7cdd9e21651afbe11"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 12 else 'black' }}"
              width: 1
              x_start: 30
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 38
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 13 else 'black' }}"
              width: 1
              x_start: 41
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 49
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 14 else 'black' }}"
              width: 1
              x_start: 51
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 59
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 15 else 'black' }}"
              width: 1
              x_start: 62
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 70
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 16 else 'black' }}"
              width: 1
              x_start: 72
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 80
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 17 else 'black' }}"
              width: 1
              x_start: 83
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 91
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 18 else 'black' }}"
              width: 1
              x_start: 94
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 102
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 19 else 'black' }}"
              width: 1
              x_start: 104
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 112
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 20 else 'black' }}"
              width: 1
              x_start: 115
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 123
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 21 else 'black' }}"
              width: 1
              x_start: 125
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 133
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 22 else 'black' }}"
              width: 1
              x_start: 136
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 144
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 23 else 'black' }}"
              width: 1
              x_start: 146
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 154
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 0 else 'black' }}"
              width: 1
              x_start: 157
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[0].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 165
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[0].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 1 else 'black' }}"
              width: 1
              x_start: 168
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[1].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 176
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[1].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 2 else 'black' }}"
              width: 1
              x_start: 178
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[2].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 186
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[2].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 3 else 'black' }}"
              width: 1
              x_start: 189
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[3].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 197
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[3].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 4 else 'black' }}"
              width: 1
              x_start: 199
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[4].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 207
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[4].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 5 else 'black' }}"
              width: 1
              x_start: 210
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[5].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 218
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[5].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 6 else 'black' }}"
              width: 1
              x_start: 220
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[6].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 228
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[6].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 7 else 'black' }}"
              width: 1
              x_start: 231
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[7].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 239
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[7].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 8 else 'black' }}"
              width: 1
              x_start: 242
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[8].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 250
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[8].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 9 else 'black' }}"
              width: 1
              x_start: 252
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[9].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 260
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[9].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 10 else 'black' }}"
              width: 1
              x_start: 263
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[10].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 271
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[10].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 11 else 'black' }}"
              width: 1
              x_start: 273
              y_start: "{{ max(min(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[11].value / 0.50 * (108 - 10))) | round(0), 108), 10) }}"
              x_end: 281
              y_end: "{{ min(max(108 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[11].value / 0.50 * (108 - 10))) | round(0), 108), 128) }}"

            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 10
              x_end: 286
              y_end: 10
            - type: text
              value: '€0.50'
              x: 0
              "y": 1
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 30
              x_end: 286
              y_end: 30
            - type: text
              value: '€0.40'
              x: 0
              "y": 21
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 49
              x_end: 286
              y_end: 49
            - type: text
              value: '€0.30'
              x: 0
              "y": 40
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 69
              x_end: 286
              y_end: 69
            - type: text
              value: '€0.20'
              x: 0
              "y": 60
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 88
              x_end: 286
              y_end: 88
            - type: text
              value: '€0.10'
              x: 0
              "y": 79
              size: 8
              color: black
              font: "ppb.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 25
              y_start: 108
              x_end: 286
              y_end: 108
            - type: text
              value: '€0.00'
              x: 0
              "y": 99
              size: 8
              color: black
              font: "ppb.ttf"

            - type: text
              value: "12:00"
              x: 20  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "18:00"
              x: 84  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "0:00"
              x: 147  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "6:00"
              x: 210  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"
            - type: text
              value: "12:00"
              x: 260  # Adjust for alignment
              "y": 113
              size: 9
              color: black
              font: "ppb.ttf"

            - type: text
              value: "High: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
              x: 285
              "y": 2
              size: 13
              color: red
              font: "ppb.ttf"
              anchor: rt
            - type: text
              value: "Low: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
              x: 285
              "y": 15
              size: 13
              color: red
              font: "ppb.ttf"
              anchor: rt
            - type: text
              value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
              x: 285
              "y": 28
              size: 13
              color: red
              font: "ppb.ttf"
              anchor: rt

            - type: line
              fill: red
              width: 1
              x_start: 155
              y_start: 10
              x_end: 155
              y_end: 108

  update_energy_price_today_larger_display:
    alias: "Update Energy Price Today Larger Display"
    description: "Updates the new Solum M3 2.9 inch screens with today's electricty prices"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "fceb879457ffabc7cdd9e21651afbe11"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
            # - fceb879457ffabc7cdd9e21651afbe11
            # #- 29d7d4483b27d042b60d86ac92541aa2
            # - 29d7d4483b27d042b60d86ac92541aa2
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 0 else 'black' }}"
              width: 1
              x_start: 35
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[0].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 46
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[0].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 1 else 'black' }}"
              width: 1
              x_start: 49
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[1].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 60
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[1].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 2 else 'black' }}"
              width: 1
              x_start: 63
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[2].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 74
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[2].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 3 else 'black' }}"
              width: 1
              x_start: 77
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[3].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 88
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[3].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 4 else 'black' }}"
              width: 1
              x_start: 91
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[4].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 102
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[4].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 5 else 'black' }}"
              width: 1
              x_start: 105
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[5].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 116
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[5].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 6 else 'black' }}"
              width: 1
              x_start: 119
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[6].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 130
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[6].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 7 else 'black' }}"
              width: 1
              x_start: 133
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[7].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 144
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[7].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 8 else 'black' }}"
              width: 1
              x_start: 147
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[8].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 158
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[8].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 9 else 'black' }}"
              width: 1
              x_start: 161
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[9].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 172
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[9].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 10 else 'black' }}"
              width: 1
              x_start: 175
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[10].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 186
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[10].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 11 else 'black' }}"
              width: 1
              x_start: 189
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[11].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 200
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[11].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 12 else 'black' }}"
              width: 1
              x_start: 204
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 215
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 13 else 'black' }}"
              width: 1
              x_start: 218
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 229
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 14 else 'black' }}"
              width: 1
              x_start: 232
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 243
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 15 else 'black' }}"
              width: 1
              x_start: 246
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 257
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 16 else 'black' }}"
              width: 1
              x_start: 260
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 271
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 17 else 'black' }}"
              width: 1
              x_start: 274
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 285
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 18 else 'black' }}"
              width: 1
              x_start: 288
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 299
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 19 else 'black' }}"
              width: 1
              x_start: 302
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 313
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 20 else 'black' }}"
              width: 1
              x_start: 316
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 327
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 21 else 'black' }}"
              width: 1
              x_start: 330
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 341
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 22 else 'black' }}"
              width: 1
              x_start: 344
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 355
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 23 else 'black' }}"
              width: 1
              x_start: 358
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 369
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"

            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 10
              x_end: 374
              y_end: 10
            - type: text
              value: '€0.50'
              x: 1
              "y": 1
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 38
              x_end: 374
              y_end: 38
            - type: text
              value: '€0.40'
              x: 1
              "y": 29
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 65
              x_end: 374
              y_end: 65
            - type: text
              value: '€0.30'
              x: 1
              "y": 56
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 93
              x_end: 374
              y_end: 93
            - type: text
              value: '€0.20'
              x: 1
              "y": 84
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 120
              x_end: 374
              y_end: 120
            - type: text
              value: '€0.10'
              x: 1
              "y": 111
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 148
              x_end: 374
              y_end: 148
            - type: text
              value: '€0.00'
              x: 1
              "y": 139
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"

            - type: text
              value: "0:00"
              x: 27  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "6:00"
              x: 109  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "12:00"
              x: 190  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "18:00"
              x: 272  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "24:00"
              x: 354  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"

            - type: text
              value: "Max: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
              x: 373
              "y": 3
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt
            - type: text
              value: "Min: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
              x: 373
              "y": 19
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt
            - type: text
              value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
              x: 373
              "y": 35
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt

  update_energy_price_transition_larger_display:
    alias: "Update Energy Price Transition Larger Display"
    description: "Updates the new Solum M3 2.9 inch screens with tonight's and tomorrow morning's electricty prices"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "fceb879457ffabc7cdd9e21651afbe11"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 12 else 'black' }}"
              width: 1
              x_start: 35
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 46
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[12].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 13 else 'black' }}"
              width: 1
              x_start: 49
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 60
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[13].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 14 else 'black' }}"
              width: 1
              x_start: 63
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 74
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[14].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 15 else 'black' }}"
              width: 1
              x_start: 77
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 88
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[15].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 16 else 'black' }}"
              width: 1
              x_start: 91
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 102
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[16].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 17 else 'black' }}"
              width: 1
              x_start: 105
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 116
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[17].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 18 else 'black' }}"
              width: 1
              x_start: 119
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 130
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[18].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 19 else 'black' }}"
              width: 1
              x_start: 133
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 144
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[19].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 20 else 'black' }}"
              width: 1
              x_start: 147
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 158
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[20].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 21 else 'black' }}"
              width: 1
              x_start: 161
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 172
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[21].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 22 else 'black' }}"
              width: 1
              x_start: 175
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 186
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[22].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 23 else 'black' }}"
              width: 1
              x_start: 189
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 200
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_today[23].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 0 else 'black' }}"
              width: 1
              x_start: 204
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[0].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 215
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[0].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 1 else 'black' }}"
              width: 1
              x_start: 218
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[1].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 229
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[1].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 2 else 'black' }}"
              width: 1
              x_start: 232
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[2].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 243
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[2].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 3 else 'black' }}"
              width: 1
              x_start: 246
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[3].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 257
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[3].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 4 else 'black' }}"
              width: 1
              x_start: 260
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[4].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 271
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[4].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 5 else 'black' }}"
              width: 1
              x_start: 274
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[5].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 285
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[5].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 6 else 'black' }}"
              width: 1
              x_start: 288
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[6].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 299
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[6].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 7 else 'black' }}"
              width: 1
              x_start: 302
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[7].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 313
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[7].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 8 else 'black' }}"
              width: 1
              x_start: 316
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[8].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 327
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[8].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 9 else 'black' }}"
              width: 1
              x_start: 330
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[9].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 341
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[9].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 10 else 'black' }}"
              width: 1
              x_start: 344
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[10].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 355
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[10].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"
            - type: rectangle
              outline: black
              fill: "{{ 'red' if now().hour == 11 else 'black' }}"
              width: 1
              x_start: 358
              y_start: "{{ max(min(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[11].value / 0.50 * (148 - 5))) | round(0), 148), 5) }}"
              x_end: 369
              y_end: "{{ min(max(148 - ((states.sensor.nordpool_energy_price.attributes.raw_tomorrow[11].value / 0.50 * (148 - 5))) | round(0), 148), 168) }}"

            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 10
              x_end: 374
              y_end: 10
            - type: text
              value: '€0.50'
              x: 1
              "y": 1
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 38
              x_end: 374
              y_end: 38
            - type: text
              value: '€0.40'
              x: 1
              "y": 29
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 65
              x_end: 374
              y_end: 65
            - type: text
              value: '€0.30'
              x: 1
              "y": 56
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 93
              x_end: 374
              y_end: 93
            - type: text
              value: '€0.20'
              x: 1
              "y": 84
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 120
              x_end: 374
              y_end: 120
            - type: text
              value: '€0.10'
              x: 1
              "y": 111
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: line
              fill: black
              width: 1
              x_start: 30
              y_start: 148
              x_end: 374
              y_end: 148
            - type: text
              value: '€0.00'
              x: 1
              "y": 139
              size: 10
              color: black
              anchor: lt
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"

            - type: text
              value: "12:00"
              x: 27  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "18:00"
              x: 109  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "0:00"
              x: 190  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "6:00"
              x: 272  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"
            - type: text
              value: "12:00"
              x: 354  # Adjust for alignment
              "y": 162
              size: 10
              color: black
              anchor: lb
              font: "/config/www/fonts/Pixolletta_8px_h14.ttf"

            - type: text
              value: "Max: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'max')|float()) }}"
              x: 373
              "y": 3
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt
            - type: text
              value: "Min: €{{ '{:0.3f}'.format(state_attr('sensor.nordpool_energy_price', 'min')|float()) }}"
              x: 373
              "y": 19
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt
            - type: text
              value: "Current: €{{ '{:0.3f}'.format(states('sensor.nordpool_energy_price')|float()) }}"
              x: 373
              "y": 35
              size: 16
              color: red
              font: "/config/www/fonts/SF Pixelate 10pt/SF Pixelate Bold.ttf"
              stroke_width: 2
              stroke_fill: 'white'
              anchor: rt

  update_garbage_monitor_display:
    alias: "Update Garbage Monitor Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "c7b6f77506400992217dfccd860d1ee0"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          payload:
            - type: line
              fill: red
              width: 3
              x_start: 5
              y_start: 64
              x_end: 121
              y_end: 64
            - type: line
              fill: red
              width: 3
              x_start: 168
              y_start: 64
              x_end: 290
              y_end: 64
            - type: line
              fill: red
              width: 3
              x_start: 148
              y_start: 5
              x_end: 148
              y_end: 34
            - type: line
              fill: red
              width: 3
              x_start: 148
              y_start: 89
              x_end: 148
              y_end: 123

            - type: rectangle
              outline: white
              fill: >-
                {{'white' if states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_restafval') | int > 1 else 'red' }}
              width: 1
              x_start: 5
              y_start: 5
              x_end: 123
              y_end: 60
            - type: text
              value: Restafval
              font: ppb.ttf
              x: 35
              "y": 10
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_restafval') | int > 1 else 'white' }}
            - type: text
              value: >-
                {% if states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none'] %}
                  Unknown
                {% elif states('sensor.days_to_restafval') | int == 0 %}
                  Today
                {% elif states('sensor.days_to_restafval') | int == 1 %}
                  Tonight
                {% else %}
                  {{states('sensor.days_to_restafval')}} days
                {% endif %}
              font: ppb.ttf
              x: 35
              "y": 33
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_restafval') | int > 1 else 'white' }}

            - type: rectangle
              outline: white
              fill: >-
                {{'white' if states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_papier') | int > 1 else 'red' }}
              width: 1
              x_start: 168
              y_start: 5
              x_end: 290
              y_end: 60
            - type: text
              value: Papier
              font: ppb.ttf
              x: 190
              "y": 10
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_papier') | int > 1 else 'white' }}
            - type: text
              value: >-
                {% if states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none'] %}
                  Unknown
                {% elif states('sensor.days_to_papier') | int == 0 %}
                  Today
                {% elif states('sensor.days_to_papier') | int == 1 %}
                  Tonight
                {% else %}
                  {{states('sensor.days_to_papier')}} days
                {% endif %}
              font: ppb.ttf
              x: 190
              "y": 33
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_papier') | int > 1 else 'white' }}

            - type: rectangle
              outline: white
              fill: >-
                {{'white' if states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_gft') | int > 1 else 'red' }}
              width: 1
              x_start: 5
              y_start: 70
              x_end: 123
              y_end: 123
            - type: text
              value: GFT
              font: ppb.ttf
              x: 35
              "y": 80
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_gft') | int > 1 else 'white' }}
            - type: text
              value: >-
                {% if states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'] %}
                  Unknown
                {% elif states('sensor.days_to_gft') | int == 0 %}
                  Today
                {% elif states('sensor.days_to_gft') | int == 1 %}
                  Tonight
                {% else %}
                  {{states('sensor.days_to_gft')}} days
                {% endif %}
              font: ppb.ttf
              x: 35
              "y": 103
              size: 18
              color: >-
                {{'black' if states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'] or
                states('sensor.days_to_gft') | int > 1 else 'white' }}

            - type: rectangle
              outline: white
              fill: white
              width: 1
              x_start: 0
              y_start: 119
              x_end: 100
              y_end: 128
            - type: text
              value: " {{ states('sensor.date') | string }} "
              font: ppb.ttf
              x: 0
              "y": 119
              size: 9
              color: black
            - type: icon
              value: >-
                {{ 'alert-circle' if
                  (states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none']) or
                  (states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none']) or
                  (states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'])
                else 'trash-can' }}
              x: 123
              "y": 39
              size: 50
              color: >-
                {{ 'red' if (([(14 if
                  states('sensor.days_to_restafval') in ['unknown', 'unavailable', 'none'] else states('sensor.days_to_restafval')),(14 if
                  states('sensor.days_to_papier') in ['unknown', 'unavailable', 'none'] else
                  states('sensor.days_to_papier')),(14 if
                  states('sensor.days_to_gft') in ['unknown', 'unavailable', 'none'] else
                  states('sensor.days_to_gft')) ]) | min ) | int < 2 else
                'black' }}

  update_study_climate_display:
    alias: "Update Study Climate Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "ab510c02b314bf3bf98fa4d65f911229"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          dry-run: false
          rotate: 270
          payload:
            # Desk
            - type: text
              value: "Temp:"
              font: ppb.ttf
              x: 1
              "y": 23
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_aqm_temperature') | round(1,default='NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 23
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "°C"
              font: ppb.ttf
              x: 90
              "y": 23
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "Hum:"
              font: ppb.ttf
              x: 1
              "y": 45
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_aqm_humidity') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 45
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "%"
              font: ppb.ttf
              x: 90
              "y": 45
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "Press:"
              font: ppb.ttf
              x: 1
              "y": 67
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_aqm_pressure') | int(default='NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 67
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "hPa"
              font: ppb.ttf
              x: 90
              "y": 67
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "CO2:" #Might be changed to CO₂ later. Currently the character is not included.
              font: ppb.ttf
              x: 1
              "y": 89
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_co2') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 89
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "ppm"
              font: ppb.ttf
              x: 90
              "y": 89
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "PM1:"
              font: ppb.ttf
              x: 1
              "y": 111
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_pm_1_concentration') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 111
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "µg/m³"
              font: ppb.ttf
              x: 90
              "y": 111
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "PM2.5:"
              font: ppb.ttf
              x: 1
              "y": 133
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_pm_2_5_concentration') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 133
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "µg/m³"
              font: ppb.ttf
              x: 90
              "y": 133
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "PM10:"
              font: ppb.ttf
              x: 1
              "y": 155
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.study_pm_10_concentration') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 155
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "µg/m³"
              font: ppb.ttf
              x: 90
              "y": 155
              size: 10
              color: 'black'
              anchor: lb

              # Outside temperature and humidity
            - type: line
              x_start: 5
              x_end: 123
              y_start: 159
              y_end: 159
              width: 2
              fill: red
            - type: text
              value: "Shed AQM"
              font: ppb.ttf
              x: 20
              "y": 182
              size: 12
              color: 'black'
              anchor: lb

            - type: text
              value: "Temp:"
              font: ppb.ttf
              x: 1
              "y": 202
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.shed_aqm_temperature') | round(1,default='NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 202
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "°C"
              font: ppb.ttf
              x: 90
              "y": 202
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "Hum:"
              font: ppb.ttf
              x: 1
              "y": 224
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.shed_aqm_humidity') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 224
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "%"
              font: ppb.ttf
              x: 90
              "y": 224
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "PM2.5:"
              font: ppb.ttf
              x: 1
              "y": 246
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.shed_pm_2_5_concentration') | int('NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 246
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "µg/m³"
              font: ppb.ttf
              x: 90
              "y": 246
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: "Multi:"
              font: ppb.ttf
              x: 1
              "y": 270
              size: 12
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.temperature_outside') | round(1,default='NaN') }}"
              font: ppb.ttf
              x: 85
              "y": 270
              size: 16
              color: 'red'
              anchor: rb
            - type: text
              value: "°C"
              font: ppb.ttf
              x: 90
              "y": 270
              size: 10
              color: 'black'
              anchor: lb

            - type: text
              value: " Update: {{ states('sensor.time') | string }} "
              font: ppb.ttf
              x: 1
              "y": 295
              size: 10
              color: 'black'
              anchor: lb

  update_study_energy_display:
    alias: "Update Study Energy Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "bee8d1c7023925de74fc4e839cae072e"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          payload:
            # Desk
            - type: text
              value: "Desk:"
              font: ppb.ttf
              x: 3
              "y": 23
              size: 14
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.averaged_computer_power') | string }}"
              font: ppb.ttf
              x: 119
              "y": 23
              size: 30
              color: 'red'
              anchor: rb
            - type: text
              value: "w"
              font: ppb.ttf
              x: 141
              "y": 23
              size: 14
              color: 'black'
              anchor: rb
            # NAS
            - type: text
              value: "NAS:"
              font: ppb.ttf
              x: 3
              "y": 57
              size: 14
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.plug_nas_power') | string }}"
              font: ppb.ttf
              x: 119
              "y": 57
              size: 30
              color: 'red'
              anchor: rb
            - type: text
              value: "w"
              font: ppb.ttf
              x: 141
              "y": 57
              size: 14
              color: 'black'
              anchor: rb
            # Total energy
            - type: text
              value: "Total:"
              font: ppb.ttf
              x: 1
              "y": 90
              size: 14
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.daily_energy_use')|round(1,default='NaN') | string }}"
              font: ppb.ttf
              x: 118
              "y": 90
              size: 30
              color: 'red'
              anchor: rb
            - type: text
              value: "kWh"
              font: ppb.ttf
              x: 150
              "y": 90
              size: 14
              color: 'black'
              anchor: rb
              # Water
            - type: text
              value: "Water:"
              font: ppb.ttf
              x: 3
              "y": 128
              size: 14
              color: 'black'
              anchor: lb
            - type: text
              value: "{{ states('sensor.daily_water_use')|round(0,default='NaN') | string }}"
              font: ppb.ttf
              x: 119
              "y": 128
              size: 30
              color: 'red'
              anchor: rb
            - type: text
              value: "L"
              font: ppb.ttf
              x: 141
              "y": 128
              size: 14
              color: 'black'
              anchor: rb
              # Update
            - type: text
              value: " Update: {{ states('sensor.time') | string }} "
              font: ppb.ttf
              x: 150
              "y": 150
              size: 14
              color: 'black'
              anchor: rb

  # update_precipitation_display:
  #   alias: "Update Precipitation Display"
  #   sequence:
  #     - service: open_epaper_link.drawcustom
  #       target:
  #         entity_id: open_epaper_link.00007e225dd0b29c
  #       data:
  #         background: white
  #         rotate: 0
  #         dry-run: false
  #         payload:
  #           - type: plot_custom
  #             x_start: 10
  #             y_start: 10
  #             x_end: 344
  #             y_end: 150
  #             low: 0
  #             high: 20
  #             ylegend:
  #               position: right
  #               color: red
  #             yaxis:
  #               tick_width: 4
  #               grid: 5
  #             data:
  #               color: black
  #               width: 1
  #               joint: None
  #               x: "{{ state_attr('sensor.precipitation_forecast', 'precipitation_raw') | map(attribute='timestamp') | join(',') }}"
  #               y: "{{ state_attr('sensor.precipitation_forecast', 'precipitation_raw') | map(attribute='precipitation') | join(',') }}"

  update_moeke_water_tank_display:
    alias: "Update Moeke Water Tank Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "a5fb0b3999b39d6b82d0c338d9bc211e"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              fill: >
                {{ 'white' if is_state('sensor.moeke_low_water_warning', 'no_warning') else 'red' }}
              outline: black
              width: 2
              x_start: 0
              y_start: 0
              x_end: 151
              y_end: 75
            - type: text
              value: "Dreame Status"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 10
              size: 16
              color: >
                {{ 'black' if is_state('sensor.moeke_low_water_warning', 'no_warning') else 'white' }}
            - type: text
              value: "{{ 'OK' if is_state('sensor.moeke_low_water_warning', 'no_warning') else 'NOK' }}"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 30
              size: 40
              color: >
                {{ 'black' if is_state('sensor.moeke_low_water_warning', 'no_warning') else 'white' }}
            - type: rectangle
              fill: >
                {{ 'white' if is_state('binary_sensor.moeke_reservoir_leak_sensor', 'on') else 'red' }}
              outline: black
              width: 2
              x_start: 0
              y_start: 76
              x_end: 151
              y_end: 151
            - type: text
              value: "Leak Status:"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 85
              size: 16
              color: >
                {{ 'black' if is_state('binary_sensor.moeke_reservoir_leak_sensor', 'on') else 'white' }}
            - type: text
              value: "{{ 'WET' if is_state('binary_sensor.moeke_reservoir_leak_sensor', 'on') else 'DRY' }}"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 110
              size: 40
              color: >
                {{ 'black' if is_state('binary_sensor.moeke_reservoir_leak_sensor', 'on') else 'white' }}

  update_litterbox_display:
    alias: "Update Litterbox Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "5f61de1a08a9f1dcb162b383d8be9a4e"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            - type: rectangle
              fill: >
                {{ 'red' if states('sensor.litterbox_total_counts') | int > 15 else 'white' }}
              outline: white
              width: 0
              x_start: 0
              y_start: 0
              x_end: 151
              y_end: 151
            - type: text
              value: "Total"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 10
              size: 20
              color: >
                {{ 'white' if states('sensor.litterbox_total_counts') | int > 15 else 'black' }}
            - type: text
              value: "{{ states('sensor.litterbox_total_counts') }}"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 40
              size: 30
              color: >
                {{ 'white' if states('sensor.litterbox_total_counts') | int > 15 else 'black' }}
            - type: text
              value: "Today"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 80
              size: 20
              color: >
                {{ 'white' if states('sensor.litterbox_total_counts') | int > 15 else 'black' }}
            - type: text
              value: "{{ states('sensor.litterbox_counts_today') }}"
              font: ppb.ttf
              anchor: mt
              x: 75
              y: 110
              size: 40
              color: >
                {{ 'white' if states('sensor.litterbox_total_counts') | int > 15 else 'black' }}

  update_study_powerstrip_display:
    alias: "Update Study Powerstrip Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "a5fb0b3999b39d6b82d0c338d9bc211e"
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: false
          payload:
            # Quadrant 1: PC
            - type: rectangle
              fill: >
                {{ 'white' if is_state('switch.powerstrip_study_desk_socket_1', 'on')
                  else 'red' if is_state('switch.powerstrip_study_desk_socket_1', 'off')
                  else 'black' }}
              outline: black
              width: 2
              x_start: 0
              y_start: 0
              x_end: 75
              y_end: 75
            - type: icon
              value: desktop-tower
              x: 37
              y: 37
              size: 36
              color: >
                {{ 'black' if is_state('switch.powerstrip_study_desk_socket_1', 'on')
                  else 'white' }}
            # Quadrant 2: Laptop Dock
            - type: rectangle
              fill: >
                {{ 'white' if is_state('switch.powerstrip_study_desk_socket_2', 'on')
                  else 'red' if is_state('switch.powerstrip_study_desk_socket_2', 'off')
                  else 'black' }}
              outline: black
              width: 2
              x_start: 76
              y_start: 0
              x_end: 151
              y_end: 75
            - type: icon
              value: laptop
              x: 113
              y: 37
              size: 36
              color: >
                {{ 'black' if is_state('switch.powerstrip_study_desk_socket_2', 'on')
                  else 'white' }}
            # Quadrant 3: Peripherals
            - type: rectangle
              fill: >
                {{ 'white' if is_state('switch.powerstrip_study_desk_socket_3', 'on')
                  else 'red' if is_state('switch.powerstrip_study_desk_socket_3', 'off')
                  else 'black' }}
              outline: black
              width: 2
              x_start: 0
              y_start: 76
              x_end: 75
              y_end: 151
            - type: icon
              value: audio-video
              x: 37
              y: 113
              size: 36
              color: >
                {{ 'black' if is_state('switch.powerstrip_study_desk_socket_3', 'on') 
                  else 'white' }}
            # Quadrant 4: Monitors
            - type: rectangle
              fill: >
                {{ 'white' if is_state('switch.powerstrip_study_desk_socket_4', 'on') 
                  else 'red' if is_state('switch.powerstrip_study_desk_socket_4', 'off') 
                  else 'black' }}
              outline: black
              width: 2
              x_start: 76
              y_start: 76
              x_end: 151
              y_end: 151
            - type: icon
              value: monitor-multiple
              x: 113
              y: 113
              size: 36
              color: >
                {{ 'black' if is_state('switch.powerstrip_study_desk_socket_4', 'on') 
                  else 'white' }}

  update_router_speedtest_display:
    alias: "Update Router and Speedtest Display"
    description: "Displays router bandwidth and speedtest results on a 1.54\" ePaper display using OpenEPaperLink."
    mode: single
    fields:
      display_device_id:
        description: "The device ID of the OpenEPaperLink display to update."
        example: "a5fb0b3999b39d6b82d0c338d9bc211e"
        required: true
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          ttl: 300
          payload:
            # Top Left Section
            - type: rectangle
              outline: white
              fill: white
              width: 1
              x_start: 0
              y_start: 0
              x_end: 75
              y_end: 49

            - type: icon
              size: 32
              color: black
              value: mdi:download
              x: 1
              y: 8

            - type: text
              font: ppb.ttf
              size: 24
              color: black
              anchor: mm
              value: "{{ states('sensor.udmp_download_speed_mbs') }}"
              x: 52
              y: 14

            - type: text
              font: ppb.ttf
              size: 18
              color: black
              anchor: mm
              value: "{{ state_attr('sensor.udmp_download_speed_mbs', 'unit_of_measurement') }}"
              x: 52

            # Top Right Section
            - type: rectangle
              outline: white
              fill: white
              width: 1
              x_start: 77
              y_start: 0
              x_end: 151
              y_end: 49

            - type: icon
              size: 32
              color: >
                {% if states('sensor.google_dns_round_trip_time_average') | float > 1000 %}
                  red
                {% else %}
                  black
                {% endif %}
              value: mdi:google
              x: 77
              y: 8

            - type: text
              font: ppb.ttf
              size: 24
              color: >
                {% if states('sensor.google_dns_round_trip_time_average') | float > 1000 %}
                  red
                {% else %}
                  black
                {% endif %}
              value: "{{ states('sensor.google_dns_round_trip_time_average') }}"
              x: 128
              y: 14

            - type: text
              font: ppb.ttf
              size: 18
              color: >
                {% if states('sensor.google_dns_round_trip_time_average') | float > 1000 %}
                  red
                {% else %}
                  black
                {% endif %}
              value: "{{ state_attr('sensor.google_dns_round_trip_time_average', 'unit_of_measurement') }}"
              x: 128

            # Middle Graph Section
            - type: rectangle
              outline: white
              fill: white
              width: 1
              x_start: 0
              y_start: 51
              x_end: 151
              y_end: 100

            - type: icon
              size: 32
              color: black
              value: mdi:upload
              x: 1
              y: 59

            - type: plot
              font: ppb.ttf
              size: 12
              ylegend:
                position: right
                color: red
              yaxis: null
              x_start: 34
              y_start: 52
              x_end: 149
              y_end: 99
              duration: 86400
              data:
                - entity: sensor.udmp_download_speed_mbs
                  width: 3
                  joint: curve
                  color: black
                - entity: sensor.udmp_upload_speed_mbs
                  width: 1
                  joint: curve
                  color: red

            # Bottom Graph Section
            - type: rectangle
              outline: white
              fill: white
              width: 1
              x_start: 0
              y_start: 102
              x_end: 151
              y_end: 151

            - type: icon
              size: 32
              color: black
              value: mdi:google
              x: 1
              y: 110

            - type: plot
              font: ppb.ttf
              size: 12
              ylegend:
                position: right
                color: red
              yaxis: null
              x_start: 34
              y_start: 103
              x_end: 149
              y_end: 150
              duration: 86400
              data:
                - entity: sensor.google_dns_round_trip_time_average
                  width: 3
                  joint: curve
                  color: black

  update_epaper_calendar_display:
    alias: "[epaper|calendar] Update Epaper Tag with Calendar Events"
    description: "Fetch next 48h calendar events, show top 5 on e-paper tag."
    mode: single
    fields:
      display_device_id:
        description: "The device ID of the OpenEPaperLink display to update."
        example: "0384f3ad3a85237fcb589d95931ddc60"
        required: true
    sequence:
      - alias: 'Fetch calendar events for next 48h'
        service: calendar.get_events
        target:
          entity_id:
            - calendar.sander_blok_gmail_com
            - calendar.feestdagen_in_nederland
            - calendar.theater
            - calendar.optredens_in_bandsintown
        data:
          duration:
            hours: 48
        response_variable: calendar_events
      - alias: "Prepare event list"
        variables:
          all_events: >
            {{
              (
                calendar_events['calendar.sander_blok_gmail_com'].events +
                calendar_events['calendar.feestdagen_in_nederland'].events +
                calendar_events['calendar.theater'].events +
                calendar_events['calendar.optredens_in_bandsintown'].events
              )
              | sort(attribute='start')
            }}
          show_events: "{{ all_events[:5] }}"
      - alias: "Draw to Epaper"
        service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          dither: 0
          ttl: 60
          background: white
          dry-run: false
          rotate: 270
          payload:
            # Row 1
            - type: rectangle
              x_start: 0
              x_end: 184
              y_start: 0
              y_end: 76
              outline: black
              width: 2
            - type: text
              value: >
                {% set ev = show_events[0] if show_events|count > 0 else None %}
                {% if ev is not none %}
                  {% if "T" in ev.start %}
                    {{ as_datetime(ev.start).strftime('%a %d %b %H:%M') }}
                  {% else %}
                    {{ as_datetime(ev.start).strftime('%d %b') }}
                  {% endif %}
                {% else %}
                  {{ " " }}
                {% endif %}
              x: 6
              y: 6
              size: 12
              color: black
            - type: text
              value: >
                {% set ev = show_events[0] if show_events|count > 0 else None %}
                {{ ev.summary if ev is not none else " " }}
              max_width: 174
              x: 10
              y: 20
              size: 15
              color: black

            # Row 2
            - type: rectangle
              x_start: 0
              x_end: 184
              y_start: 76
              y_end: 153
              outline: black
              width: 2
            - type: text
              value: >
                {% set ev = show_events[1] if show_events|count > 1 else None %}
                {% if ev is not none %}
                  {% if "T" in ev.start %}
                    {{ as_datetime(ev.start).strftime('%a %d %b %H:%M') }}
                  {% else %}
                    {{ as_datetime(ev.start).strftime('%d %b') }}
                  {% endif %}
                {% else %}
                  {{ " " }}
                {% endif %}
              x: 6
              y: 82
              size: 12
              color: black
            - type: text
              value: >
                {% set ev = show_events[1] if show_events|count > 1 else None %}
                {{ ev.summary if ev is not none else " " }}
              max_width: 174
              x: 10
              y: 96
              size: 15
              color: black

            # Row 3
            - type: rectangle
              x_start: 0
              x_end: 184
              y_start: 153
              y_end: 230
              outline: black
              width: 2
            - type: text
              value: >
                {% set ev = show_events[2] if show_events|count > 2 else None %}
                {% if ev is not none %}
                  {% if "T" in ev.start %}
                    {{ as_datetime(ev.start).strftime('%a %d %b %H:%M') }}
                  {% else %}
                    {{ as_datetime(ev.start).strftime('%d %b') }}
                  {% endif %}
                {% else %}
                  {{ " " }}
                {% endif %}
              x: 6
              y: 159
              size: 12
              color: black
            - type: text
              value: >
                {% set ev = show_events[2] if show_events|count > 2 else None %}
                {{ ev.summary if ev is not none else " " }}
              max_width: 174
              x: 10
              y: 173
              size: 15
              color: black

            # Row 4
            - type: rectangle
              x_start: 0
              x_end: 184
              y_start: 230
              y_end: 307
              outline: black
              width: 2
            - type: text
              value: >
                {% set ev = show_events[3] if show_events|count > 3 else None %}
                {% if ev is not none %}
                  {% if "T" in ev.start %}
                    {{ as_datetime(ev.start).strftime('%a %d %b %H:%M') }}
                  {% else %}
                    {{ as_datetime(ev.start).strftime('%d %b') }}
                  {% endif %}
                {% else %}
                  {{ " " }}
                {% endif %}
              x: 6
              y: 236
              size: 12
              color: black
            - type: text
              value: >
                {% set ev = show_events[3] if show_events|count > 3 else None %}
                {{ ev.summary if ev is not none else " " }}
              max_width: 174
              x: 10
              y: 250
              size: 15
              color: black

            # Row 5
            - type: rectangle
              x_start: 0
              x_end: 184
              y_start: 307
              y_end: 384
              outline: black
              width: 2
            - type: text
              value: >
                {% set ev = show_events[4] if show_events|count > 4 else None %}
                {% if ev is not none %}
                  {% if "T" in ev.start %}
                    {{ as_datetime(ev.start).strftime('%a %d %b %H:%M') }}
                  {% else %}
                    {{ as_datetime(ev.start).strftime('%d %b') }}
                  {% endif %}
                {% else %}
                  {{ " " }}
                {% endif %}
              x: 6
              y: 313
              size: 12
              color: black
            - type: text
              value: >
                {% set ev = show_events[4] if show_events|count > 4 else None %}
                {{ ev.summary if ev is not none else " " }}
              max_width: 174
              x: 10
              y: 327
              size: 15
              color: black

  update_washing_machine_display:
    alias: "[epaper|laundry] Update Washing Machine Display"
    mode: queued
    fields:
      display_device_id:
        description: "The device ID of the display to be updated"
        example: "165750b668ea226052a89d9bf8239287"
        default: "165750b668ea226052a89d9bf8239287"
      progress_percent:
        description: "Current progress as a percentage (0–100)"
        example: 0
        default: 0
    sequence:
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          payload:
            # Job State (top, big, centered)
            - type: text
              value: >
                {% if is_state('sensor.washer_washer_job_state', 'none') %}
                  Not Running
                {% else %}
                  {{ states('sensor.washer_washer_job_state') | title }}
                {% endif %}
              font: ppb.ttf
              x: 148
              y: 25
              size: 28
              color: 'black'
              anchor: mm
            # Progress Bar (centered)
            - type: progress_bar
              x_start: 20
              y_start: 45
              x_end: 276
              y_end: 75
              fill: red
              outline: black
              width: 2
              progress: "{{ progress_percent | int }}"
              direction: right
              show_percentage: true
              font: "ppb.ttf"
            # Completion Time (below progress bar, left)
            - type: text
              value: >
                {%- set state = states('sensor.washer_washer_job_state') -%}
                {%- if state != 'Finish' and state != 'Ready' %}
                  Done @ {{ as_datetime(states('sensor.washer_washer_completion_time')).astimezone().strftime('%a %d %b %H:%M') }}
                {%- else -%}
                  Ready!
                {%- endif -%}
              font: ppb.ttf
              x: 148
              y: 100
              size: 18
              color: 'black'
              anchor: mb
            - type: text
              value: "Updated: {{ now().strftime('%H:%M') }}"
              font: ppb.ttf
              x: 3
              y: 125
              size: 12
              color: 'black'
              anchor: lb


  drawcustom_snapshot_examples:
    alias: "Generate drawcustom snapshots"
    mode: single
    fields:
      display_device_id:
        description: "Device ID of the display to be updated"
        example: "5f61de1a08a9f1dcb162b383d8be9a4e"
      camera_entity:
        description: "Camera entity capturing the display"
        example: "camera.0000021e6b5b3b17_content"
    sequence:
      # Debug Grid
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: debug_grid
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_debug_grid.jpg"
      - delay: "00:00:05"

      # Text
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: text
              value: "Hello World!"
              x: 10
              y: 10
              size: 20
              color: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_text.jpg"
      - delay: "00:00:05"

      # Multiline Text
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: multiline
              value: "Line 1|Line 2|Line 3"
              delimiter: "|"
              x: 10
              offset_y: 20
              size: 20
              color: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_multiline_text.jpg"
      - delay: "00:00:05"

      # Line
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: line
              x_start: 5
              x_end: 152
              y_start: 20
              y_end: 20
              width: 1
              fill: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_line.jpg"
      - delay: "00:00:05"

      # Rectangle
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: rectangle
              x_start: 10
              x_end: 80
              y_start: 30
              y_end: 60
              width: 2
              fill: red
              outline: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_rectangle.jpg"
      - delay: "00:00:05"

      # Rectangle Pattern
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: rectangle_pattern
              x_start: 5
              x_size: 35
              x_offset: 10
              y_start: 28
              y_size: 18
              y_offset: 2
              x_repeat: 1
              y_repeat: 4
              fill: white
              outline: red
              width: 1
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_rectangle_pattern.jpg"
      - delay: "00:00:05"

      # Polygon
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: polygon
              points:
                - [10, 10]
                - [50, 10]
                - [50, 50]
                - [10, 50]
              fill: red
              outline: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_polygon.jpg"
      - delay: "00:00:05"

      # Circle
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: circle
              x: 60
              y: 60
              radius: 20
              fill: red
              outline: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_circle.jpg"
      - delay: "00:00:05"

      # Ellipse
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: ellipse
              x_start: 50
              x_end: 100
              y_start: 40
              y_end: 80
              fill: red
              outline: black
              width: 1
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_ellipse.jpg"
      - delay: "00:00:05"

      # Arc / Pie Slice
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: arc
              x: 100
              y: 60
              radius: 30
              start_angle: 0
              end_angle: 90
              fill: red
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_arc.jpg"
      - delay: "00:00:05"

      # Icon
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: icon
              value: mdi:account-cowboy-hat
              x: 60
              y: 60
              size: 40
              color: black
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_icon.jpg"
      - delay: "00:00:05"

      # Icon Sequence
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: icon_sequence
              x: 10
              y: 100
              icons:
                - mdi:home
                - mdi:arrow-right
                - mdi:office-building
              size: 24
              direction: right
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_icon_sequence.jpg"
      - delay: "00:00:05"

      # Download Image
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: dlimg
              url: "https://upload.wikimedia.org/wikipedia/en/7/73/Trollface.png"
              x: 2
              y: 2
              xsize: 120
              ysize: 120
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_dlimg.jpg"
      - delay: "00:00:05"

      # QR Code
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: qrcode
              data: "https://tweakers.net/pricewatch/"
              x: 0
              y: 0
              boxsize: 2
              border: 1
              color: black
              bgcolor: white
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_qrcode.jpg"
      - delay: "00:00:05"

      # Plot
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: plot
              x_start: 10
              y_start: 5
              x_end: 140
              y_end: 140
              low: 10
              high: 30
              duration: 36000
              ylegend:
                color: black
                position: left
                size: 10
                width: -1
              yaxis:
                width: 1
                color: black
                tick_width: 2
                tick_every: 5
                grid: true
                grid_color: black
                grid_style: dotted
              xlegend:
                format: "%H:%M"
                interval: 10800
                snap_to_hours: true
                color: black
                position: bottom
                size: 10
                width: -1
              xaxis:
                width: 1
                color: black
                grid: 5
                grid_color: gray
                grid_style: dotted
                tick_width: 2
                tick_length: 4
                tick_every: 1.0
              data:
                - entity: sensor.shed_aqm_temperature
                  color: red
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_plot.jpg"
      - delay: "00:00:05"

      # Progress Bar
      - service: open_epaper_link.drawcustom
        target:
          device_id: "{{ display_device_id }}"
        data:
          background: white
          rotate: 0
          dry-run: true
          payload:
            - type: progress_bar
              x_start: 5
              y_start: 5
              x_end: 147
              y_end: 30
              fill: red
              outline: black
              width: 1
              progress: 42
              direction: right
              show_percentage: true
              font: "ppb.ttf"
      - delay: "00:00:02"
      - service: camera.snapshot
        data:
          entity_id: "{{ camera_entity }}"
          filename: "/config/www/epapertag_snapshots/example_progress_bar.jpg"
      - delay: "00:00:05"
