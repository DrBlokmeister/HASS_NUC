homeassistant:
  customize:

input_number:
  bathroom_light_timeout: #in minutes
    name: Bathroom light timeout
    step: 1
    min: 0
    max: 30
    mode: box

#################
#    SENSORS    #
#################
sensor:
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Statistics
    sampling_size: 200
    precision: 0
    max_age:
      hours: 24
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      bathroom_shower_occupied:
        friendly_name: "Bathroom Shower Occupation"
        value_template: "{{ states('sensor.humidity_bathroom')|int > state_attr('sensor.humidity_bathroom_statistics', 'median')|int + 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_statistics', 'unavailable') }}"
      bathroom_shower_left:
        friendly_name: "Bathroom Shower Left"
        value_template: "{{ states('sensor.humidity_bathroom')|int < state_attr('sensor.humidity_bathroom_statistics', 'max_value')|int - 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_statistics', 'unavailable') }}"
########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  shower_occupied:
    name: Shower Occupation
##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[bathroom|light] turn on light through motion'
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.motion_sensor_bathroom
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.sleep_tracking_on
        state: 'off'
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
    action:
      - choose:
        - conditions:
            - condition: time
              after: '07:00:00'
              before: '21:00:00'
          sequence:
            - service: light.turn_on
              entity_id:
                - light.bathroom_light_bright
                - light.bathroom_light_dim
        - conditions:
            - condition: time
              after: '21:00:00'
              before: '07:00:00'
          sequence:
            - service: light.turn_on
              entity_id:
                - light.bathroom_light_dim
      - wait_for_trigger:
          - platform: template
            value_template: "{{ is_state('binary_sensor.motion_sensor_bathroom', 'off') and is_state('input_boolean.shower_occupied', 'off') }}"
            for:
              minutes: "{{ states('input_number.bathroom_light_timeout')|int }}"
      - condition: state
        entity_id: light.bathroom_light_dim
        state: 'on'
      - service: light.turn_off
        entity_id: light.bathroom_light_dim
      - delay:
          milliseconds: 300
      - service: light.turn_on
        entity_id: light.bathroom_light_dim
      - delay:
          milliseconds: 300
      - service: light.turn_off
        entity_id: light.bathroom_light_dim
      - delay:
          milliseconds: 300
      - service: light.turn_on
        entity_id: light.bathroom_light_dim
      - delay:
          seconds: 15
      - service: light.turn_off
        entity_id:
          - light.bathroom_light_bright
          - light.bathroom_light_dim

  - alias: '[bathroom|occupancy] Set shower occupancy input boolean'
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.bathroom_shower_occupied
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bathroom_shower_left
        to: 'on'
      - platform: numeric_state
        entity_id: sensor.water_consumption_per_hour
        below: 50
        for:
          minutes: 2
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_occupied' }}"
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.shower_occupied
          - conditions:
              - condition: template
                value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_left' or trigger.entity_id == 'sensor.water_consumption_per_hour'}}"
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.shower_occupied

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

################
#    LIGHTS    #
################
light:
  - platform: template
    lights:
      bathroom_light_bright:
        #friendly name: "Bathroom light bright"
        #entity_id: switch.shelly_bathroom_1
        value_template: "{{ states('switch.shelly_bathroom_1') }}"
        turn_on:
          service: switch.turn_on
          entity_id: switch.shelly_bathroom_1
        turn_off:
          service: switch.turn_off
          entity_id: switch.shelly_bathroom_1
      bathroom_light_dim:
        #friendly name: "Bathroom light dim"
        #entity_id: switch.shelly_bathroom_2
        value_template: "{{ states('switch.shelly_bathroom_2') }}"
        turn_on:
          service: switch.turn_on
          entity_id: switch.shelly_bathroom_2
        turn_off:
          service: switch.turn_off
          entity_id: switch.shelly_bathroom_2
  - platform: group
    name: Bathroom Lights
    entities:
      - light.bathroom_light_bright
      - light.bathroom_light_dim

#################
#    SCRIPTS    #
#################
script:

