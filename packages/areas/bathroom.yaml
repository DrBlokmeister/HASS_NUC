homeassistant:
  customize:

input_number:
  bathroom_light_timeout: #in minutes
    name: Bathroom light timeout
    step: 1
    min: 0
    max: 30
    mode: box

timer:
  bathroom_lights:

#################
#    SENSORS    #
#################
sensor:
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Median
    unique_id: statistics_humidity_bathroom_median
    state_characteristic: median
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Max
    unique_id: statistics_humidity_bathroom_max
    state_characteristic: value_max
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Min
    unique_id: statistics_humidity_bathroom_min
    state_characteristic: value_min
    precision: 0
    max_age:
      hours: 24
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      bathroom_shower_occupied:
        friendly_name: "Bathroom Shower Occupation"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) > states('sensor.humidity_bathroom_median')|int(0) + 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_median', 'unavailable') }}"
      bathroom_shower_left:
        friendly_name: "Bathroom Shower Left"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) < states('sensor.humidity_bathroom_max')|int(0) - 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_max', 'unavailable') }}"
########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  shower_occupied:
    name: Shower Occupation
##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[bathroom|lights]Toggle lights through switch press'
    id: bathroom_lights_toggle_lights_through_switch_press
    mode: restart
    trigger:
      - platform: event
        event_type: esphome.button_pressed
        event_data:
          device_name: "Shelly Bathroom"
          channel: "Spotlights"
    condition:
    action:
      - service: light.toggle
        data:
          entity_id: light.bathroom
          brightness_pct: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'brightness_pct') | int }}"
          kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"

  # - alias: '[bathroom|light] turn on light through motion'
  #   mode: restart
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_motion_1
  #       to: 'on'
  #   condition:
  #     - condition: state
  #       entity_id: input_boolean.sleep_tracking_on
  #       state: 'off'
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #   action:
  #     - choose:
  #       - conditions:
  #           - condition: time
  #             after: '06:00:00'
  #             before: '21:00:00'
  #         sequence:
  #           - service: light.turn_on
  #             entity_id:
  #               - light.bathroom_light_bright
  #               - light.bathroom_light_dim
  #       - conditions:
  #           - condition: time
  #             after: '21:00:00'
  #             before: '06:00:00'
  #         sequence:
  #           - service: light.turn_on
  #             entity_id:
  #               - light.bathroom_light_dim
  #     - service: timer.start
  #       data:
  #         entity_id: timer.bathroom_lights
  #         duration: "{{ states('input_number.bathroom_light_timeout')|int(5)*60 }}"
  #     - wait_for_trigger:
  #         - platform: template
  #           value_template: "{{ is_state('binary_sensor.bathroom_motion_1', 'off') and is_state('input_boolean.shower_occupied', 'off') }}"
  #           for:
  #             minutes: "{{ states('input_number.bathroom_light_timeout')|int(5) }}"
  #         - platform: numeric_state
  #           entity_id: sensor.water_consumption_per_hour
  #           below: 1
  #           for:
  #             minutes: 15
  #     - condition: state
  #       entity_id: light.bathroom_light_dim
  #       state: 'on'
  #     - service: light.turn_off
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_on
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_off
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_on
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         seconds: 15
  #     - service: light.turn_off
  #       entity_id:
  #         - light.bathroom_light_bright
  #         - light.bathroom_light_dim

  # - alias: '[bathroom|occupancy] Set shower occupancy input boolean'
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_shower_occupied
  #       to: 'on'
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_shower_left
  #       to: 'on'
  #     - platform: numeric_state
  #       entity_id: sensor.water_consumption_per_hour
  #       below: 50
  #       for:
  #         minutes: 2
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_motion_1
  #       to: 'off'
  #       for:
  #         minutes: 60
  #   action:
  #     - choose:
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_occupied' }}"
  #           sequence:
  #             - service: input_boolean.turn_on
  #               entity_id: input_boolean.shower_occupied
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_left' or trigger.entity_id == 'sensor.water_consumption_per_hour' or trigger.entity_id == 'binary_sensor.bathroom_motion_1'}}"
  #           sequence:
  #             - service: input_boolean.turn_off
  #               entity_id: input_boolean.shower_occupied

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

################
#    LIGHTS    #
################
light:
  # - platform: template
  #   lights:
  #     bathroom_light_bright:
  #       #friendly name: "Bathroom light bright"
  #       #entity_id: switch.shelly_bathroom_1
  #       value_template: "{{ states('switch.shelly_bathroom_1') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_bathroom_1
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_bathroom_1
  #     bathroom_light_dim:
  #       #friendly name: "Bathroom light dim"
  #       #entity_id: switch.shelly_bathroom_2
  #       value_template: "{{ states('switch.shelly_bathroom_2') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_bathroom_2
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_bathroom_2
  # - platform: group
  #   name: Bathroom Lights
  #   entities:
  #     - light.bathroom_light_bright
  #     - light.bathroom_light_dim

#################
#    SCRIPTS    #
#################
script:

