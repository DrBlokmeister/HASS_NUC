homeassistant:
  customize: {}

input_number:
  bathroom_light_timeout: #in minutes
    name: Bathroom light timeout
    step: 1
    min: 0
    max: 30
    mode: box

timer:
  bathroom_lights:

#################
#    SENSORS    #
#################
sensor:
  - platform: statistics
    name: Humidity Bathroom Median
    entity_id: sensor.humidity_bathroom
    unique_id: statistics_humidity_bathroom_median
    state_characteristic: median
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    name: Humidity Bathroom Max
    entity_id: sensor.humidity_bathroom
    unique_id: statistics_humidity_bathroom_max
    state_characteristic: value_max
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    name: Humidity Bathroom Min
    entity_id: sensor.humidity_bathroom
    unique_id: statistics_humidity_bathroom_min
    state_characteristic: value_min
    precision: 0
    max_age:
      hours: 24

  - platform: statistics
    name: Bathroom Motion Detection Ratio
    unique_id: yaml_sensor_statistics_bathroom_motion_detection_ratio
    entity_id: binary_sensor.bathroom_motion_1
    state_characteristic: average_step
    max_age:
      minutes: 30
    keep_last_sample: false

  - platform: template
    sensors:
      shower_occupied_bayesian_probability:
        friendly_name: "Shower Occupied Bayesian Probability"
        unit_of_measurement: Chance
        value_template: >
          {% set prior = 0.02 %}
          {% set light_on = is_state("light.bathroom", "on") %}
          {% set humidity_increase = (states('sensor.humidity_bathroom')|float - states('sensor.home_mean_humidity_without_bathroom')|float) > 20 %}
          {% set water_usage = states('sensor.water_usage')|float > 1 %}
          {% set temperature_change = states('sensor.tapwater_temperature_change_1min')|float < -5 %}

          {% set prob_light_given_shower = 0.8 if light_on else 0.08 %}
          {% set prob_humidity_given_shower = 0.80 if humidity_increase else 0.05 %}
          {% set prob_water_usage_given_shower = 0.80 if water_usage else 0.10 %}
          {% set prob_temp_change_given_shower = 0.80 if temperature_change else 0.02 %}

          {% set numerator = prior * prob_light_given_shower * prob_humidity_given_shower * prob_water_usage_given_shower * prob_temp_change_given_shower %}
          {% set denominator = (prior * prob_light_given_shower * prob_humidity_given_shower * prob_water_usage_given_shower * prob_temp_change_given_shower) + ((1-prior) * (1-prob_light_given_shower) * (1-prob_humidity_given_shower) * (1-prob_water_usage_given_shower) * (1-prob_temp_change_given_shower)) %}

          {% set posterior_probability = numerator / denominator %}

          {{ posterior_probability }}
        availability_template: >
          {{ not (
              states('light.bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.humidity_bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.home_mean_humidity_without_bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.water_usage') in [None, 'unavailable', 'unknown'] or
              states('sensor.tapwater_temperature_change_1min') in [None, 'unavailable', 'unknown']
            ) }}

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      bathroom_shower_occupied:
        friendly_name: "Bathroom Shower Occupation"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) > states('sensor.humidity_bathroom_median')|int(0) + 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_median', 'unavailable') }}"
      bathroom_shower_left:
        friendly_name: "Bathroom Shower Left"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) < states('sensor.humidity_bathroom_max')|int(0) - 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_max', 'unavailable') }}"
      bathroom_bayesian_test_humidity_contition:
        value_template: "{{ (states('sensor.humidity_bathroom')|int(0) - states('sensor.humidity_bathroom_min')|int(0)) > 15 }}"
      bathroom_bayesian_test_light_contition:
        value_template: "{{ is_state('light.bathroom', 'on') }}"
      bathroom_bayesian_test_water_usage_contition:
        value_template: "{{ states('sensor.water_meter_current_water_consumption')|int(0) > 20 }}"

  - platform: bayesian
    name: Shower Occupied
    device_class: occupancy
    prior: 0.0125 #Shower should be on around 20 min each day. So 0.3/24
    probability_threshold: 0.6
    observations:
      - platform: state
        entity_id: light.bathroom
        prob_given_true: 0.7 #70% of the time we shower, the light is on
        prob_given_false: 0.10 #10% of the time we don't shower, the light is on
        to_state: "on"
      - platform: template
        value_template: >  # Bathroom humidity is at least 15% above minimum humidity
          {{ (states('sensor.humidity_bathroom')|int(0) - states('sensor.home_mean_humidity_without_bathroom')|int(0)) > 15 }}
        prob_given_true: 0.90
        prob_given_false: 0.01
      - platform: numeric_state
        entity_id: sensor.water_usage
        above: 5
        prob_given_true: 0.98 #When we shower, water usage is almost never under 1 l/min
        prob_given_false: 0.10 #However, water is also being used when we don't shower.
      - platform: numeric_state
        entity_id: sensor.tapwater_temperature_change_1min
        prob_given_true: 0.90 #When we shower, tapwater is cooling down, but this is not immediately seen.
        prob_given_false: 0.02 #Tapwater almost never cools down this fast if we don't shower.
        below: -5
      - platform: state
        entity_id: binary_sensor.bathroom_motion_1
        to_state: "on"
        prob_given_true: 0.3 #Motion is detected roughly 30% of the time when we shower
        prob_given_false: 0.05 #If we don't shower, motion is detected less than 5% of the time
      # I should refer to the new bathroom motion sensor statistics here

        # I should also use the current water usage. I created these, but should first test if they work. Added in power_monitor.yaml
                # - platform: derivative
                #   source: sensor.water_meter_main_water_consumption
                #   name: Current Water Consumption
                #   unit_time: min
                #   time_window: "00:01:00"

                # - platform: statistics
                #   entity_id: sensor.water_meter_water_consumption
                #   name: Statistics Water per Minute
                #   state_characteristic: sum
                #   max_age:
                #     minutes: 1

########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  shower_occupied:
    name: Shower Occupation
  hot_water_in_shower:
    name: Hot Water in Shower
##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[bathroom|lights]Toggle lights when switch is pressed'
    id: bathroom_lights_toggle_lights_when_switch_is_pressed
    mode: restart
    trigger:
      - platform: event
        event_type: esphome.button_pressed
        event_data:
          device_name: Shelly Bathroom
          channel: "1"
        variables:
          click_count: "{{ trigger.event.data.click_count }}"
    action:
      - service: script.toggle_lights_with_adaptive_brightness
        data:
          light_entity: light.bathroom
          transition_time: 0.5
          click_count: "{{ click_count }}"

  - alias: '[bathroom|lights]Toggle mirror light when switch is pressed'
    id: bathroom_lights_toggle_mirror_light_when_switch_is_pressed
    mode: restart
    trigger:
      - platform: event
        event_type: esphome.button_pressed
        event_data:
          device_name: Shelly Bathroom
          channel: "2"
    action:
      - service: script.toggle_lights_with_adaptive_brightness
        data:
          light_entity: light.bathroom_mirror_hue
          transition_time: 0.5
          click_count: "{{ trigger.event.data.click_count }}"

  - alias: '[bathroom|occupancy] Set shower occupancy input boolean'
    id: yaml_automation_bathroom_occupancy_set_shower_occupancy_input_boolean
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.bathroom_shower_occupied
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bathroom_shower_left
        to: 'on'
      - platform: numeric_state
        entity_id: sensor.water_usage
        below: 5
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.bathroom_motion_1
        to: 'off'
        for:
          minutes: 60
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_occupied' }}"
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.shower_occupied
          - conditions:
              - condition: template
                value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_left' or trigger.entity_id == 'sensor.water_consumption_per_hour' or trigger.entity_id == 'binary_sensor.bathroom_motion_1'}}"
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.shower_occupied

  - alias: '[bathroom|occupancy] Detect Hot Water Usage in Shower'
    id: detect_hot_water_usage_in_shower
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.water_usage
        above: 5
      - platform: numeric_state
        entity_id: sensor.water_usage
        below: 5
        for:
          minutes: 5
    condition:
      - condition: template
        value_template: >
          {% if trigger.to_state.state|float > 5 %}
            true
          {% else %}
            states('sensor.tapwater_temperature_change_5min')|float <= -1
          {% endif %}
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.water_usage
                above: 5
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.hot_water_in_shower
          - conditions:
              - condition: numeric_state
                entity_id: sensor.water_usage
                below: 5
                for:
                  minutes: 5
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.hot_water_in_shower

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

################
#    LIGHTS    #
################
light:

#################
#    SCRIPTS    #
#################
script:

