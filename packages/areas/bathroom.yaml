homeassistant:
  customize: {}

input_number:
  bathroom_light_timeout: #in minutes
    name: Bathroom light timeout
    step: 1
    min: 0
    max: 30
    mode: box

timer:
  bathroom_lights:

#################
#    SENSORS    #
#################
sensor:
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Median
    unique_id: statistics_humidity_bathroom_median
    state_characteristic: median
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Max
    unique_id: statistics_humidity_bathroom_max
    state_characteristic: value_max
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    entity_id: sensor.humidity_bathroom
    name: Humidity Bathroom Min
    unique_id: statistics_humidity_bathroom_min
    state_characteristic: value_min
    precision: 0
    max_age:
      hours: 24

  - platform: template
    sensors:
      shower_occupied_bayesian_probability:
        friendly_name: "Shower Occupied Bayesian Probability"
        unit_of_measurement: Chance
        value_template: >
          {% set prior = 0.02 %}
          {% set light_on = is_state("light.bathroom", "on") %}
          {% set humidity_increase = (states('sensor.humidity_bathroom')|float - states('sensor.home_mean_humidity_without_bathroom')|float) > 20 %}
          {% set water_usage = states('sensor.water_usage')|float > 1 %}
          {% set temperature_change = states('sensor.tapwater_temperature_change')|float < -5 %}

          {% set prob_light_given_shower = 0.8 if light_on else 0.08 %}
          {% set prob_humidity_given_shower = 0.80 if humidity_increase else 0.05 %}
          {% set prob_water_usage_given_shower = 0.80 if water_usage else 0.10 %}
          {% set prob_temp_change_given_shower = 0.80 if temperature_change else 0.02 %}

          {% set numerator = prior * prob_light_given_shower * prob_humidity_given_shower * prob_water_usage_given_shower * prob_temp_change_given_shower %}
          {% set denominator = (prior * prob_light_given_shower * prob_humidity_given_shower * prob_water_usage_given_shower * prob_temp_change_given_shower) + ((1-prior) * (1-prob_light_given_shower) * (1-prob_humidity_given_shower) * (1-prob_water_usage_given_shower) * (1-prob_temp_change_given_shower)) %}

          {% set posterior_probability = numerator / denominator %}

          {{ posterior_probability }}
        availability_template: >
          {{ not (
              states('light.bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.humidity_bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.home_mean_humidity_without_bathroom') in [None, 'unavailable', 'unknown'] or
              states('sensor.water_usage') in [None, 'unavailable', 'unknown'] or
              states('sensor.tapwater_temperature_change') in [None, 'unavailable', 'unknown']
            ) }}

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      bathroom_shower_occupied:
        friendly_name: "Bathroom Shower Occupation"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) > states('sensor.humidity_bathroom_median')|int(0) + 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_median', 'unavailable') }}"
      bathroom_shower_left:
        friendly_name: "Bathroom Shower Left"
        value_template: "{{ states('sensor.humidity_bathroom')|int(0) < states('sensor.humidity_bathroom_max')|int(0) - 15 }}"
        device_class: occupancy
        availability_template: "{{ not is_state('sensor.humidity_bathroom', 'unavailable') and not is_state('sensor.humidity_bathroom_max', 'unavailable') }}"
      bathroom_bayesian_test_humidity_contition:
        value_template: "{{ (states('sensor.humidity_bathroom')|int(0) - states('sensor.humidity_bathroom_min')|int(0)) > 15 }}"
      bathroom_bayesian_test_light_contition:
        value_template: "{{ is_state('light.bathroom', 'on') }}"
      bathroom_bayesian_test_water_usage_contition:
        value_template: "{{ states('sensor.water_meter_current_water_consumption')|int(0) > 20 }}"

  - platform: bayesian
    name: Shower Occupied
    device_class: occupancy
    prior: 0.02 #Shower should be on around 30 min each day. So 0.5/24
    probability_threshold: 0.5
    observations:
      - platform: state
        entity_id: light.bathroom
        prob_given_true: 0.8 #70% of the time we shower, the light is on
        prob_given_false: 0.08 #5% of the time we don't shower, the light is on
        to_state: "on"
      - platform: template
        value_template: >  # Bathroom humidity is at least 20% above minimum humidity
          {{ (states('sensor.humidity_bathroom')|int(0) - states('sensor.home_mean_humidity_without_bathroom')|int(0)) > 20 }}
        prob_given_true: 0.80
        prob_given_false: 0.05
      - platform: numeric_state
        entity_id: sensor.water_usage
        prob_given_true: 0.80
        prob_given_false: 0.10
        above: 1
      - platform: numeric_state
        entity_id: sensor.tapwater_temperature_change
        prob_given_true: 0.90
        prob_given_false: 0.02
        below: -5

        # I should also use the current water usage. I created these, but should first test if they work. Added in power_monitor.yaml
                # - platform: derivative
                #   source: sensor.water_meter_main_water_consumption
                #   name: Current Water Consumption
                #   unit_time: min
                #   time_window: "00:01:00"

                # - platform: statistics
                #   entity_id: sensor.water_meter_water_consumption
                #   name: Statistics Water per Minute
                #   state_characteristic: sum
                #   max_age:
                #     minutes: 1

########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  shower_occupied:
    name: Shower Occupation
##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[bathroom|lights]Toggle lights when switch is pressed'
    id: bathroom_lights_toggle_lights_when_switch_is_pressed
    mode: restart
    trigger:
      - platform: event
        event_type: esphome.button_pressed
        event_data:
          device_name: "Shelly Bathroom"
          channel: "Spotlights"
    condition:
    action:
      - service: light.toggle
        data:
          entity_id: light.bathroom
          brightness_pct: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'brightness_pct') | int }}"
          kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"

  # - alias: '[bathroom|light] turn on light through motion'
  #   mode: restart
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_motion_1
  #       to: 'on'
  #   condition:
  #     - condition: state
  #       entity_id: input_boolean.sleep_tracking_on
  #       state: 'off'
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #   action:
  #     - choose:
  #       - conditions:
  #           - condition: time
  #             after: '06:00:00'
  #             before: '21:00:00'
  #         sequence:
  #           - service: light.turn_on
  #             entity_id:
  #               - light.bathroom_light_bright
  #               - light.bathroom_light_dim
  #       - conditions:
  #           - condition: time
  #             after: '21:00:00'
  #             before: '06:00:00'
  #         sequence:
  #           - service: light.turn_on
  #             entity_id:
  #               - light.bathroom_light_dim
  #     - service: timer.start
  #       data:
  #         entity_id: timer.bathroom_lights
  #         duration: "{{ states('input_number.bathroom_light_timeout')|int(5)*60 }}"
  #     - wait_for_trigger:
  #         - platform: template
  #           value_template: "{{ is_state('binary_sensor.bathroom_motion_1', 'off') and is_state('input_boolean.shower_occupied', 'off') }}"
  #           for:
  #             minutes: "{{ states('input_number.bathroom_light_timeout')|int(5) }}"
  #         - platform: numeric_state
  #           entity_id: sensor.water_consumption_per_hour
  #           below: 1
  #           for:
  #             minutes: 15
  #     - condition: state
  #       entity_id: light.bathroom_light_dim
  #       state: 'on'
  #     - service: light.turn_off
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_on
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_off
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         milliseconds: 300
  #     - service: light.turn_on
  #       entity_id: light.bathroom_light_dim
  #     - delay:
  #         seconds: 15
  #     - service: light.turn_off
  #       entity_id:
  #         - light.bathroom_light_bright
  #         - light.bathroom_light_dim

  # - alias: '[bathroom|occupancy] Set shower occupancy input boolean'
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_shower_occupied
  #       to: 'on'
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_shower_left
  #       to: 'on'
  #     - platform: numeric_state
  #       entity_id: sensor.water_consumption_per_hour
  #       below: 50
  #       for:
  #         minutes: 2
  #     - platform: state
  #       entity_id: binary_sensor.bathroom_motion_1
  #       to: 'off'
  #       for:
  #         minutes: 60
  #   action:
  #     - choose:
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_occupied' }}"
  #           sequence:
  #             - service: input_boolean.turn_on
  #               entity_id: input_boolean.shower_occupied
  #         - conditions:
  #             - condition: template
  #               value_template: "{{ trigger.entity_id == 'binary_sensor.bathroom_shower_left' or trigger.entity_id == 'sensor.water_consumption_per_hour' or trigger.entity_id == 'binary_sensor.bathroom_motion_1'}}"
  #           sequence:
  #             - service: input_boolean.turn_off
  #               entity_id: input_boolean.shower_occupied

################
#    SCENES    #
################
scene:

################
#    GROUPS    #
################
group:

################
#    LIGHTS    #
################
light:
  # - platform: template
  #   lights:
  #     bathroom_light_bright:
  #       #friendly name: "Bathroom light bright"
  #       #entity_id: switch.shelly_bathroom_1
  #       value_template: "{{ states('switch.shelly_bathroom_1') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_bathroom_1
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_bathroom_1
  #     bathroom_light_dim:
  #       #friendly name: "Bathroom light dim"
  #       #entity_id: switch.shelly_bathroom_2
  #       value_template: "{{ states('switch.shelly_bathroom_2') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_bathroom_2
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_bathroom_2
  # - platform: group
  #   name: Bathroom Lights
  #   entities:
  #     - light.bathroom_light_bright
  #     - light.bathroom_light_dim

#################
#    SCRIPTS    #
#################
script:

