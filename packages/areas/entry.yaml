homeassistant:
  customize:

input_number:
  entry_illumination_limit:
    name: Entry illumination limit
    step: 1
    min: 0
    max: 200
    mode: box
  entry_light_timeout: #in minutes
    name: Hallway 1st Floor light timeout
    step: 1
    min: 0
    max: 30
    mode: box
#################
#    SENSORS    #
#################
sensor:

########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      entry_motion_combined:
        device_class: motion
        value_template: >-
          {{
            is_state('binary_sensor.entry_motion_1', 'on') or
            is_state('binary_sensor.entry_motion_2', 'on')
          }}
        availability_template: "{{ (states('binary_sensor.entry_motion_1') in ['on', 'off']) and (states('binary_sensor.entry_motion_2') in ['on', 'off']) }}"
########################
#    INPUT BOOLEANS    #
########################
input_boolean:

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[entry|light]Turn on entry lights through switch press'
    id: entry_light_switch_press
    mode: queued
    trigger:
      platform: state
      entity_id: switch.shelly_entry
    condition:
      - condition: state
        entity_id: switch.shelly_entry
        state:
          - 'on'
          - 'off'
        for:
          seconds: 5
    action:
      service: light.toggle
      data:
        entity_id: light.entry
        brightness: 255
        kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"

  - alias: '[entry|light]Lights_when_utility_cabinet_is_open'
    id: entry_light_utility_cabinet
    mode: queued
    trigger:
      platform: state
      entity_id: binary_sensor.kitchen_door_window_sensor
      to: 'on'
    action:
      - service: scene.create
        data:
          scene_id: entry_1_before
          snapshot_entities:
            light.entry_1
      - service: light.turn_on
        data:
          entity_id: light.entry_1
          brightness: 255
          color_temp: 280
          transition: 0.5
      - delay:
          seconds: 1
      - wait_template: "{{ is_state('binary_sensor.kitchen_door_window_sensor', 'off')}}"
        timeout: '00:10:00'
        continue_on_timeout: false   #prevent restoring old light state if the closet remains open for a long time
      - service: scene.turn_on
        data:
          entity_id: scene.entry_1_before
          transition: 1
      - delay:
          seconds: 2

  - alias: '[entry|lights] Turn on lights when motion is detected'
    id: entry_lights_turn_on_lights_when_motion_is_detected
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.entry_motion_combined
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ states('sensor.entry_motion_2_illuminance')|int < states('input_number.entry_illumination_limit')|int }}"
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.entry
          brightness: 255
          kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.entry_motion_combined
            to: 'off'
            for:
      #         minutes: 3
      #     - platform: template
      #       value_template: "{{ states('sensor.entry_motion_2_illuminance')|int > states('input_number.entry_illumination_limit')|int }}"
      #       for:
      #         minutes: 10
      # - service: light.turn_off
      #   entity_id: light.entry
              minutes: "{{ states('input_number.entry_light_timeout')|int }}"
          - platform: template
            value_template: "{{ states('sensor.entry_motion_2_illuminance')|int > states('input_number.entry_illumination_limit')|int }}"
            for:
              minutes: "{{ states('input_number.entry_light_timeout')|int }}"
      - service: light.turn_on
        data:
          entity_id: light.entry
          brightness_step: -120
          transition: 0.5
      - delay:
          seconds: 15
      - service: light.turn_off
        entity_id: light.entry

  - alias: '[entry|alarm]Alarm when front door is open too long'
    id: entry_alarm_alarm_when_front_door_is_open_too_long
    trigger:
      platform: state
      entity_id: binary_sensor.door_window_sensor_frontdoor
      to: 'on'
      for:
        minutes: 10
    action:
      repeat:
        while:
          - condition: state
            entity_id: binary_sensor.door_window_sensor_frontdoor
            state: 'on'
          # Don't do it too many times
          - condition: template
            value_template: "{{ repeat.index <= 20 }}"
        sequence:
          - service: tts.cloud_say
            entity_id: media_player.living_room_speaker
            data:
              message: "Front door is still open!"
              language: en-IE
          - delay:
              minutes: 2

  - alias: '[entry|mail] Alert when mail delivered'
    id: 'entry_mail_alert_when_mail_delivered'
    mode: queued
    trigger:
      platform: state
      entity_id: binary_sensor.vibration_sensor_mailbox
      to: 'on'
    condition:
      - condition: state
        entity_id: binary_sensor.door_window_sensor_frontdoor
        state: 'off'
        for:
          minutes: 2
    action:
      - service: notify.mobile_app_blokmeisters21u
        data_template:
          title: Mail Delivered!
          message: "Mail delivery has been detected."
          data:
            group: Info
            tag: mailbox
            clickAction: '/lovelace/8'
            icon_url: /local/icons/email-alert.png

################
#    SCENES    #
################
scene:

################
#    LIGHTS    #
################
light:
  # - platform: template
  #   lights:
  #     shelly_entry_light:
  #       # entity_id: switch.shelly_entry
  #       value_template: "{{ states('switch.shelly_entry') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_entry
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_entry
  # - platform: group
  #   name: Entry Lights
  #   entities:
  #     - light.shelly_entry_light
  #     - light.entry_1

################
#    GROUPS    #
################
group:
  # entry_motion_sensors:
  #   entities:
  #     - binary_sensor.motion_sensor_entry
  #     - binary_sensor.motion_sensor_entry2
#################
#    SCRIPTS    #
#################
script:
