homeassistant:
  customize: {}

input_number:
  entry_illumination_limit:
    name: Entry illumination limit
    step: 1
    min: 0
    max: 200
    mode: box
  entry_light_timeout: #in minutes
    name: Entry light timeout
    step: 1
    min: 0
    max: 30
    mode: box
  entry_light_illumination_difference:
    name: Entry Light Illumination Difference
    min: 0
    max: 500
    step: 1
    unit_of_measurement: "lx"
    mode: box
    icon: mdi:brightness-auto

utility_meter:
  litterbox_total_counts:
    unique_id: utility_meter_sensor_litterbox_counts_today_total
    source: sensor.litterbox_counts_today
    name: Litterbox Total Counts
    # icon: mdi:cat
    periodically_resetting: true
  litterbox_daily_counts:
    unique_id: utility_meter_sensor_litterbox_counts_daily
    source: sensor.litterbox_counts_today
    cycle: daily
    name: Litterbox Daily Counts
    # icon: mdi:cat
    periodically_resetting: true
  litterbox_weekly_counts:
    unique_id: utility_meter_sensor_litterbox_counts_weekly
    source: sensor.litterbox_counts_today
    cycle: weekly
    name: Litterbox Weekly Counts
    # icon: mdi:cat
    periodically_resetting: true
  litterbox_monthly_counts:
    unique_id: utility_meter_sensor_litterbox_counts_monthly
    source: sensor.litterbox_counts_today
    cycle: monthly
    name: Litterbox Monthly Counts
    # icon: mdi:cat
    periodically_resetting: true
  litterbox_yearly_counts:
    unique_id: utility_meter_sensor_litterbox_counts_yearly
    source: sensor.litterbox_counts_today
    cycle: yearly
    name: Litterbox Yearly Counts
    # icon: mdi:cat
    periodically_resetting: true
#################
#    SENSORS    #
#################
sensor:
  - platform: group
    name: "Entry Average Illuminance"
    unique_id: yaml_sensor_group_entry_average_illuminance
    type: mean
    ignore_non_numeric: true
    state_class: measurement
    device_class: illuminance
    unit_of_measurement: lx
    entities:
      - sensor.motion_motion_2_illuminance
      - sensor.entry_light_1
      - sensor.entry_light_1
  - platform: history_stats
    name: Litterbox Counts Today
    entity_id: binary_sensor.litterbox_vibration
    state: "on"
    type: count
    start: "{{ today_at('00:00') }}"
    end: "{{ now() }}"
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  - platform: template
    sensors:
      entry_motion_combined:
        device_class: motion
        value_template: >-
          {{
            is_state('binary_sensor.entry_motion_1', 'on') or
            is_state('binary_sensor.entry_motion_2', 'on')
          }}
        availability_template: "{{ (states('binary_sensor.entry_motion_1') in ['on', 'off']) and (states('binary_sensor.entry_motion_2') in ['on', 'off']) }}"
########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  entry_light_level_calibration_switch:
    name: Entry Light Level Calibration
    initial: off
    icon: mdi:lightbulb-on-outline  # Nice icon for the UI

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[entry|light]Toggle lights when switch is pressed'
    id: entry_light_toggle_lights_when_switch_is_pressed
    mode: queued
    trigger:
      - platform: event
        event_type: esphome.button_pressed
        event_data:
          device_name: "Shelly Entry"
        variables:
          click_count: "{{ trigger.event.data.click_count }}"
    action:
      - service: script.toggle_lights_with_adaptive_brightness
        data:
          light_entity: light.entry
          transition_time: 0.5
          click_count: "{{ click_count }}"
      # service: light.toggle
      # data:
      #   entity_id: light.entry
      #   brightness: 255
      #   kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"

  - alias: '[entry|light]Lights_when_utility_cabinet_is_open'
    id: entry_light_utility_cabinet
    mode: queued
    trigger:
      platform: state
      entity_id: binary_sensor.meterkast_door_sensor
      to: 'on'
    action:
      - service: scene.create
        data:
          scene_id: entry_1_before
          snapshot_entities:
            light.entry_1
      - service: light.turn_on
        data:
          entity_id: light.entry_1
          brightness: 255
          color_temp: 280
          transition: 0.5
      - delay:
          seconds: 1
      - wait_template: "{{ is_state('binary_sensor.meterkast_door_sensor', 'off')}}"
        timeout: '00:10:00'
        continue_on_timeout: false   #prevent restoring old light state if the closet remains open for a long time
      - service: scene.turn_on
        data:
          entity_id: scene.entry_1_before
          transition: 1
      - delay:
          seconds: 2

  - alias: '[entry|lights] Turn on lights when motion is detected'
    id: entry_lights_turn_on_lights_when_motion_is_detected
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.entry_motion_combined
        to: 'on'
      - platform: template #Going down first stairs
        id: going_down_second_stairs
        value_template: >-
          {{
            (is_state('binary_sensor.hallway_1st_floor_motion_1', 'on') or is_state('binary_sensor.hallway_1st_floor_motion_2', 'on')) and
            (is_state('binary_sensor.entry_motion_1', 'off') and is_state('binary_sensor.entry_motion_2', 'off')) and
            is_state('binary_sensor.stairs_lower_motion_1', 'on')
          }}
    condition:
      - condition: template
        value_template: "{{ (states('sensor.entry_light_1')|int(1000) ) < states('input_number.entry_illumination_limit')|int }}"
      - condition: state
        entity_id: binary_sensor.house_occupied
        state: 'on'
    action:
      - service: light.turn_on
        data:
          entity_id: light.entry
          brightness: 255
          kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int }}"
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.entry_motion_combined
            to: 'off'
            for:
      #         minutes: 3
      #     - platform: template
      #       value_template: "{{ states('sensor.entry_light_1')|int > states('input_number.entry_illumination_limit')|int }}"
      #       for:
      #         minutes: 10
      # - service: light.turn_off
      #   entity_id: light.entry
              minutes: "{{ states('input_number.entry_light_timeout')|int }}"
          - platform: template
            value_template: "{{ (states('sensor.entry_light_1')|int(0) - states('input_number.entry_light_illumination_difference')|int(0)) > states('input_number.entry_illumination_limit')|int }}"
            for:
              minutes: "{{ states('input_number.entry_light_timeout')|int }}"
      - service: light.turn_on
        data:
          entity_id: light.entry
          brightness_step: -120
          transition: 0.5
      - delay:
          seconds: 15
      - service: light.turn_off
        entity_id: light.entry

  - alias: '[entry|alarm]Alarm when front door is open too long'
    id: entry_alarm_alarm_when_front_door_is_open_too_long
    trigger:
      platform: state
      entity_id: binary_sensor.front_door_sensor
      to: 'on'
      for:
        minutes: 10
    action:
      repeat:
        while:
          - condition: state
            entity_id: binary_sensor.front_door_sensor
            state: 'on'
          # Don't do it too many times
          - condition: template
            value_template: "{{ repeat.index <= 20 }}"
        sequence:
          - service: tts.cloud_say
            entity_id: media_player.living_room_speaker
            data:
              message: "Front door is still open!"
              language: en-IE
          - delay:
              minutes: 2

  - alias: '[entry|mail] Alert when mail delivered'
    id: 'entry_mail_alert_when_mail_delivered'
    mode: queued
    trigger:
      platform: state
      entity_id: binary_sensor.vibration_sensor_mailbox
      to: 'on'
    condition:
      - condition: state
        entity_id: binary_sensor.front_door_sensor
        state: 'off'
        for:
          minutes: 2
    action:
      - service: notify.mobile_app_blokmeisters21u
        data_template:
          title: Mail Delivered!
          message: "Mail delivery has been detected."
          data:
            group: Info
            tag: mailbox
            clickAction: '/lovelace/8'
            icon_url: /local/icons/email-alert.png

  - alias: "[entry|doorbell] Smart Doorbell Notification"
    id: automation_yaml_entry_doorbell_smart_doorbell_notification
    description: "Send notifications when the doorbell is pressed and repeat alerts if the house is occupied."
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.doorbell_button
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(state_attr('automation.entry_doorbell_smart_doorbell_notification', 'last_triggered'), default=0) | int > 3) }}"
    action:
      - service: notify.sander_and_tamara_phones
        data:
          message: "Someone's at the door!"
          title: "Doorbell Alert"
          data:
            ttl: 0
            priority: high
            tag: doorbell
            group: "doorbell_alert"
            notification_icon: "mdi:bell-ring"
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.house_occupied
                state: 'on'
            sequence:
              - service: light.turn_on
                entity_id: light.shelly_porch
              - repeat:
                  until:
                    - condition: or
                      conditions:
                        - condition: state
                          entity_id: binary_sensor.front_door_sensor
                          state: 'on'
                        - condition: template
                          value_template: "{{ repeat.index > 5 }}"
                  sequence:
                    - service: tts.cloud_say
                      target:
                        entity_id: media_player.living_room_speaker
                      data:
                        message: "Someone is at the door. Please check!"
                        language: "en-IE"
                    - service: notify.sander_and_tamara_phones
                      data:
                        message: "Reminder: Doorbell was pressed. Please check the door."
                        title: "Doorbell Reminder"
                        data:
                          ttl: 0
                          priority: high
                          tag: doorbell
                          group: "doorbell_alert"
                          notification_icon: "mdi:bell-ring"
                    - delay:
                        seconds: 4
              - wait_for_trigger:
                  - platform: state
                    entity_id: binary_sensor.front_door_sensor
                    to: 'off'
                    for:
                      minutes: 5
                timeout:
                  minutes: 10
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ wait.completed }}"
                    sequence:
                      - service: notify.sander_and_tamara_phones
                        data:
                          message: "clear_notification"
                          data:
                            ttl: 0
                            priority: high
                            tag: doorbell
                      - service: notify.sander_and_tamara_phones
                        data:
                          message: "clear_notification"
                          data:
                            ttl: 0
                            priority: high
                            tag: doorbell
                      - service: notify.sander_and_tamara_phones
                        data:
                          message: "clear_notification"
                          data:
                            ttl: 0
                            priority: high
                            tag: doorbell
                      - service: notify.sander_and_tamara_phones
                        data:
                          message: "clear_notification"
                          data:
                            ttl: 0
                            priority: high
                            tag: doorbell
              - service: light.turn_off
                entity_id: light.shelly_porch

  - alias: "[entry|litterbox] Reset Litterbox Count"
    id: automation_yaml_entry_litterbox_reset_litterbox_count
    description: "Resets the litterbox utility meter to zero."
    mode: single
    max_exceeded: silent
    trigger:
      - platform: event
        event_type: deconz_event
        event_data:
          id: litterbox_button
          event: 1001
    action:
      - service: utility_meter.calibrate
        target:
          entity_id: sensor.litterbox_total_counts
        data:
          value: "0"
      - service: light.turn_on
        data:
          kelvin: 4691
          brightness_pct: 100
          flash: short
        target:
          entity_id: light.entry
      - delay:
          seconds: 2
      - service: light.turn_off
        target:
          entity_id: light.entry

  - alias: '[areas|entry] Light Calibration Automation'
    description: Automates light on/off cycle for entry calibration and resets input boolean
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.entry_light_level_calibration_switch
        to: 'on'  # Starts the automation when the boolean is turned on
    variables:
      repeat_count: 20  # Number of on/off cycles
    action:
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id: switch.adaptive_lighting_adapt_brightness_adaptive_lighting
          manual_control: true
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
          manual_control: true
      - repeat:
          count: '{{ repeat_count }}'
          sequence:
            - service: light.turn_on
              target:
                entity_id: light.entry
              data_template:
                brightness_pct: "{{ range(20, 101) | random }}"  # Random brightness between 20% and 100%
                color_temp: "{{ range(2000, 6536) | random }}"  # Random color temperature between 2000K and 6535K
            - delay:
                minutes: 15  # Wait 15 minutes with the lights on
            - service: light.turn_off
              target:
                entity_id: light.entry
            - delay:
                minutes: 15  # Wait 15 minutes with the lights off
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id: switch.adaptive_lighting_adapt_brightness_adaptive_lighting
          manual_control: false
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id: switch.adaptive_lighting_adapt_color_adaptive_lighting
          manual_control: false
      - service: input_boolean.turn_off  # Turn off the boolean to reset
        target:
          entity_id: input_boolean.entry_light_level_calibration_switch
################
#    SCENES    #
################
scene:

################
#    LIGHTS    #
################
light:
  # - platform: template
  #   lights:
  #     shelly_entry_light:
  #       # entity_id: switch.shelly_entry
  #       value_template: "{{ states('switch.shelly_entry') }}"
  #       turn_on:
  #         service: switch.turn_on
  #         entity_id: switch.shelly_entry
  #       turn_off:
  #         service: switch.turn_off
  #         entity_id: switch.shelly_entry
  # - platform: group
  #   name: Entry Lights
  #   entities:
  #     - light.shelly_entry_light
  #     - light.entry_1

################
#    GROUPS    #
################
group:
  # entry_motion_sensors:
  #   entities:
  #     - binary_sensor.motion_sensor_entry
  #     - binary_sensor.motion_sensor_entry2
#################
#    SCRIPTS    #
#################
script:
