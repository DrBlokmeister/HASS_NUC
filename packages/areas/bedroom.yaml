homeassistant:
  customize:
    automation.bedroom_light_turn_on_lights_through_motion:
      icon: mdi:lightbulb-outline
    automation.bedroom_light_match_scene_sensor:
      icon: mdi:lightbulb-outline
    automation.bedroom_light_switch_toggle:
      icon: mdi:light-switch
    automation.bedroom_light_switch_scene_cycle:
      icon: mdi:light-switch
    # sensor.wakeup_time:
    #   icon: mdi:clock-outline
    # sensor.bed_time:
    #   icon: mdi:clock-outline
    # automation.bedroom_light_lights_timeout_start:
    #   icon: mdi:clock-outline
    # automation.bedroom_light_lights_timeout_stop:
    #   icon: mdi:clock-outline
    # sensor.bedroom_scene:
    #   icon: mdi:lightbulb-outline
    script.bed_preheating:
      icon: mdi:bed-empty
    light.ledstrip_bed:
      icon: mdi:led-strip-variant
  customize_glob:
    "scene.bedroom_*":
      icon: mdi:lightbulb-outline

climate:
  # - platform: generic_thermostat
  #   name: Electric blanket
  #   heater: switch.blitzwolf_electricblanket
  #   target_sensor: sensor.temperature_electricblanket
  #   max_temp: 60
  #   cold_tolerance: 1
  #   hot_tolerance: 1
  #   min_cycle_duration:
  #     minutes: 5

timer:
  # bedroom_button_pressed:
  #   duration: '00:30:00'
  # get_out_of_bed:
  #   duration: '00:05:00'
  # bedroom_lights:
  # realwakeup:
  #   duration: '00:05:00'

input_number:
  # bed_preheat_temp:
  #   name: Bed preheating temperature
  #   #initial: 45
  #   min: 0
  #   max: 50
  #   step: 1
  # bed_postheat_temp:
  #   name: Bed postheating temperature
  #   #initial: 25
  #   min: 0
  #   max: 50
  #   step: 1
  # bed_preheat_time:
  #   name: Bed preheating time
  #   #initial: 60
  #   min: 10
  #   max: 120
  #   step: 1
  # bedscalecalibration_lowvalue_raw:
  #   name: Bed scale calibration low value raw
  #   #initial: -1171748
  #   step: 1
  #   min: -9000000
  #   max: 9000000
  #   mode: box
  # bedscalecalibration_lowvalue_kg:
  #   name: Bed scale calibration low value kg
  #   initial: 0
  #   step: 0.01
  #   min: -100
  #   max: 100
  #   mode: box
  # bedscalecalibration_highvalue_raw:
  #   name: Bed scale calibration high value raw
  #   #initial: -1414105
  #   step: 1
  #   min: -9000000
  #   max: 9000000
  #   mode: box
  # bedscalecalibration_highvalue_kg:
  #   name: Bed scale calibration high value kg
  #   #initial: 66.8
  #   step: 0.01
  #   min: -100
  #   max: 100
  #   mode: box
  # bedscalecalibration_helper:
  #   name: Bed scale calibration helper
  #   initial: 0
  #   step: 1
  #   min: -9000000
  #   max: 9000000
  #   mode: box
  bedroom_illumination_limit:
    name: Bedroom illumination limit
    step: 1
    min: 0
    max: 200
    mode: box
  bedroom_light_timeout: #in minutes
    name: Bedroom light timeout
    step: 1
    min: 0
    max: 30
    mode: box
  # bedscale1_sensitivity:
  #   name: Bedscale 1 Sensitivity
  #   step: 1
  #   min: 0
  #   max: 80000
  #   mode: box
  # bedscale2_sensitivity:
  #   name: Bedscale 2 Sensitivity
  #   step: 1
  #   min: 0
  #   max: 80000
  #   mode: box
  # bedscale3_sensitivity:
  #   name: Bedscale 3 Sensitivity
  #   step: 1
  #   min: 0
  #   max: 80000
  #   mode: box
  # bedscale4_sensitivity:
  #   name: Bedscale 4 Sensitivity
  #   step: 1
  #   min: 0
  #   max: 80000
  #   mode: box
  # bedscale1_offset:
  #   name: Bedscale 1 Offset
  #   step: 1
  #   min: 0
  #   max: 2000000
  #   mode: box
  # bedscale2_offset:
  #   name: Bedscale 2 Offset
  #   step: 1
  #   min: 0
  #   max: 2000000
  #   mode: box
  # bedscale3_offset:
  #   name: Bedscale 3 Offset
  #   step: 1
  #   min: 0
  #   max: 2000000
  #   mode: box
  # bedscale4_offset:
  #   name: Bedscale 4 Offset
  #   step: 1
  #   min: 0
  #   max: 2000000
  #   mode: box
  # bedscale1_weight:
  #   name: Bedscale 1 Weight
  #   step: 0.01
  #   min: 0
  #   max: 2
  #   mode: box
  # bedscale2_weight:
  #   name: Bedscale 2 Weight
  #   step: 0.01
  #   min: 0
  #   max: 2
  #   mode: box
  # bedscale3_weight:
  #   name: Bedscale 3 Weight
  #   step: 0.01
  #   min: 0
  #   max: 2
  #   mode: box
  # bedscale4_weight:
  #   name: Bedscale 4 Weight
  #   step: 0.01
  #   min: 0
  #   max: 2
  #   mode: box



input_select:
  bedroom_scenes:
    options:
      - bright_cool
      - bright_warm
      - goodnight
      - readinglight
      - nightlight
    initial: bright_warm
    icon: mdi:lightbulb-on-outline

#################
#    SENSORS    #
#################
sensor:
  - platform: template
    sensors:
      # bedscale_1_calibrated:
      #   friendly_name: "Bedscale 1 Calibrated"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ -((states('sensor.hx711_raw_value_1')|round(0) + states('input_number.bedscale1_offset')|round(0))/states('input_number.bedscale1_sensitivity')|round(0))|round(2) }}
      #   availability_template: "{{ states('sensor.hx711_raw_value_1')|is_number and states('input_number.bedscale1_offset')|is_number and states('input_number.bedscale1_sensitivity')|is_number }}"
      # bedscale_2_calibrated:
      #   friendly_name: "Bedscale 2 Calibrated"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ -((states('sensor.hx711_raw_value_2')|round(0) + states('input_number.bedscale2_offset')|round(0))/states('input_number.bedscale2_sensitivity')|round(0))|round(2) }}
      #   availability_template: "{{ states('sensor.hx711_raw_value_2')|is_number and states('input_number.bedscale2_offset')|is_number and states('input_number.bedscale2_sensitivity')|is_number }}"
      # bedscale_3_calibrated:
      #   friendly_name: "Bedscale 3 Calibrated"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ -((states('sensor.hx711_raw_value_3')|round(0) + states('input_number.bedscale3_offset')|round(0))/states('input_number.bedscale3_sensitivity')|round(0))|round(2) }}
      #   availability_template: "{{ states('sensor.hx711_raw_value_3')|is_number and states('input_number.bedscale3_offset')|is_number and states('input_number.bedscale3_sensitivity')|is_number }}"
      # bedscale_4_calibrated:
      #   friendly_name: "Bedscale 4 Calibrated"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ -((states('sensor.hx711_raw_value_4')|round(0) + states('input_number.bedscale4_offset')|round(0))/states('input_number.bedscale4_sensitivity')|round(0))|round(2) }}
      #   availability_template: "{{ states('sensor.hx711_raw_value_4')|is_number and states('input_number.bedscale4_offset')|is_number and states('input_number.bedscale4_sensitivity')|is_number }}"
      # bedscale_1_final:
      #   friendly_name: "Bedscale 1 Final"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {% if is_state('binary_sensor.bedsensor1_availability', 'on')%}
      #       {{ states('sensor.bedscale_1_calibrated')|round(2) }}
      #     {% else %}
      #       {{ ((states('sensor.bedscale_2_calibrated')|round(2) + states('sensor.bedscale_3_calibrated')|round(2) + states('sensor.bedscale_4_calibrated')|round(2))/3)|round(2) }}
      #     {% endif %}
      #   availability_template: "{{ states('binary_sensor.bedsensor1_availability')|is_number or (states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number) }}"
      # bedscale_2_final:
      #   friendly_name: "Bedscale 2 Final"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {% if is_state('binary_sensor.bedsensor2_availability', 'on')%}
      #       {{ states('sensor.bedscale_2_calibrated')|round(2) }}
      #     {% else %}
      #       {{ ((states('sensor.bedscale_1_calibrated')|round(2) + states('sensor.bedscale_3_calibrated')|round(2) + states('sensor.bedscale_4_calibrated')|round(2))/3)|round(2) }}
      #     {% endif %}
      #   availability_template: "{{ states('binary_sensor.bedsensor2_availability')|is_number or (states('sensor.bedscale_1_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number) }}"
      # bedscale_3_final:
      #   friendly_name: "Bedscale 3 Final"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {% if is_state('binary_sensor.bedsensor3_availability', 'on')%}
      #       {{ states('sensor.bedscale_3_calibrated')|round(2) }}
      #     {% else %}
      #       {{ ((states('sensor.bedscale_1_calibrated')|round(2) + states('sensor.bedscale_2_calibrated')|round(2) + states('sensor.bedscale_4_calibrated')|round(2))/3)|round(2) }}
      #     {% endif %}
      #   availability_template: "{{ states('binary_sensor.bedsensor3_availability')|is_number or (states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_1_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number) }}"
      # bedscale_4_final:
      #   friendly_name: "Bedscale 4 Final"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {% if is_state('binary_sensor.bedsensor4_availability', 'on')%}
      #       {{ states('sensor.bedscale_4_calibrated')|round(2) }}
      #     {% else %}
      #       {{ ((states('sensor.bedscale_1_calibrated')|round(2) + states('sensor.bedscale_2_calibrated')|round(2) + states('sensor.bedscale_3_calibrated')|round(2))/3)|round(2) }}
      #     {% endif %}
      #   availability_template: "{{ states('binary_sensor.bedsensor4_availability')|is_number or (states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_1_calibrated')|is_number) }}"
      # bed_weight_calibrated:
      #   friendly_name: "Bed weight calibrated"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ (states('input_number.bedscale1_weight')|round(2) * states('sensor.bedscale_1_final')|round(2)
      #       + states('input_number.bedscale2_weight')|round(2) * states('sensor.bedscale_2_final')|round(2)
      #       + states('input_number.bedscale3_weight')|round(2) * states('sensor.bedscale_3_final')|round(2)
      #       + states('input_number.bedscale4_weight')|round(2) * states('sensor.bedscale_4_final')|round(2))|round(2) }}
      #   availability_template: "{{ states('input_number.bedscale1_weight')|is_number and states('input_number.bedscale2_weight')|is_number and states('input_number.bedscale3_weight')|is_number and states('input_number.bedscale4_weight')|is_number and states('sensor.bedscale_1_final')|is_number and states('sensor.bedscale_2_final')|is_number and states('sensor.bedscale_3_final')|is_number and states('sensor.bedscale_4_final')|is_number }}"
      # bed_weight_calibrated_unweighted:
      #   friendly_name: "Bed weight calibrated unweighted"
      #   unit_of_measurement: kg
      #   icon_template: mdi:scale
      #   value_template: >-
      #     {{ (states('sensor.bedscale_1_calibrated')|round(2)
      #       + states('sensor.bedscale_2_calibrated')|round(2)
      #       + states('sensor.bedscale_3_calibrated')|round(2)
      #       + states('sensor.bedscale_4_calibrated')|round(2))|round(2) }}
      #   availability_template: "{{ states('sensor.bedscale_1_calibrated')|is_number and states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number }}"
      # bed_weight_balance_leftright:
      #   friendly_name: "Bed Weight Balance Left/Right"
      #   icon_template: mdi:scale-balance
      #   unit_of_measurement: arb
      #   value_template: >-
      #     {% if is_state('sensor.bed_weight_calibrated_unweighted', '0.0') %}
      #       0.00
      #     {% else %}
      #       {{ ((( states('sensor.bedscale_1_calibrated')|round(2) + states('sensor.bedscale_2_calibrated')|round(2) )
      #       - ( states('sensor.bedscale_3_calibrated')|round(2) + states('sensor.bedscale_4_calibrated')|round(2) ))
      #       / ( states('sensor.bed_weight_calibrated_unweighted')|round(2) + 5/states('sensor.bed_weight_calibrated_unweighted')|round(2)) )|round(2) }}
      #     {% endif %}
      #   availability_template: "{{ states('sensor.bed_weight_calibrated_unweighted')|is_number and states('sensor.bedscale_1_calibrated')|is_number and states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number }}"
      # bed_weight_balance_updown:
      #   friendly_name: "Bed Weight Balance Up/Down"
      #   icon_template: mdi:scale-balance
      #   unit_of_measurement: arb
      #   value_template: >-
      #       {% if is_state('sensor.bed_weight_calibrated_unweighted', '0.0') %}
      #         0.00
      #       {% else %}
      #         {{ ((( states('sensor.bedscale_1_calibrated')|round(2) + states('sensor.bedscale_3_calibrated')|round(2) )
      #             - ( states('sensor.bedscale_2_calibrated')|round(2) + states('sensor.bedscale_4_calibrated')|round(2) ))
      #             / ( states('sensor.bed_weight_calibrated_unweighted')|round(2) + 5/states('sensor.bed_weight_calibrated_unweighted')|round(2)) )|round(2) }}
      #       {% endif %}
      #   availability_template: "{{ states('sensor.bed_weight_calibrated_unweighted')|is_number and states('sensor.bedscale_1_calibrated')|is_number and states('sensor.bedscale_2_calibrated')|is_number and states('sensor.bedscale_3_calibrated')|is_number and states('sensor.bedscale_4_calibrated')|is_number }}"
      # people_in_bed:
      #   value_template: >-
      #     {% if states('sensor.bed_weight_calibrated')|float < 10 %}
      #       0
      #     {% elif states('sensor.bed_weight_calibrated')|float < 95 %}
      #       1
      #     {% elif states('sensor.bed_weight_calibrated')|float < 150 %}
      #       2
      #     {% else %}
      #       3
      #     {% endif %}
      #   icon_template: >-
      #     {% if states('sensor.bed_weight_calibrated')|float < 10 %}
      #       mdi:account-cancel
      #     {% elif states('sensor.bed_weight_calibrated')|float < 95 %}
      #       mdi:account
      #     {% elif states('sensor.bed_weight_calibrated')|float < 150 %}
      #       mdi:account-multiple
      #     {% else %}
      #       mdi:account-group
      #     {% endif %}
      #   availability_template: "{{ states('sensor.bed_weight_calibrated')|is_number }}"
      average_illumination_bedroom:
        device_class: illuminance
        unit_of_measurement: 'lx'
        value_template: >-
          {{ (states('sensor.illumination_bedroom')|round(1) + states('sensor.lightlevel_12')|round(1))/2 }}
        availability_template: "{{ states('sensor.illumination_bedroom')|is_number and states('sensor.lightlevel_12')|is_number }}"

  - platform: statistics
    entity_id: sensor.bedroom_co2
    name: CO2 Value Bedroom Max
    unique_id: statistics_co2_bedroom_max
    state_characteristic: value_max
    precision: 0
    max_age:
      hours: 24
  - platform: statistics
    entity_id: sensor.bedroom_co2
    name: CO2 Value Bedroom Min
    unique_id: statistics_co2_bedroom_min
    state_characteristic: value_min
    precision: 0
    max_age:
      hours: 24

  # - platform: derivative
  #   source: sensor.bed_weight_calibrated
  #   name: Bed weight change per minute
  #   unit_time: min
  #   time_window: "00:00:20"
########################
#    BINARY SENSORS    #
########################
binary_sensor:
  # - platform: template
  #   sensors:
  #     bed_occupied:
  #       device_class: occupancy
  #       value_template: "{{ not is_state('sensor.people_in_bed', '0') }}"
  #       availability_template: "{{ states('sensor.people_in_bed')|is_number }}"
  #     bedsensor1_availability:
  #       device_class: plug
  #       value_template: "{{ not (states('sensor.hx711_raw_value_1') in ['0', 'unavailable','unknown','none'] or (as_timestamp(now()) - as_timestamp(states.sensor.hx711_raw_value_1.last_changed))/3600 > 1) }}"
  #     bedsensor2_availability:
  #       device_class: plug
  #       value_template: "{{ not (states('sensor.hx711_raw_value_2') in ['0', 'unavailable','unknown','none'] or (as_timestamp(now()) - as_timestamp(states.sensor.hx711_raw_value_2.last_changed))/3600 > 1) }}"
  #     bedsensor3_availability:
  #       device_class: plug
  #       value_template: "{{ not (states('sensor.hx711_raw_value_3') in ['0', 'unavailable','unknown','none'] or (as_timestamp(now()) - as_timestamp(states.sensor.hx711_raw_value_3.last_changed))/3600 > 1) }}"
  #     bedsensor4_availability:
  #       device_class: plug
  #       value_template: "{{ not (states('sensor.hx711_raw_value_4') in ['0', 'unavailable','unknown','none'] or (as_timestamp(now()) - as_timestamp(states.sensor.hx711_raw_value_4.last_changed))/3600 > 1) }}"
########################
#    INPUT BOOLEANS    #
########################
input_boolean:
  sleep_tracking_on:
    name: Sleep as android sleep tracking on
    icon: mdi:sleep
  wakeup_alarm_on:
    name: Sleep as android alarm on
    icon: mdi:alarm
  tamara_sleeping:
    name: Tamara is sleeping
    icon: mdi:sleep
  override_alarm:
    name: Override alarm
    icon: mdi:alarm
  bedroom_button_pressed:
    name: Bedroom button pressed
    icon: mdi:light-switch

##################
#    SWITCHES    #
##################
switch:

#####################
#    AUTOMATIONS    #
#####################
automation:
  - alias: '[bedroom|light] Toggle independent bedroom lights'
    id: bedroom_light_toggle_independent_bedroom_lights
    mode: restart
    trigger:
      platform: event
      event_type: deconz_event
      event_data:
        id: bedroom_multiswitch
    action:
      - choose:
          - conditions:   ################## CONDITIONS BELOW ARE FOR QUICK PRESS-RELEASE ##################
              - condition: template
                value_template: "{{ trigger.event.data.event == 1002 }}" # X000 means quick-press X002 means quick-press release
            sequence:
              - service: light.toggle
                data:
                  entity_id:
                    - light.bedroom_ceiling_lights
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"


          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 2002 }}"
            sequence:
              - service: light.toggle
                data:
                  entity_id:
                    - light.bedside_left
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
              # - service: switch.flux_bedroom_fast_update
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 3002 }}"
            sequence:
              - service: light.toggle
                data:
                  entity_id:
                    - light.bedside_right
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"

              # - service: switch.flux_bedroom_fast_update
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 4002 }}"
            sequence:
              - service: light.toggle
                data:
                  entity_id:
                    - light.ledstrip_bed
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
          - conditions: ################## CONDITIONS BELOW ARE FOR LONG PRESS ##################
            - condition: template
              value_template: "{{ trigger.event.data.event == 1001 }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: 10
                  entity_id:
                    - light.bedroom_1
                    - light.shelly_bedroom
                    - light.bedroom_3
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 2001 }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: 10
                  entity_id:
                    - light.bedside_left
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 3001 }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: 10
                  entity_id:
                    - light.bedside_right
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
              # - delay:
              #     milliseconds: 100
              # - service: switch.flux_bedroom_fast_update
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.event == 4001 }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: 10
                  entity_id:
                    - light.ledstrip_bed
                  kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"


  #Toggle bedroom lights when switch is pressed
  # - alias: '[bedroom|light] Switch toggle' #was: bedroom_switch_toggle
  #   id: 'bedroom_light_switch_toggle'
  #   mode: restart
  #   trigger:
  #     platform: event
  #     event_type: deconz_event
  #     event_data:
  #       id: bedroom_smart_switch
  #       event: 1002
  #   action:
  #     - choose:
  #       - conditions:
  #           - condition: state
  #             entity_id: light.bedroom_lights
  #             state: 'off'
  #         sequence:
  #           - service: script.turn_on
  #             entity_id: script.set_correct_bedroom_scene
  #       - conditions:
  #           - condition: state
  #             entity_id: light.bedroom_lights
  #             state: 'on'
  #         sequence:
  #           - service: light.turn_off
  #             entity_id: light.bedroom_lights


  #Cycle bedroom lights when switch is pressed twice
  # - alias: '[bedroom|light] Cycle scenes with button'
  #   id: 'bedroom_light_cycle_scenes_with_button'
  #   mode: restart
  #   trigger:
  #     platform: event
  #     event_type: deconz_event
  #     event_data:
  #       id: bedroom_smart_switch
  #       event: 1004
  #   action:
  #   - service: input_select.select_next
  #     data:
  #       entity_id: input_select.bedroom_scenes
  #   - service: scene.turn_on
  #     data:
  #       entity_id: scene.bedroom_{{ states('input_select.bedroom_scenes') }}
  #   - service: input_boolean.turn_on
  #     data:
  #       entity_id: input_boolean.bedroom_button_pressed
  #   - service: timer.cancel
  #     data:
  #       entity_id: timer.bedroom_button_pressed
  #   - service: timer.start
  #     data:
  #       entity_id: timer.bedroom_button_pressed
  #       duration: '00:30:00'

  # - alias: '[bedroom|light] Lights timeout start' #was: timeout_bedroom_lights_button
  #   trigger:
  #     platform: event
  #     event_type: timer.started
  #     event_data:
  #       entity_id: timer.bedroom_button_pressed
  #   action:
  #     - service: scene.create
  #       data:
  #         scene_id: bedroom_lighting_automation_before
  #         snapshot_entities:
  #           - automation.bedroom_light_turn_on_lights_through_motion
  #           - automation.bedroom_light_turn_off_lights
  #           - automation.bedroom_light_match_scene_sensor
  #     - service: homeassistant.turn_off
  #       entity_id:
  #         - automation.bedroom_light_turn_on_lights_through_motion
  #         - automation.bedroom_light_turn_off_lights
  #         - automation.bedroom_light_match_scene_sensor

  # - alias: '[bedroom|light] Lights timeout stop' #was: timeout_finished_bedroom_lights_button
  #   trigger:
  #     - platform: event
  #       event_type: timer.finished
  #       event_data:
  #         entity_id: timer.bedroom_button_pressed
  #   condition:
  #     - condition: state
  #       entity_id: input_boolean.sleep_tracking_on
  #       state: 'off'
  #   action:
  #     - service: scene.turn_on
  #       entity_id: scene.bedroom_lighting_automation_before
  #     - service: automation.trigger
  #       entity_id:
  #         - automation.bedroom_light_turn_off_lights

########## SLEEP TRACKING ##########
  # - alias: '[bedroom|light] Sleep tracking start' #was: "Turn off lights when sleep tracking starts"
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.sleep_tracking_on
  #     to: 'on'
  #   action:
  #     - service: tts.cloud_say
  #       entity_id: media_player.living_room_speaker
  #       data:
  #         message: "Good night"
  #     - service: automation.turn_off
  #       entity_id:
  #         - group.bedroom_lighting_automations
  #         - group.kitchen_lighting_automations
  #         - group.livingroom_lighting_automations
  #         - group.study_lighting_automations
  #         - automation.bathroom_light_turn_on_light_through_motion
  #         - automation.entry_light_turn_on_light_through_motion
  #     - service: light.turn_off
  #       data:
  #         entity_id: all
  #         transition: 10
  #     - service: climate.set_temperature
  #       data:
  #         entity_id: climate.heating
  #         temperature: 5
  #     - service: climate.turn_off
  #       entity_id: climate.heating
  #     - delay: '00:00:10'
  #     - service: light.turn_off
  #       entity_id: all
  #     - delay: '00:00:10'
  #     - service: light.turn_off
  #       entity_id: all
  #     # - repeat:
  #     #     while:
  #     #       - condition: not
  #     #         conditions:
  #     #           - condition: state
  #     #             entity_id:
  #     #               - light.livingroom_lights
  #     #               - light.kitchen
  #     #               - light.livingroom_a_rgb_ledstrip
  #     #             state: 'off'
  #     #     sequence:
  #     #       - service: light.turn_off
  #     #         entity_id: all
  #     #       - delay:
  #     #           seconds: 10

  # - alias: '[bedroom|light] Wakeup alarm' #was: "Turn on lights during wakeup"
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.wakeup_alarm_on
  #     to: 'on'
  #   action:
  #     choose:
  #       - conditions:
  #           - condition: numeric_state
  #             entity_id: sensor.people_in_bed
  #             above: 1
  #         sequence:
  #           - service: light.turn_on
  #             data:
  #               entity_id: light.bedside_right
  #               brightness: 10
  #     default:
  #       - service: scene.turn_on
  #         entity_id: scene.bedroom_bright_wakeup

  # - alias: '[bedroom|light] Sleep tracking stop' #was: "Automation to run when ending sleep tracking"
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.sleep_tracking_on
  #     to: 'off'
  #   action:
  #     - choose:
  #         - conditions:
  #             - condition: numeric_state
  #               entity_id: sensor.people_in_bed
  #               above: 1
  #           sequence:
  #             - service: input_boolean.turn_off
  #               entity_id: input_boolean.wakeup_alarm_on
  #             - service: automation.turn_on
  #               entity_id:
  #                 - group.kitchen_lighting_automations
  #                 - group.livingroom_lighting_automations
  #                 - group.study_lighting_automations
  #                 - automation.bathroom_light_turn_on_light_through_motion
  #                 - automation.entry_light_turn_on_light_through_motion
  #             - wait_for_trigger:
  #                 - platform: numeric_state
  #                   entity_id: sensor.people_in_bed
  #                   below: 1
  #             - service: automation.turn_on
  #               entity_id: group.bedroom_lighting_automations
  #       default:
  #         - service: media_player.volume_set
  #           data:
  #             entity_id: media_player.living_room_speaker
  #             volume_level: 1
  #         - service: tts.cloud_say
  #           entity_id: media_player.living_room_speaker
  #           data:
  #             message: "Good morning!"
  #         - service: input_boolean.turn_off
  #           entity_id: input_boolean.wakeup_alarm_on
  #         - service: switch.turn_on
  #           entity_id: switch.plug_watercooker_switch
  #         - service: automation.turn_on
  #           entity_id:
  #             - group.bedroom_lighting_automations
  #             - group.kitchen_lighting_automations
  #             - group.livingroom_lighting_automations
  #             - group.study_lighting_automations
  #             - automation.bathroom_light_turn_on_light_through_motion
  #             - automation.entry_light_turn_on_light_through_motion
  #         - service: homeassistant.turn_off
  #           entity_id: climate.electric_blanket
  #         - wait_for_trigger:
  #             - platform: numeric_state
  #               entity_id: sensor.people_in_bed
  #               below: 1
  #               for:
  #                 minutes: 5
  #         - wait_for_trigger:
  #             - platform: state
  #               entity_id: binary_sensor.bedroom_motion_1
  #               to: 'off'
  #               for:
  #                 minutes: 10
  #         - service: light.turn_off
  #           entity_id: light.bedroom_lights

  # #shelly toggle
  # - alias: '[bedroom|light] Shelly toggle'
  #   mode: restart
  #   trigger:
  #     - platform: state
  #       entity_id: switch.shelly_bedroom
  #       from:
  #         - 'on'
  #         - 'off'
  #       to:
  #         - 'on'
  #         - 'off'
  #   condition:
  #     - condition: state
  #       entity_id: switch.shelly_bedroom
  #       state:
  #         - 'on'
  #         - 'off'
  #       for:
  #         seconds: 5
  #   action:
  #     # - service: light.toggle
  #     #   data:
  #     #     entity_id:
  #     #       - light.bedroom_lights
  #     #     brightness: 255
  #     #     transition: 0.5
  #     - choose:
  #       - conditions:
  #           - condition: state
  #             entity_id: light.bedroom_lights
  #             state: 'off'
  #         sequence:
  #           - service: script.turn_on
  #             entity_id: script.set_correct_bedroom_scene
  #       - conditions:
  #           - condition: state
  #             entity_id: light.bedroom_lights
  #             state: 'on'
  #         sequence:
  #           - service: light.turn_off
  #             entity_id: light.bedroom_lights
  #     - service: automation.turn_off
  #       entity_id:
  #         - group.bedroom_lighting_automations
  #     - delay:
  #         seconds: 30
  #     - service: automation.turn_on
  #       entity_id:
  #         - group.bedroom_lighting_automations

  # - alias: '[bedroom|light] Update illumination limit'
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: switch.shelly_bedroom
  #   condition:
  #     - condition: state
  #       entity_id: switch.shelly_bedroom
  #       state:
  #         - 'on'
  #         - 'off'
  #       for:
  #         seconds: 5
  #   action:
  #     - delay:
  #         seconds: 1
  #     - choose:
  #         - conditions:
  #             - condition: state
  #               entity_id: light.bedroom_lights
  #               state: 'on'
  #           sequence:
  #             - service: input_number.increment
  #               entity_id: input_number.bedroom_illumination_limit
  #         - conditions:
  #             - condition: state
  #               entity_id: light.bedroom_lights
  #               state: 'off'
  #           sequence:
  #             - service: input_number.decrement
  #               entity_id: input_number.bedroom_illumination_limit


  # - alias: '[bedroom|light]Lights_when_cabinet_is_open'
  #   mode: queued
  #   trigger:
  #     platform: state
  #     entity_id: binary_sensor.bedroom_closet_door_sensor
  #     to: 'on'
  #   action:
  #     - service: scene.create
  #       data:
  #         scene_id: bedroom_1_before
  #         snapshot_entities:
  #           light.bedroom_1
  #     - service: light.turn_on
  #       data:
  #         entity_id: light.bedroom_1
  #         brightness: 255
  #         color_temp: 280
  #         transition: 0.5
  #     - delay:
  #         seconds: 1
  #     - wait_template: "{{ is_state('binary_sensor.bedroom_closet_door_sensor', 'off')}}"
  #       timeout: '00:10:00'
  #       continue_on_timeout: false   #prevent restoring old light state if the closet remains open for a long time
  #     - service: scene.turn_on
  #       data:
  #         entity_id: scene.bedroom_1_before
  #         transition: 1
  #     - delay:
  #         seconds: 2

  # - alias: '[bedroom|light]Gradual light automation'
  #   mode: restart
  #   trigger:
  #     platform: state
  #     entity_id: binary_sensor.bedroom_motion_1
  #     to: 'on'
  #   condition:
  #     - condition: template
  #       value_template: "{{ states('sensor.average_illumination_bedroom')|int < states('input_number.bedroom_illumination_limit')|int }}"
  #     - condition: state
  #       entity_id: binary_sensor.house_occupied
  #       state: 'on'
  #   action:
  #     - service: script.turn_on
  #       entity_id: script.set_correct_bedroom_scene
  #     - service: timer.start
  #       data:
  #         entity_id: timer.bedroom_lights
  #         duration: "{{ states('input_number.bedroom_light_timeout')|int*60 }}"
  #     - wait_for_trigger:
  #         - platform: state
  #           entity_id: binary_sensor.bedroom_motion_1
  #           to: 'off'
  #           for:
  #             minutes: "{{ states('input_number.bedroom_light_timeout')|int }}"
  #         - platform: template
  #           value_template: "{{ states('sensor.average_illumination_bedroom')|int > states('input_number.bedroom_illumination_limit')|int }}"
  #           for:
  #             minutes: 10
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedroom_1
  #         brightness_step: -50
  #         transition: 0.5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.shelly_bedroom
  #         brightness_step: -50
  #         transition: 0.5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedroom_3
  #         brightness_step: -50
  #         transition: 0.5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedside_left
  #         brightness_step: -50
  #         transition: 0.5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedside_right
  #         brightness_step: -50
  #         transition: 0.5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.ledstrip_bed
  #         brightness_step: -50
  #         transition: 0.5
  #     - delay:
  #         seconds: 15
  #     - service: light.turn_off
  #       entity_id: light.bedroom_lights

  # - alias: '[bedroom|wakeup]GET OUT OF BED!'
  #   mode: single
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.sleep_tracking_on
  #     from: 'on'
  #     to: 'off'
  #   condition:
  #     - condition: state
  #       entity_id: person.sander_blok
  #       state: 'home'
  #     - condition: state
  #       entity_id: person.tamara
  #       state: 'not_home'
  #     - condition: numeric_state
  #       entity_id: sensor.people_in_bed
  #       below: 2
  #   action:
  #     - service: media_player.volume_set
  #       data:
  #         entity_id: media_player.living_room_speaker
  #         volume_level: 1
  #     - service: tts.cloud_say
  #       data:
  #         entity_id: media_player.living_room_speaker
  #         message: 'You have five minutes to get out of bed'
  #         language: en-IE
  #         options:
  #           gender: female
  #     - wait_for_trigger:
  #         - platform: state
  #           entity_id: sensor.people_in_bed
  #       timeout:
  #         minutes: 3
  #       continue_on_timeout: true
  #     - choose:
  #         - conditions: "{{ wait.trigger != none }}"
  #           sequence:
  #             - service: tts.cloud_say
  #               data:
  #                 entity_id: media_player.living_room_speaker
  #                 message: 'You successfully got out of bed. Well done!'
  #                 language: en-IE
  #                 options:
  #                   gender: female
  #       default:
  #         - service: light.turn_on
  #           data:
  #             entity_id: light.bedroom_lights
  #             flash: short
  #         - service: tts.cloud_say
  #           data:
  #             entity_id: media_player.living_room_speaker
  #             message: 'You have two minutes to get out of bed'
  #             language: en-IE
  #             options:
  #               gender: female
  #         - wait_for_trigger:
  #             - platform: state
  #               entity_id: sensor.people_in_bed
  #           timeout:
  #             minutes: 2
  #           continue_on_timeout: true
  #         - choose:
  #             - conditions: "{{ wait.trigger != none }}"
  #               sequence:
  #                 - service: tts.cloud_say
  #                   data:
  #                     entity_id: media_player.living_room_speaker
  #                     message: 'You successfully got out of bed. Well done!'
  #                     language: en-IE
  #                     options:
  #                       gender: female
  #           default:
  #             - service: tts.cloud_say
  #               data:
  #                 entity_id: media_player.living_room_speaker
  #                 message: 'You have five seconds to get out of bed'
  #                 language: en-IE
  #                 options:
  #                   gender: female
  #             - wait_for_trigger:
  #                 - platform: state
  #                   entity_id: sensor.people_in_bed
  #               timeout:
  #                 seconds: 5
  #               continue_on_timeout: true
  #             - choose:
  #                 - conditions: "{{ wait.trigger != none }}"
  #                   sequence:
  #                     - service: tts.cloud_say
  #                       data:
  #                         entity_id: media_player.living_room_speaker
  #                         message: 'You successfully got out of bed. Well done!'
  #                         language: en-IE
  #                         options:
  #                           gender: female
  #               default:
  #                 - service: tts.cloud_say
  #                   data:
  #                     entity_id: media_player.living_room_speaker
  #                     message: 'You did not get out of bed. Initiating self destruct sequence'
  #                     language: en-IE
  #                     options:
  #                       gender: female


  # - alias: '[bedroom|scale]Auto tare bed scale'
  #   mode: single
  #   trigger:
  #     platform: time_pattern
  #     minutes: "/30"
  #   condition:
  #     - condition: numeric_state
  #       entity_id: sensor.bed_weight_change_per_minute
  #       above: -0.1
  #       below: 0.1
  #     - condition: state
  #       entity_id: sensor.people_in_bed
  #       state: '0'
  #       for:
  #         minutes: 20
  #     - condition: state
  #       entity_id: input_boolean.sleep_tracking_on
  #       state: 'off'
  #       for:
  #         minutes: 20
  #   action:
  #     - service: script.tare_bed_scale
  #     - delay:
  #         minutes: 20

  # - alias: '[bedroom|lights] Turn off bedroom lighting automations when two people are in bed'
  #   mode: single
  #   trigger:
  #       - platform: numeric_state
  #         entity_id: sensor.people_in_bed
  #         above: 1
  #         for:
  #           minutes: 1
  #   action:
  #     - service: homeassisstant.turn_off
  #       entity_id: group.bedroom_lighting_automations
  #     - wait_for_trigger:
  #         - platform: numeric_state
  #           entity_id: sensor.people_in_bed
  #           below: 2
  #           for:
  #             minutes: 1
  #     - service: homeassisstant.turn_on
  #       entity_id: group.bedroom_lighting_automations

  # - alias: '[bedroom|wakeup] Set timer when wakeup is turned off'
  #   id: bedroom_wakeup_set_timer_when_wakeup_is_turned_off
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: input_boolean.sleep_tracking_on
  #       to: "off"
  #   condition:
  #     - condition: state
  #       entity_id: person.tamara
  #       state:
  #         - 'not_home'
  #         - 'unknown'
  #       for:
  #         hours: 10
  #   action:
  #     - service: timer.start
  #       data:
  #         entity_id: timer.realwakeup
  #     - wait_for_trigger:
  #         - platform: event
  #           event_type: timer.finished
  #           event_data:
  #             entity_id: timer.realwakeup
  #     - service: tts.cloud_say
  #       data:
  #         entity_id: media_player.living_room_speaker
  #         message: 'Your time is up. Get out of bed!'
  #         language: en-GB
  #         options:
  #           gender: female

  # - alias: '[bedroom|lights] Turn off lights when I get out of bed'
  #   id: bedroom_lights_turn_off_lights_when_I_get_out_of_bed
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.bed_occupied
  #       to: "off"
  #       for:
  #         minutes: 10
  #   condition:
  #     - condition: state
  #       entity_id: light.bedroom_lights
  #       state: "on"
  #   action:
  #     - delay:
  #         minutes: 10
  #     - wait_for_trigger:
  #         - platform: template
  #           value_template: "{{ is_state('binary_sensor.bed_occupied', 'off') and is_state('binary_sensor.bedroom_motion_1', 'off') }}"
  #           for:
  #             minutes: 10
  #     - service: light.turn_off
  #       entity_id: light.bedroom_lights
################
#    SCENES    #
################
scene:
  # - name: bedroom_bright_cool
  #   entities:
  #     light.bedroom_lights:
  #       state: on
  #       brightness: 254
  #       color_temp: 280
  #       transition: 2
  # - name: bedroom_bright_wakeup
  #   entities:
  #     light.bedroom_lights:
  #       state: on
  #       brightness: 254
  #       color_temp: 350
  #       transition: 25
  # - name: bedroom_bright_warm
  #   entities:
  #     light.bedroom_lights:
  #       state: on
  #       brightness: 254
  #       color_temp: 454
  #       transition: 2
  # - name: bedroom_goodnight
  #   entities:
  #     light.bedroom_1:
  #       state: on
  #       brightness: 141
  #       color_temp: 454
  #       transition: 2
  #     light.shelly_bedroom:
  #       state: on
  #       brightness: 141
  #       color_temp: 454
  #       transition: 2
  #     light.bedroom_3:
  #       state: off
  #       transition: 2
  #     light.bedside_right:
  #       state: on
  #       brightness: 141
  #       color_temp: 454
  #       transition: 2
  #     light.bedside_left:
  #       state: on
  #       brightness: 141
  #       color_temp: 454
  #       transition: 2
  #     light.ledstrip_bed:
  #       state: on
  #       brightness: 141
  #       color_temp: 454
  # - name: bedroom_nightlight
  #   entities:
  #     light.bedroom_1:
  #       state: on
  #       brightness: 1
  #       color_temp: 454
  #       transition: 3
  #     light.shelly_bedroom:
  #       state: off
  #       transition: 3
  #     light.bedroom_3:
  #       state: off
  #       transition: 3
  #     light.bedside_right:
  #       state: off
  #       transition: 3
  #     light.bedside_left:
  #       state: off
  #       transition: 3
  #     light.ledstrip_bed:
  #       state: on
  #       brightness: 30
  #       color_temp: 454
  # - name: bedroom_readinglight
  #   entities:
  #     light.bedside_right:
  #       state: on
  #       brightness: 50
  #       transition: 3
  #     light.bedside_left:
  #       state: on
  #       brightness: 50
  #       transition: 3
  # - name: bedroom_midnight_walkaround
  #   entities:
  #     light.bedroom_1:
  #       state: on
  #       brightness: 1
  #       color_temp: 454
  #       transition: 3
  #     light.shelly_bedroom:
  #       state: off
  #     light.bedroom_3:
  #       state: off
  #     light.bedside_right:
  #       state: off
  #     light.bedside_left:
  #       state: off
  #     light.ledstrip_bed:
  #       state: on
  #       brightness: 30
  #       color_temp: 454

################
#    GROUPS    #
################
group:
  bedroom_lighting_automations:
    entities:
      # - automation.bedroom_light_turn_off_lights
      # - automation.bedroom_light_match_scene_sensor
      # - automation.bedroom_light_turn_on_lights_through_motion
      - automation.bedroom_light_gradual_light_automation
  # bedroom_scenes:
  #   entities:
  #     - scene.bedroom_bright_cool
  #     - scene.bedroom_bright_wakeup
  #     - scene.bedroom_bright_warm
  #     - scene.bedroom_goodnight
  #     - scene.bedroom_nightlight
  #     - scene.bedroom_readinglight
  #     - scene.bedroom_midnight_walkaround
  # bedscale_entities:
  #   entities:
  #     - input_number.bedscalecalibration_lowvalue_kg
  #     - input_number.bedscalecalibration_highvalue_kg
  #     - input_number.bedscalecalibration_lowvalue_raw
  #     - input_number.bedscalecalibration_highvalue_raw
  #     - sensor.bed_weight_calibrated
  #     - sensor.bed_weight_change_per_minute
  #     - sensor.bed_weight_drift_compensated
  #     - sensor.hx711_raw_value
  #     - sensor.hx711_value
  #     - sensor.people_in_bed
  #     - binary_sensor.bed_occupied
  #     - script.tare_bed_scale


################
#    LIGHTS    #
################
light:
  # - platform: group
  #   name: Bedroom Lights
  #   entities:
  #     - light.bedroom_1
  #     - light.shelly_bedroom
  #     - light.bedroom_3
  #     - light.bedside_right
  #     #- light.bedside_left
  #     - light.ledstrip_bed
  # - platform: group
  #   name: Bedroom ceiling lights
  #   entities:
  #     - light.bedroom_1
  #     - light.shelly_bedroom
  #     - light.bedroom_3

#################
#    SCRIPTS    #
#################
script:
  # toggle_bedroom_lights:
  #   sequence:
  #   - service_template: script.toggle_bedroom_lights_{% if is_state('light.bedroom_lights', 'off')%}on{% else %}off{% endif %}

  # toggle_bedroom_lights_on:
  #   sequence:
  #     service: scene.turn_on
  #     data:
  #       entity_id: scene.{{ states( 'sensor.bedroom_scene' ) }}

  # toggle_bedroom_lights_bright:
  #   sequence:
  #       - service: scene.turn_on
  #         entity_id: scene.bedroom_bright_warm

  # toggle_bedroom_lights_off:
  #   sequence:
  #       - service: light.turn_off
  #         entity_id: light.bedroom_lights

  # set_correct_bedroom_scene:
  #   sequence:
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedroom_1
  #           - light.shelly_bedroom
  #         transition: "{% if is_state('light.bedroom_1', 'on') %}3{% else %}0.5{% endif %}"
  #         brightness: >-
  #           {% if now().hour < 4 %}
  #             50
  #           {% elif now().hour < 19 %}
  #             255
  #           {% elif now().hour < 22 %}
  #             {{ (255 - 205 * (now().hour - 19)/3)|int }}
  #           {% else %}
  #             50
  #           {% endif %}
  #         kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedroom_3
  #         transition: "{% if is_state('light.bedroom_3', 'on') %}3{% else %}0.5{% endif %}"
  #         brightness: >-
  #           {% if now().hour < 4 %}
  #             0
  #           {% elif now().hour < 19 %}
  #             255
  #           {% elif now().hour < 21 %}
  #             {{ (255 - 255 * (now().hour - 19)/2)|int }}
  #           {% else %}
  #             0
  #           {% endif %}
  #         kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedside_left
  #           - light.bedside_right
  #         transition: "{% if is_state('light.bedside_left', 'on') %}3{% else %}0.5{% endif %}"
  #         brightness: >-
  #           {% if now().hour < 4 %}
  #             0
  #           {% elif now().hour < 21 %}
  #             255
  #           {% elif now().hour < 22.5 %}
  #             {{ (255 - 245 * (now().hour - 19)/3.5)|int }}
  #           {% else %}
  #             10
  #           {% endif %}
  #         kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.ledstrip_bed
  #         transition: "{% if is_state('light.ledstrip_bed', 'on') %}3{% else %}0.5{% endif %}"
  #         brightness: >-
  #           {% if now().hour < 7 %}
  #             100
  #           {% elif now().hour < 20 %}
  #             0
  #           {% elif now().hour < 22.5 %}
  #             {{ (255 - 100 * (now().hour - 19)/2.5)|int }}
  #           {% else %}
  #             155
  #           {% endif %}
  #         kelvin: "{{ state_attr('switch.adaptive_lighting_adaptive_lighting', 'color_temp_kelvin') | int(4000) }}"

  # wakeup_sunrise_sequence:
  #   sequence:
  #     - service: light.turn_on
  #       data:
  #         entity_id: light.bedroom_1
  #         color_temp: 454
  #         brightness: 1
  #     - delay:
  #         minutes: 3
  #     - service: light.turn_on
  #       data:
  #         entity_id: light.shelly_bedroom
  #         color_temp: 454
  #         brightness: 1
  #     - delay:
  #         minutes: 2
  #     - service: light.turn_on
  #       data:
  #         entity_id: light.bedroom_3
  #         color_temp: 454
  #         brightness: 1
  #     - delay:
  #         minutes: 5
  #     - service: light.turn_on
  #       data:
  #         entity_id:
  #           - light.bedroom1
  #           - light.bedroom2
  #           - light.bedroom3
  #         color_temp: 380
  #         brightness: 85
  #         transition: 600
  #     - delay:
  #         minutes: 10
  #     - service: light.turn_on
  #       data:
  #         entity_id: light.bedroom_lights
  #         color_temp: 350
  #         brightness: 254
  #         transition: 600

  # bed_preheating:
  #   mode: restart
  #   sequence:
  #     - service: homeassistant.turn_on
  #       data:
  #         entity_id: climate.electric_blanket
  #     - service: climate.set_temperature
  #       data:
  #         entity_id: climate.electric_blanket
  #         temperature: "{{ states('input_number.bed_preheat_temp')|int }}"
  #     - delay:
  #         minutes: "{{ states('input_number.bed_preheat_time')|int }}"
  #     - service: climate.set_temperature
  #       data:
  #         entity_id: climate.electric_blanket
  #         temperature: "{{ states('input_number.bed_postheat_temp')|int }}"
  # turn_off_bed_preheating:
  #   mode: restart
  #   sequence:
  #     - service: script.turn_off
  #       entity_id: script.bed_preheating
  #     - service: climate.turn_off
  #       entity_id: climate.electric_blanket
  
  # tare_all_scales:
  #   sequence:
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.bedscale1_offset
  #         value: >-
  #           {{ -(states('sensor.hx711_raw_value_1')|int) }}
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.bedscale2_offset
  #         value: >-
  #           {{ -(states('sensor.hx711_raw_value_2')|int) }}
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.bedscale3_offset
  #         value: >-
  #           {{ -(states('sensor.hx711_raw_value_3')|int) }}
  #     - service: input_number.set_value
  #       data:
  #         entity_id: input_number.bedscale4_offset
  #         value: >-
  #           {{ -(states('sensor.hx711_raw_value_4')|int) }}
